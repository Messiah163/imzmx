{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/dialog-box-without-all-controls.png","path":"img/dialog-box-without-all-controls.png","modified":0,"renderable":0},{"_id":"source/img/dialog-box-with-all-controls.png","path":"img/dialog-box-with-all-controls.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","path":"css/cloudTie/mobile.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/pc.less","path":"css/cloudTie/pc.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.js","path":"js/cloudTie/loader.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","path":"js/cloudTie/loader.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","path":"js/cloudTie/mobile.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","path":"js/cloudTie/mobile.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","path":"js/cloudTie/pc.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.js","path":"js/cloudTie/pc.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"c8bcf84ee6720937dde3c90e555f609314007f3c","modified":1496975051000},{"_id":"source/CNAME","hash":"d9fed198cfd2aef7d93e5a0d7dad30913066266e","modified":1496973192000},{"_id":"source/404.html","hash":"b74e38e322d86183d8865cd8dce465058e879e9c","modified":1496973192000},{"_id":"themes/indigo/.DS_Store","hash":"c382e91dd2f72e2007a9380b6d7aa9dfc80f8231","modified":1494406289000},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1494107756000},{"_id":"themes/indigo/README.md","hash":"15ab71102c10c65c4cf594693abdf644b1e4d92c","modified":1494107756000},{"_id":"themes/indigo/_config.yml","hash":"f66dd67a0d4f35c80fdbb8341505f120a8547a66","modified":1496991111000},{"_id":"themes/indigo/_config.yml.bak","hash":"9596d9d8e185a1d2916ebc574b8b9ba26b1ff298","modified":1494405583000},{"_id":"themes/indigo/package.json","hash":"106d12191bde5d14ddc96628a94822646b8efc16","modified":1494107756000},{"_id":"source/_posts/Apache-调错笔记.md","hash":"0547e76198bc358d3bdaee212e09903829c37194","modified":1496973440000},{"_id":"source/_drafts/Hexo进阶教程.md","hash":"dbdbd7010d47ede2fd7f009b8c6dbee4b4f60d85","modified":1496973192000},{"_id":"source/ITE/index.md","hash":"be3f63d34b3e8d631e8e13aadb252a4e7b3b2805","modified":1496973192000},{"_id":"source/404/index.md","hash":"37a5ac069f21a5a3f843ed57eac9b032998c5295","modified":1496973192000},{"_id":"source/_posts/Resume.md","hash":"ecbee59706f24c46765d26f0e6529e55b5fe452e","modified":1497254777000},{"_id":"source/_posts/centos-s.md","hash":"f9283d6e37bdb627968228392df009447dc96920","modified":1496973192000},{"_id":"source/_posts/Mac生产力配置备忘.md","hash":"ace840fbc6670f53b525da9d774e1175a8ef1cdc","modified":1496973192000},{"_id":"source/_posts/Productive-Configuration-For-Mac.md","hash":"dddbff4431b21a6e1b5db4c22cb96da909ad7694","modified":1496973192000},{"_id":"source/categories/index.md","hash":"ccd9ee79af3e5c749d636d2e115bd1c89a610c73","modified":1496973192000},{"_id":"source/_posts/hello-Hexo.md","hash":"ac43a6d9f76a60cf515f6b875b40b9bcd6916abe","modified":1496973192000},{"_id":"source/tags/index.md","hash":"f12065e97bd54f0726ba43a459b228afaba16945","modified":1496973192000},{"_id":"source/about/index.md","hash":"179deaad05e9eaead0ade0dbd4c0b31b017401f4","modified":1497254777000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"a604d0c6eb82a5957dff5c72f419eae24325b9ad","modified":1494107756000},{"_id":"themes/indigo/layout/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1494405708000},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1494107756000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1494107756000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1494107756000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1494107756000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1494107756000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1494107756000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1494107756000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1494107756000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1494107756000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1494107756000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1494107756000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1494107756000},{"_id":"themes/indigo/source/.DS_Store","hash":"5f1d26d744a50807dd4ceb27de912882e57b1a64","modified":1494406298000},{"_id":"source/img/dialog-box-without-all-controls.png","hash":"72c43380ee62ce6d746afa4095b84dd6e8573dd2","modified":1489332474000},{"_id":"source/img/dialog-box-with-all-controls.png","hash":"6a04c4ae170241da789ad66558d75303ef19f90d","modified":1489332474000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/.DS_Store","hash":"8e3aafa8108cb25165b3b4f7372df6aaf0fd729e","modified":1494406248000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"051b81d5b51f238f2f493eb5ddd2441ada7b6b6c","modified":1496973192000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"e01d1987f1016c521a19355d38d35dc78d20f3da","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"58745bd3b21926014a98e18a35c9721e97fcb0c1","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"27f37ef30ea3651940be6f3f16f33ec492b252e5","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"9b4dd97e7f558bb619d805ff6eb89abd8bc945ea","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1494107756000},{"_id":"themes/indigo/source/css/style.less","hash":"6e8609fa857be01f0206209a746c9872389c42c3","modified":1494107756000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"a0f2a7b537bfe67f67956b8aefa1b1e267408995","modified":1496973192000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1496973192000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1496973192000},{"_id":"themes/indigo/source/img/favicon.ico","hash":"67e1d736b3a3b4d8bcb818028790edfc4c4bd301","modified":1496973192000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1496973192000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1496973192000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"f4d6e66bad3e36c32dbec2dff9c9f56526885c0a","modified":1496973192000},{"_id":"themes/indigo/source/js/main.min.js","hash":"7355f5a169c02ff32af75b95237ef34e3756e9c8","modified":1494107756000},{"_id":"themes/indigo/source/js/main.js","hash":"5c51b53d59d5131bfa4e9b6a0af3557ee6dc6a85","modified":1494107756000},{"_id":"themes/indigo/source/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1494107756000},{"_id":"themes/indigo/source/js/search.js","hash":"c3f80dee3bab6bd4895b55b849085c8af7d1e647","modified":1494107756000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"ddcaca945c6d2b151eb7eb7208d44b8f318f5799","modified":1496973192000},{"_id":"themes/indigo/source/js/embed.min.js","hash":"bf39139ceccbd38a925bc1c434f6229df27b0e7c","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"de23dfaaaed783f6ade86084fb7bcee531dce4d0","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"fe1117d6e3c8a52be00ecc758df2df4be91b13a5","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"edc98c8015ab1deff32507d5f563f5cab0bd7f68","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/plugins/wangyi-ygt.ejs","hash":"0540808912afbbd8dddbdd15b8d1b54426d8b221","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"968b27ca952d01b066cfe49fb670faf177d6b67e","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"5840e2234e751a993b4a0c67282b03e367a3ceb7","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"ce764334c94e198fde3d222eadedc8813f026fca","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1494107756000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/_inputBox.less","hash":"3156898bbbbe0d897f475c03e1e6245e97399613","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/_joinCount.less","hash":"c1e5821189d17419869249cbd556d8da992fbfd3","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/_reset.less","hash":"9228ab9e7d92a3cd8cda340ae67f5b172863c835","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/_share.less","hash":"9c95ca439e85fadbca00778463a9375fbeba9ad2","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","hash":"0d68b7606a1b3c14a18a03ae3c80e4602f13c75b","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1494107756000},{"_id":"themes/indigo/source/css/cloudTie/pc.less","hash":"8038abcea49d6f74a6ff155cc565b4a675107ae6","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"926df2edbeb6afdbe8955b336f191ed991f66450","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"c075e2ee959ada91091281da98cf020c83930124","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"15e2bcbdf2ffb44707e4c7d0b6ba166fe1598ac0","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"b6b4caf08c3be67db5a14fc54241b61a815a5ffa","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"61596d022ea489ec6a0dda9fe93c5c6479135da9","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"a09aeb68646e6309d737dddea237a2d160608bbf","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"933874033bc487937ea34f6b05f1f94bd52ad758","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"6a7962f817199802f91d32d4e9bb87098683d84c","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"49fdcf4bde1a9d2aa4db4d8d117f46b432cee8d0","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"de48d76de6b99d7aa3f176cb1345b5bd1a6e3ec0","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"caf782f681fc97ecdab34bc34e16e3353bcd1eb6","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"1e2a57b7dc9ca3ef46d9966b49d0a8e614920c0a","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"9494e2183ce7a7a3f5742e3ba42b3514312a5006","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"4218e03b97d12b006dc01c78f02f76a1e0daafb7","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"2fb5b1105fd1863c2fc25fa5c9973748691b93e8","modified":1494107756000},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"2cf171e7465da213a28e3c271303916ceef9c8a2","modified":1494107756000},{"_id":"themes/indigo/source/js/cloudTie/loader.js","hash":"299d58e74946a2aeb8db74d3e4b6b5adfe694e15","modified":1494107756000},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","hash":"e73fcd885be2c4585f154861c9969e3c955d03e3","modified":1494107756000},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","hash":"859e3efb15db88cedfd18f8523ecfd21f3a22324","modified":1494107756000},{"_id":"themes/indigo/source/js/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1494107756000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"c19f5e28365c7ba6fa938591a8021da7d603253d","modified":1494107756000},{"_id":"themes/indigo/source/img/avatar.png","hash":"e66b599800f1daba64130f7019f5d49dcc4ce39a","modified":1496973192000},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","hash":"67a0a31ee1e491635369b0401d629e97fccd4d94","modified":1494107756000},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","hash":"aea28510192fb36a36bf174716a39afd1ca20240","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1494107756000},{"_id":"themes/indigo/source/js/cloudTie/pc.js","hash":"25d4ae345f8122f8c7e8e48959d37523dd1e4abb","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1494107756000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1494107756000},{"_id":"public/404/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497234714739},{"_id":"public/atom.xml","hash":"7976e1c8745a361d67dd886f9088e2b2885b28aa","modified":1497234715170},{"_id":"public/content.json","hash":"de434da8b72faa10be5d86dffddbca9b46c2d74d","modified":1497255024950},{"_id":"public/search.xml","hash":"69e5c7fa3e381e2d369c874c4555f42d7e587470","modified":1497255025470},{"_id":"public/404.html","hash":"b21cd4a64a5b7e54648c55a64e99be207f9b911a","modified":1497234715196},{"_id":"public/archives/2017/04/index.html","hash":"563ffc2310fc002df075bda2ba8e01efd56c768e","modified":1497234715208},{"_id":"public/archives/2017/05/index.html","hash":"9abb1a0840a89c0867d3817bf86cf918b044b941","modified":1497234715208},{"_id":"public/categories/调错笔记/index.html","hash":"4d3d18d9ef41b80704b63cff67b250d4b141c46e","modified":1497234715209},{"_id":"public/categories/Linux/index.html","hash":"58764757fc37c054e222f15b70a0877ea7cdc117","modified":1497234715209},{"_id":"public/categories/备忘录/index.html","hash":"eb42e012b16fbe12e1e4709c9fe63f37b43647f6","modified":1497234715210},{"_id":"public/tags/Apache/index.html","hash":"c466fdb2256d61770b7d26102f9b604f4e2193c6","modified":1497234715210},{"_id":"public/tags/服务器/index.html","hash":"4c9fb6c370b2bc1d73f5f8338f08b0fd4f904c01","modified":1497234715210},{"_id":"public/tags/CentOS/index.html","hash":"2946ee4f77fef40c798a231395fe2626f7d66384","modified":1497234715210},{"_id":"public/tags/Perl/index.html","hash":"8245ca4f8796d5e8282941bb2aee4c6b438b9ab6","modified":1497234715210},{"_id":"public/tags/Python/index.html","hash":"60173c0f1107297534a0742788c258a316dc9394","modified":1497234715210},{"_id":"public/tags/mac/index.html","hash":"53eae69ea5e5eec861df066abb75e7102b15b7b3","modified":1497234715210},{"_id":"public/tags/homebrew/index.html","hash":"c2d5c34f76a2fa01dac9a7fde9e4d5ccb75a41fb","modified":1497234715210},{"_id":"public/tags/IDE/index.html","hash":"132443ce396dc214a2c67e5cd2f7019fecdb81d2","modified":1497234715210},{"_id":"public/tags/zsh/index.html","hash":"6e355d5949dfbdd50f94c2293471dbe4d3069ef3","modified":1497234715210},{"_id":"public/tags/git/index.html","hash":"5a014ba365599005979cf73888bd611d35769d29","modified":1497234715210},{"_id":"public/tags/sublime/index.html","hash":"fa3021ef3dc5da963acefa461b002b15a0646307","modified":1497234715210},{"_id":"public/ITE/index.html","hash":"704ca2c69d2e804b0f192420e7d2bf5dd61c3ca8","modified":1497234715210},{"_id":"public/categories/index.html","hash":"8f4dd45805d6f3e0a0433415285871b8a0ff7dd8","modified":1497234715210},{"_id":"public/tags/index.html","hash":"6757a05a78e656168d608088c4f40bd1124f7893","modified":1497234715210},{"_id":"public/about/index.html","hash":"f5470b68029f83d68aeb23bc85f84150a77cc46e","modified":1497255025489},{"_id":"public/2017/04/01/hello-Hexo/index.html","hash":"3c88857d0f6dcb1d500ea0d8b1bdda9af15239b5","modified":1497234715211},{"_id":"public/2017/04/10/Mac生产力配置备忘/index.html","hash":"d8b963ddd8ecfa9eee6980f059caf71446c2be0c","modified":1497234715211},{"_id":"public/2017/04/15/centos-s/index.html","hash":"a2ccbe2c8ee33e1cda6ec1d7d8435e1c89ad4d49","modified":1497234715211},{"_id":"public/2017/05/01/Productive-Configuration-For-Mac/index.html","hash":"f55267a2dd31620f9b7450d6ee46a5dff0990e5d","modified":1497234715211},{"_id":"public/2017/05/24/Apache-调错笔记/index.html","hash":"e996b8302083aecbd24430ab971b269439772ae8","modified":1497234715211},{"_id":"public/archives/index.html","hash":"25f259d89d47489933e66050365e5372fa3d49e2","modified":1497234715211},{"_id":"public/archives/2017/index.html","hash":"069448608f26a790c54969f321b2f64b7dddbd57","modified":1497234715211},{"_id":"public/index.html","hash":"fa2114b08b2f9cec879810faef56aaf2d7ff7ad9","modified":1497234715211},{"_id":"public/2017/04/09/Resume/index.html","hash":"31d6d4b1530e383e4cb7bfd868687077361b5207","modified":1497255025491},{"_id":"source/img/avatar.jpg","hash":"ddcaca945c6d2b151eb7eb7208d44b8f318f5799","modified":1496973192000},{"_id":"source/img/avatar.png","hash":"e66b599800f1daba64130f7019f5d49dcc4ce39a","modified":1496974904000},{"_id":"public/img/avatar.jpg","hash":"ddcaca945c6d2b151eb7eb7208d44b8f318f5799","modified":1497255025497},{"_id":"public/img/avatar.png","hash":"e66b599800f1daba64130f7019f5d49dcc4ce39a","modified":1497255025506}],"Category":[{"name":"调错笔记","_id":"cj3plemx60005761wtd5lzyu9"},{"name":"Linux","_id":"cj3plemxr000e761wy3tnf1m4"},{"name":"备忘录","_id":"cj3plemxx000j761wy458rz22"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-06-09T01:53:12.000Z","updated":"2017-06-09T01:53:12.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj3plemv50000761wz4k4wjim","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"文天10国贸花名册","layout":"post","date":"2017-05-06T09:08:33.000Z","updated":"2017-05-10T09:38:23.000Z","_content":"| No.      | Name   | City   |\n|:-----------|:-------|:-----------|\n| 100510439 |ZhangMengxin  | Hangchou  |\n| 100510438 |WuYulong| Nanking |\n| 100510440 |ZhangYudong| Nanking |","source":"ITE/index.md","raw":"title: 文天10国贸花名册\nlayout: post\ndate: 2017-05-06 17:08:33\nupdated: 2017-05-10 17:38:23\n---\n| No.      | Name   | City   |\n|:-----------|:-------|:-----------|\n| 100510439 |ZhangMengxin  | Hangchou  |\n| 100510438 |WuYulong| Nanking |\n| 100510440 |ZhangYudong| Nanking |","path":"ITE/index.html","comments":1,"_id":"cj3plemwx0002761wh1g09jqq","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">No.</th>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">City</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">100510439</td>\n<td style=\"text-align:left\">ZhangMengxin</td>\n<td style=\"text-align:left\">Hangchou</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">100510438</td>\n<td style=\"text-align:left\">WuYulong</td>\n<td style=\"text-align:left\">Nanking</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">100510440</td>\n<td style=\"text-align:left\">ZhangYudong</td>\n<td style=\"text-align:left\">Nanking</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">No.</th>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">City</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">100510439</td>\n<td style=\"text-align:left\">ZhangMengxin</td>\n<td style=\"text-align:left\">Hangchou</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">100510438</td>\n<td style=\"text-align:left\">WuYulong</td>\n<td style=\"text-align:left\">Nanking</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">100510440</td>\n<td style=\"text-align:left\">ZhangYudong</td>\n<td style=\"text-align:left\">Nanking</td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"false","title":"My Blog Name | 404","date":"2017-04-25T06:27:26.000Z","_content":"","source":"404/index.md","raw":"---\nlayout: false\ntitle: \"My Blog Name | 404\"\ndate: 2017-04-25 14:27:26\n---\n","updated":"2017-06-09T01:53:12.000Z","path":"404/index.html","comments":1,"_id":"cj3plemx40004761wkf3h9pgz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-04-25T02:57:05.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-25 10:57:05\nlayout: categories\ncomments: false\n---\n","updated":"2017-06-09T01:53:12.000Z","path":"categories/index.html","_id":"cj3plemxc0008761wdrw5lpby","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-25T02:55:34.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-25 10:55:34\nlayout: tags\ncomments: false\n---\n","updated":"2017-06-09T01:53:12.000Z","path":"tags/index.html","_id":"cj3plemxl000a761wxafervmd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-04-25T06:43:40.000Z","_content":"## 个人信息\n - 简介：盖亚，男，九〇后\n - 手机：(+86) 18855530522\n - 邮件：[zhangmengxin188@gmail.com](mailto:zhangmengxin188@gmail.com)\n - 本科/河海大学文天学院(2010.9-2014.7)/国际经济与贸易/经济学学士\n - 工作年限：3年\n - [Resume](/2017/04/09/Resume)\n - 技术博客：[I'm ZMX](http://www.imzmx.win)\n - 地点：杭州\n\n## 工作经历\n### BBB金融有限公司\n数据开发工程师（2016.9-至今）\n - 基于LAMP框架的数据平台开发（Echarts可视化插件）\n - Hadoop环境搭建\n - 自动化分析报告\n - 异常风控监测\n - 数据挖掘建模等\n\n### AAA信息科技有限公司\n数据分析工程师（2014.7-2016.9）\n\n1. 分析篇\n - 运营分析报告：一般指标分析法\n - 年度用户（B 端）流失分析：分布密度分析法\n - 用户（C 端）生命周期：概率分布分析方法\n - 异常用户（B 端）分析：概率分布分析方法\n - 数据可视化项目，热力图方向（百度 API）\n - 用户画像描述：指标评价法\n\n1. 工程篇\n - 在 Win Server2012 上，用 Tableau Server 结合 Mysql 完成需求部门日报系统 \n - 在Centos 上，利用crontab 结合R完成自动化邮件系统\n - 利用Mysql存储过程，事件等完成数据异常报警等\n - 日常服务器的运维工作等\n\n## 技能列表\n1. SQL（精通）\n1. R（熟练） \n1. Python （熟练） \n1. Linux （熟练） \n1. PHP （熟练） \n1. Git （一般）\n1. Node.js （一般）\n1. HTML CSS JS（一般）\n1. MongoDB （基本）\n1. Excel （精通）\n1. Tableau （熟练）\n1. Hadoop （基本）\n1. Hive （一般）","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-25 14:43:40\n---\n## 个人信息\n - 简介：盖亚，男，九〇后\n - 手机：(+86) 18855530522\n - 邮件：[zhangmengxin188@gmail.com](mailto:zhangmengxin188@gmail.com)\n - 本科/河海大学文天学院(2010.9-2014.7)/国际经济与贸易/经济学学士\n - 工作年限：3年\n - [Resume](/2017/04/09/Resume)\n - 技术博客：[I'm ZMX](http://www.imzmx.win)\n - 地点：杭州\n\n## 工作经历\n### BBB金融有限公司\n数据开发工程师（2016.9-至今）\n - 基于LAMP框架的数据平台开发（Echarts可视化插件）\n - Hadoop环境搭建\n - 自动化分析报告\n - 异常风控监测\n - 数据挖掘建模等\n\n### AAA信息科技有限公司\n数据分析工程师（2014.7-2016.9）\n\n1. 分析篇\n - 运营分析报告：一般指标分析法\n - 年度用户（B 端）流失分析：分布密度分析法\n - 用户（C 端）生命周期：概率分布分析方法\n - 异常用户（B 端）分析：概率分布分析方法\n - 数据可视化项目，热力图方向（百度 API）\n - 用户画像描述：指标评价法\n\n1. 工程篇\n - 在 Win Server2012 上，用 Tableau Server 结合 Mysql 完成需求部门日报系统 \n - 在Centos 上，利用crontab 结合R完成自动化邮件系统\n - 利用Mysql存储过程，事件等完成数据异常报警等\n - 日常服务器的运维工作等\n\n## 技能列表\n1. SQL（精通）\n1. R（熟练） \n1. Python （熟练） \n1. Linux （熟练） \n1. PHP （熟练） \n1. Git （一般）\n1. Node.js （一般）\n1. HTML CSS JS（一般）\n1. MongoDB （基本）\n1. Excel （精通）\n1. Tableau （熟练）\n1. Hadoop （基本）\n1. Hive （一般）","updated":"2017-06-12T08:06:17.000Z","path":"about/index.html","_id":"cj3plemxq000d761w02b3eiz8","comments":1,"layout":"page","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>简介：盖亚，男，九〇后</li>\n<li>手机：(+86) 18855530522</li>\n<li>邮件：<a href=\"mailto:zhangmengxin188@gmail.com\" target=\"_blank\" rel=\"external\">zhangmengxin188@gmail.com</a></li>\n<li>本科/河海大学文天学院(2010.9-2014.7)/国际经济与贸易/经济学学士</li>\n<li>工作年限：3年</li>\n<li><a href=\"/2017/04/09/Resume\">Resume</a></li>\n<li>技术博客：<a href=\"http://www.imzmx.win\">I’m ZMX</a></li>\n<li>地点：杭州</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"BBB金融有限公司\"><a href=\"#BBB金融有限公司\" class=\"headerlink\" title=\"BBB金融有限公司\"></a>BBB金融有限公司</h3><p>数据开发工程师（2016.9-至今）</p>\n<ul>\n<li>基于LAMP框架的数据平台开发（Echarts可视化插件）</li>\n<li>Hadoop环境搭建</li>\n<li>自动化分析报告</li>\n<li>异常风控监测</li>\n<li>数据挖掘建模等</li>\n</ul>\n<h3 id=\"AAA信息科技有限公司\"><a href=\"#AAA信息科技有限公司\" class=\"headerlink\" title=\"AAA信息科技有限公司\"></a>AAA信息科技有限公司</h3><p>数据分析工程师（2014.7-2016.9）</p>\n<ol>\n<li><p>分析篇</p>\n<ul>\n<li>运营分析报告：一般指标分析法</li>\n<li>年度用户（B 端）流失分析：分布密度分析法</li>\n<li>用户（C 端）生命周期：概率分布分析方法</li>\n<li>异常用户（B 端）分析：概率分布分析方法</li>\n<li>数据可视化项目，热力图方向（百度 API）</li>\n<li>用户画像描述：指标评价法</li>\n</ul>\n</li>\n<li><p>工程篇</p>\n<ul>\n<li>在 Win Server2012 上，用 Tableau Server 结合 Mysql 完成需求部门日报系统 </li>\n<li>在Centos 上，利用crontab 结合R完成自动化邮件系统</li>\n<li>利用Mysql存储过程，事件等完成数据异常报警等</li>\n<li>日常服务器的运维工作等</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"技能列表\"><a href=\"#技能列表\" class=\"headerlink\" title=\"技能列表\"></a>技能列表</h2><ol>\n<li>SQL（精通）</li>\n<li>R（熟练） </li>\n<li>Python （熟练） </li>\n<li>Linux （熟练） </li>\n<li>PHP （熟练） </li>\n<li>Git （一般）</li>\n<li>Node.js （一般）</li>\n<li>HTML CSS JS（一般）</li>\n<li>MongoDB （基本）</li>\n<li>Excel （精通）</li>\n<li>Tableau （熟练）</li>\n<li>Hadoop （基本）</li>\n<li>Hive （一般）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>简介：盖亚，男，九〇后</li>\n<li>手机：(+86) 18855530522</li>\n<li>邮件：<a href=\"mailto:zhangmengxin188@gmail.com\">zhangmengxin188@gmail.com</a></li>\n<li>本科/河海大学文天学院(2010.9-2014.7)/国际经济与贸易/经济学学士</li>\n<li>工作年限：3年</li>\n<li><a href=\"/2017/04/09/Resume\">Resume</a></li>\n<li>技术博客：<a href=\"http://www.imzmx.win\">I’m ZMX</a></li>\n<li>地点：杭州</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"BBB金融有限公司\"><a href=\"#BBB金融有限公司\" class=\"headerlink\" title=\"BBB金融有限公司\"></a>BBB金融有限公司</h3><p>数据开发工程师（2016.9-至今）</p>\n<ul>\n<li>基于LAMP框架的数据平台开发（Echarts可视化插件）</li>\n<li>Hadoop环境搭建</li>\n<li>自动化分析报告</li>\n<li>异常风控监测</li>\n<li>数据挖掘建模等</li>\n</ul>\n<h3 id=\"AAA信息科技有限公司\"><a href=\"#AAA信息科技有限公司\" class=\"headerlink\" title=\"AAA信息科技有限公司\"></a>AAA信息科技有限公司</h3><p>数据分析工程师（2014.7-2016.9）</p>\n<ol>\n<li><p>分析篇</p>\n<ul>\n<li>运营分析报告：一般指标分析法</li>\n<li>年度用户（B 端）流失分析：分布密度分析法</li>\n<li>用户（C 端）生命周期：概率分布分析方法</li>\n<li>异常用户（B 端）分析：概率分布分析方法</li>\n<li>数据可视化项目，热力图方向（百度 API）</li>\n<li>用户画像描述：指标评价法</li>\n</ul>\n</li>\n<li><p>工程篇</p>\n<ul>\n<li>在 Win Server2012 上，用 Tableau Server 结合 Mysql 完成需求部门日报系统 </li>\n<li>在Centos 上，利用crontab 结合R完成自动化邮件系统</li>\n<li>利用Mysql存储过程，事件等完成数据异常报警等</li>\n<li>日常服务器的运维工作等</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"技能列表\"><a href=\"#技能列表\" class=\"headerlink\" title=\"技能列表\"></a>技能列表</h2><ol>\n<li>SQL（精通）</li>\n<li>R（熟练） </li>\n<li>Python （熟练） </li>\n<li>Linux （熟练） </li>\n<li>PHP （熟练） </li>\n<li>Git （一般）</li>\n<li>Node.js （一般）</li>\n<li>HTML CSS JS（一般）</li>\n<li>MongoDB （基本）</li>\n<li>Excel （精通）</li>\n<li>Tableau （熟练）</li>\n<li>Hadoop （基本）</li>\n<li>Hive （一般）</li>\n</ol>\n"}],"Post":[{"title":"Apache 调错笔记","author":"Messiah","date":"2017-05-24T08:44:00.000Z","_content":"## Apache 报AH00558，AH00072，AH00015错误\n\n#### AH00558\n``` bash\n$ apachectl configtest\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using messiah.local. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n```\n将生效的apache配置文件httpd.conf中的 ServerName 改成可用域名或如下配置\n``` bash\nServerName localhost\n```\n#### AH00072\n\n```\n$ apachectl restart\nhttpd not running, trying to start\n(13)Permission denied: AH00072: make_sock: could not bind to address [::]:80\n(13)Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:80\nno listening sockets available, shutting down\nAH00015: Unable to open logs\n```\n命令的权限不够,可以通过sudo运行，或者修改Apache的权限。\n\n``` bash\n$ sudo apachectl restart\n```\n","source":"_posts/Apache-调错笔记.md","raw":"title: Apache 调错笔记\nauthor: Messiah\ntags:\n  - Apache\n  - 服务器\ncategories:\n  - 调错笔记\ndate: 2017-05-24 16:44:00\n---\n## Apache 报AH00558，AH00072，AH00015错误\n\n#### AH00558\n``` bash\n$ apachectl configtest\nAH00558: httpd: Could not reliably determine the server's fully qualified domain name, using messiah.local. Set the 'ServerName' directive globally to suppress this message\nSyntax OK\n```\n将生效的apache配置文件httpd.conf中的 ServerName 改成可用域名或如下配置\n``` bash\nServerName localhost\n```\n#### AH00072\n\n```\n$ apachectl restart\nhttpd not running, trying to start\n(13)Permission denied: AH00072: make_sock: could not bind to address [::]:80\n(13)Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:80\nno listening sockets available, shutting down\nAH00015: Unable to open logs\n```\n命令的权限不够,可以通过sudo运行，或者修改Apache的权限。\n\n``` bash\n$ sudo apachectl restart\n```\n","slug":"Apache-调错笔记","published":1,"updated":"2017-06-09T01:57:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3plemwq0001761ws35ypedy","content":"<h2 id=\"Apache-报AH00558，AH00072，AH00015错误\"><a href=\"#Apache-报AH00558，AH00072，AH00015错误\" class=\"headerlink\" title=\"Apache 报AH00558，AH00072，AH00015错误\"></a>Apache 报AH00558，AH00072，AH00015错误</h2><h4 id=\"AH00558\"><a href=\"#AH00558\" class=\"headerlink\" title=\"AH00558\"></a>AH00558</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apachectl configtest</div><div class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using messiah.local. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</span></div><div class=\"line\">Syntax OK</div></pre></td></tr></table></figure>\n<p>将生效的apache配置文件httpd.conf中的 ServerName 改成可用域名或如下配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServerName localhost</div></pre></td></tr></table></figure></p>\n<h4 id=\"AH00072\"><a href=\"#AH00072\" class=\"headerlink\" title=\"AH00072\"></a>AH00072</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apachectl restart</div><div class=\"line\">httpd not running, trying to start</div><div class=\"line\">(13)Permission denied: AH00072: make_sock: could not bind to address [::]:80</div><div class=\"line\">(13)Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:80</div><div class=\"line\">no listening sockets available, shutting down</div><div class=\"line\">AH00015: Unable to open logs</div></pre></td></tr></table></figure>\n<p>命令的权限不够,可以通过sudo运行，或者修改Apache的权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apachectl restart</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Apache-报AH00558，AH00072，AH00015错误\"><a href=\"#Apache-报AH00558，AH00072，AH00015错误\" class=\"headerlink\" title=\"Apache 报AH00558，AH00072，AH00015错误\"></a>Apache 报AH00558，AH00072，AH00015错误</h2><h4 id=\"AH00558\"><a href=\"#AH00558\" class=\"headerlink\" title=\"AH00558\"></a>AH00558</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apachectl configtest</div><div class=\"line\">AH00558: httpd: Could not reliably determine the server<span class=\"string\">'s fully qualified domain name, using messiah.local. Set the '</span>ServerName<span class=\"string\">' directive globally to suppress this message</div><div class=\"line\">Syntax OK</span></div></pre></td></tr></table></figure>\n<p>将生效的apache配置文件httpd.conf中的 ServerName 改成可用域名或如下配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServerName localhost</div></pre></td></tr></table></figure></p>\n<h4 id=\"AH00072\"><a href=\"#AH00072\" class=\"headerlink\" title=\"AH00072\"></a>AH00072</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apachectl restart</div><div class=\"line\">httpd not running, trying to start</div><div class=\"line\">(13)Permission denied: AH00072: make_sock: could not bind to address [::]:80</div><div class=\"line\">(13)Permission denied: AH00072: make_sock: could not bind to address 0.0.0.0:80</div><div class=\"line\">no listening sockets available, shutting down</div><div class=\"line\">AH00015: Unable to open logs</div></pre></td></tr></table></figure>\n<p>命令的权限不够,可以通过sudo运行，或者修改Apache的权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apachectl restart</div></pre></td></tr></table></figure>\n"},{"title":"Hexo进阶教程","_content":"","source":"_drafts/Hexo进阶教程.md","raw":"---\ntitle: Hexo进阶教程\ntags:\n---\n","slug":"Hexo进阶教程","published":0,"date":"2017-06-09T01:53:12.000Z","updated":"2017-06-09T01:53:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3plemwy0003761wxk219r2j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Resume","date":"2017-04-09T02:30:58.000Z","updated":"2017-06-08T16:00:00.000Z","_content":"\n\n\n## Profile\n - Messiah，Male，90's\n - (+86) 18855530522\n - [zhangmengxin188@gmail.com](mailto:zhangmengxin188@gmail.com)\n - BA in Economics/Hohai University Wentian College (2010.Sep-2014.Jul)/International Economics And Trade\n - Employment Duration 3 yrs \n - [中文简历](/about)\n - [Web Site](http://www.imzmx.win)\n - Hangchow City, Chekiang, China\n\n## Experience\n### BBB Financial Co Ltd\n Data Development Engineer(Sep 2016 – Present 1 yrs )\n - Data Platform Development Based on LAMP (Echarts Visualization Plugin)\n - Install Hadoop Environment and config\n - Automated Analysis Report\n - Abnormal Risk Control Monitoring \n - The Data Mining Modeling etc\n\n### AAA Information Technology Co Ltd\nData Analysis Engineer(Jul 2014 – Sep 2016 2 yrs )\n\n1. Analysis\n - Opeartion Analysis Report : General Index Analysis\n - The Annual User Loss Analysis (Side B): Distribution Density Analysis\n - User Lifecycle (Side C): Distribution Density Analysis\n - Abnormal User Analysis (Side B)：Distribution Density Analysis\n - Data Visualization Project\n - User Portrait Description\n\n1. Project\n - On Win Server2012, Finish Demand Department Daily System with Tableau Server Combined with Mysql\n - On Centos, Using the Crontab and R complete Automated Email System\n - Using Mysql Such as Procedures, Events to do Abnormal Data Alarm, Etc\n - Server Daily Operational etc\n\n## Technical\n1. SQL（expert）\n1. R（proficient） \n1. Python （proficient） \n1. Linux （proficient） \n1. PHP （proficient） \n1. Git （average）\n1. Node.js （average）\n1. HTML CSS JS（average）\n1. MongoDB （basic）\n1. Excel （expert）\n1. Tableau （proficient）\n1. Hadoop （basic）\n1. Hive （average）","source":"_posts/Resume.md","raw":"---\ntitle: Resume\ndate: 2017-04-09 10:30:58\nupdated: 2017-06-09\ntags:\n---\n\n\n\n## Profile\n - Messiah，Male，90's\n - (+86) 18855530522\n - [zhangmengxin188@gmail.com](mailto:zhangmengxin188@gmail.com)\n - BA in Economics/Hohai University Wentian College (2010.Sep-2014.Jul)/International Economics And Trade\n - Employment Duration 3 yrs \n - [中文简历](/about)\n - [Web Site](http://www.imzmx.win)\n - Hangchow City, Chekiang, China\n\n## Experience\n### BBB Financial Co Ltd\n Data Development Engineer(Sep 2016 – Present 1 yrs )\n - Data Platform Development Based on LAMP (Echarts Visualization Plugin)\n - Install Hadoop Environment and config\n - Automated Analysis Report\n - Abnormal Risk Control Monitoring \n - The Data Mining Modeling etc\n\n### AAA Information Technology Co Ltd\nData Analysis Engineer(Jul 2014 – Sep 2016 2 yrs )\n\n1. Analysis\n - Opeartion Analysis Report : General Index Analysis\n - The Annual User Loss Analysis (Side B): Distribution Density Analysis\n - User Lifecycle (Side C): Distribution Density Analysis\n - Abnormal User Analysis (Side B)：Distribution Density Analysis\n - Data Visualization Project\n - User Portrait Description\n\n1. Project\n - On Win Server2012, Finish Demand Department Daily System with Tableau Server Combined with Mysql\n - On Centos, Using the Crontab and R complete Automated Email System\n - Using Mysql Such as Procedures, Events to do Abnormal Data Alarm, Etc\n - Server Daily Operational etc\n\n## Technical\n1. SQL（expert）\n1. R（proficient） \n1. Python （proficient） \n1. Linux （proficient） \n1. PHP （proficient） \n1. Git （average）\n1. Node.js （average）\n1. HTML CSS JS（average）\n1. MongoDB （basic）\n1. Excel （expert）\n1. Tableau （proficient）\n1. Hadoop （basic）\n1. Hive （average）","slug":"Resume","published":1,"_id":"cj3plemxa0007761wq9669aie","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Profile\"><a href=\"#Profile\" class=\"headerlink\" title=\"Profile\"></a>Profile</h2><ul>\n<li>Messiah，Male，90’s</li>\n<li>(+86) 18855530522</li>\n<li><a href=\"mailto:zhangmengxin188@gmail.com\" target=\"_blank\" rel=\"external\">zhangmengxin188@gmail.com</a></li>\n<li>BA in Economics/Hohai University Wentian College (2010.Sep-2014.Jul)/International Economics And Trade</li>\n<li>Employment Duration 3 yrs </li>\n<li><a href=\"/about\">中文简历</a></li>\n<li><a href=\"http://www.imzmx.win\">Web Site</a></li>\n<li>Hangchow City, Chekiang, China</li>\n</ul>\n<h2 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h2><h3 id=\"BBB-Financial-Co-Ltd\"><a href=\"#BBB-Financial-Co-Ltd\" class=\"headerlink\" title=\"BBB Financial Co Ltd\"></a>BBB Financial Co Ltd</h3><p> Data Development Engineer(Sep 2016 – Present 1 yrs )</p>\n<ul>\n<li>Data Platform Development Based on LAMP (Echarts Visualization Plugin)</li>\n<li>Install Hadoop Environment and config</li>\n<li>Automated Analysis Report</li>\n<li>Abnormal Risk Control Monitoring </li>\n<li>The Data Mining Modeling etc</li>\n</ul>\n<h3 id=\"AAA-Information-Technology-Co-Ltd\"><a href=\"#AAA-Information-Technology-Co-Ltd\" class=\"headerlink\" title=\"AAA Information Technology Co Ltd\"></a>AAA Information Technology Co Ltd</h3><p>Data Analysis Engineer(Jul 2014 – Sep 2016 2 yrs )</p>\n<ol>\n<li><p>Analysis</p>\n<ul>\n<li>Opeartion Analysis Report : General Index Analysis</li>\n<li>The Annual User Loss Analysis (Side B): Distribution Density Analysis</li>\n<li>User Lifecycle (Side C): Distribution Density Analysis</li>\n<li>Abnormal User Analysis (Side B)：Distribution Density Analysis</li>\n<li>Data Visualization Project</li>\n<li>User Portrait Description</li>\n</ul>\n</li>\n<li><p>Project</p>\n<ul>\n<li>On Win Server2012, Finish Demand Department Daily System with Tableau Server Combined with Mysql</li>\n<li>On Centos, Using the Crontab and R complete Automated Email System</li>\n<li>Using Mysql Such as Procedures, Events to do Abnormal Data Alarm, Etc</li>\n<li>Server Daily Operational etc</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Technical\"><a href=\"#Technical\" class=\"headerlink\" title=\"Technical\"></a>Technical</h2><ol>\n<li>SQL（expert）</li>\n<li>R（proficient） </li>\n<li>Python （proficient） </li>\n<li>Linux （proficient） </li>\n<li>PHP （proficient） </li>\n<li>Git （average）</li>\n<li>Node.js （average）</li>\n<li>HTML CSS JS（average）</li>\n<li>MongoDB （basic）</li>\n<li>Excel （expert）</li>\n<li>Tableau （proficient）</li>\n<li>Hadoop （basic）</li>\n<li>Hive （average）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Profile\"><a href=\"#Profile\" class=\"headerlink\" title=\"Profile\"></a>Profile</h2><ul>\n<li>Messiah，Male，90’s</li>\n<li>(+86) 18855530522</li>\n<li><a href=\"mailto:zhangmengxin188@gmail.com\">zhangmengxin188@gmail.com</a></li>\n<li>BA in Economics/Hohai University Wentian College (2010.Sep-2014.Jul)/International Economics And Trade</li>\n<li>Employment Duration 3 yrs </li>\n<li><a href=\"/about\">中文简历</a></li>\n<li><a href=\"http://www.imzmx.win\">Web Site</a></li>\n<li>Hangchow City, Chekiang, China</li>\n</ul>\n<h2 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h2><h3 id=\"BBB-Financial-Co-Ltd\"><a href=\"#BBB-Financial-Co-Ltd\" class=\"headerlink\" title=\"BBB Financial Co Ltd\"></a>BBB Financial Co Ltd</h3><p> Data Development Engineer(Sep 2016 – Present 1 yrs )</p>\n<ul>\n<li>Data Platform Development Based on LAMP (Echarts Visualization Plugin)</li>\n<li>Install Hadoop Environment and config</li>\n<li>Automated Analysis Report</li>\n<li>Abnormal Risk Control Monitoring </li>\n<li>The Data Mining Modeling etc</li>\n</ul>\n<h3 id=\"AAA-Information-Technology-Co-Ltd\"><a href=\"#AAA-Information-Technology-Co-Ltd\" class=\"headerlink\" title=\"AAA Information Technology Co Ltd\"></a>AAA Information Technology Co Ltd</h3><p>Data Analysis Engineer(Jul 2014 – Sep 2016 2 yrs )</p>\n<ol>\n<li><p>Analysis</p>\n<ul>\n<li>Opeartion Analysis Report : General Index Analysis</li>\n<li>The Annual User Loss Analysis (Side B): Distribution Density Analysis</li>\n<li>User Lifecycle (Side C): Distribution Density Analysis</li>\n<li>Abnormal User Analysis (Side B)：Distribution Density Analysis</li>\n<li>Data Visualization Project</li>\n<li>User Portrait Description</li>\n</ul>\n</li>\n<li><p>Project</p>\n<ul>\n<li>On Win Server2012, Finish Demand Department Daily System with Tableau Server Combined with Mysql</li>\n<li>On Centos, Using the Crontab and R complete Automated Email System</li>\n<li>Using Mysql Such as Procedures, Events to do Abnormal Data Alarm, Etc</li>\n<li>Server Daily Operational etc</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Technical\"><a href=\"#Technical\" class=\"headerlink\" title=\"Technical\"></a>Technical</h2><ol>\n<li>SQL（expert）</li>\n<li>R（proficient） </li>\n<li>Python （proficient） </li>\n<li>Linux （proficient） </li>\n<li>PHP （proficient） </li>\n<li>Git （average）</li>\n<li>Node.js （average）</li>\n<li>HTML CSS JS（average）</li>\n<li>MongoDB （basic）</li>\n<li>Excel （expert）</li>\n<li>Tableau （proficient）</li>\n<li>Hadoop （basic）</li>\n<li>Hive （average）</li>\n</ol>\n"},{"title":"用 CentOS 7 打造合适的科研环境","author":"Messiah","date":"2017-04-14T16:00:00.000Z","updated":"2017-04-18T16:00:00.000Z","comments":1,"_content":"\n这篇博文记录了我用 CentOS 7 搭建 **数据科学生产环境** 的过程，供我个人在未来重装系统时参考。对于其他同学，也许有借鉴意义。\n\n阅读须知：\n\n1.  **不推荐刚接触 Linux 的人使用 CentOS 发行版**；\n2.  本文尽量写的浅显易懂，但要求读者掌握 Linux 基础知识；\n3.  本文所有操作均在 CentOS 7 下完成，其他发行版或多或少与 CentOS 7 不同，因而仅供参考；\n4.  本文所安装的软件纯粹出于个人习惯及喜好，读者应自己判断，按需安装；\n\n<!--more-->\n\n## 安装 CentOS\n\nCentOS 7 的安装与其他 Linux 发行版的安装差不多，个别地方稍有不同。\n\n### 准备工作\n\n1.  准备材料\n    -   U 盘：容量 2GB 以上，用于制作 U 盘启动盘，因为在制作启动盘时会格式化 U 盘，所以 U 盘内不要包含重要资料\n    -   [CentOS 7.2 LiveCD ISO 镜像文件](http://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-LiveGNOME-1511.iso)\n    -   [Universal USB installer](http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/)：Windows 下的 U 盘启动盘制作工具\n    -   一个已安装 Windows 的电脑：用于制作 U 盘启动盘\n\n2.  运行 Universal USB installer 并制作 U 盘启动盘\n3.  将 U 盘插入计算机，重启，进入 BIOS 选择从 U 盘启动，即可进入 CentOS 的 LiveCD\n4.  进入 LiveCD 后，点击桌面的 “Install to Hard Drive” 即可安装\n\n注：Linux 下可以通过 `dd` 命令制作启动盘，但由于对原理不够了解，偶尔会导致制作失败，\n或制作成功后 U 盘容量有问题，还是用 Windows 下的 Universal USB installer 比较靠谱。\n\n### 安装过程\n\n1.  选择安装过程中使用的语言，这里应 **使用英语，不要使用汉语**。若安装界面使用汉语，最终安装的系统中会出现两个比较麻烦的问题：\n    1.  家目录下的系统文件夹如 Downloads、Desktop 等会以中文表示，这使得在命令行 `cd` 变得很麻烦；\n    2.  终端中某些字符用英文字体，某些字符用中文字体，效果非常差，需要自己修改终端字体方可；\n\n2.  选择区域和城市：Asia 和 Shanghai\n3.  键盘使用 English(US) 而不是 English(UK)\n4.  Hostname 可以改也可以不改，我用 `saturn.geolab`\n5.  安装的目的地，选择要使用的硬盘，在 “Other Storage Options” 处选择“I will configure partioning”，即手动分区\n\n### 分区\n\nCentOS7 的分区似乎比较特别，自认为经验很丰富的我在第一次安装 CentOS7 时还是在分区上耽误了很多时间。后来找到比较合适的分区方法，如下：\n\n-   点击 “Click here to create them automatically”，即让安装程序帮忙分区\n-   默认的分区方案是使用 LVM，其好处在于 “当机器有多块硬盘时，在使用的时候看上去只有一块”\n-   默认的文件系统为 XFS 而不是以前常用的 EXT4；\n-   自动分区完成后，再根据自己的需求，手动修改分区细节\n    -   `/boot` ：CentOS 自动分配，一定不要乱改；\n    -   `/` ：根目录，合理使用并及时清理的话 15G 就够了，不过建议 30G 以上；\n    -   `swap` ：与物理内存大小一致即可\n    -   `/opt` ：个人习惯是将第三方软件都安装在 `/opt` 下，所以分了 70G\n    -   `/home` ：余下的全部空间\n-   点击 “Begin to Install” 开始安装\n\n### 真正的安装\n\n1.  设置 root 密码\n2.  创建一般用户\n3.  等待安装完成\n4.  安装完成，重启\n5.  重启后，同意 License 即可\n\n## 对系统的若干修改\n\n### 若干原则\n\n为了搭建一个稳定的系统，尽量避免因为各种瞎折腾而导致的系统问题，特订立了一些软件安装的原则。\n具体参见《[CentOS7 下的软件安装方法与策略](/how-to-install-softwares-under-centos-7.html)》。\n\n### 给一般账号 root 权限\n\n默认情况下，一般账号是没有 root 权限的。为什么不直接用 root 账号，而是要给一般账号 root 权限呢？\n\n-   **日常工作中使用 root 账号，是非常糟糕且危险的习惯！无论是服务器还是个人电脑都是如此。**\n-   安装软件时需要 root 权限，只能 `su` 切换到 root 账户再安装。对于习惯使用 `sudo` 的人来说，还是有些麻烦。\n\n假设账户名为 seisman，要授予他 root 权限，则要修改配置文件 `/etc/sudoers` :\n\n    $ su\n    # echo 'seisman ALL=(ALL) ALL'>> /etc/sudoers # 向配置文件中加入语句\n    # tail -1 /etc/sudoers  # 检查一下是否正确\n    seisman ALL=(ALL) ALL\n\n其中 seisman 为当前用户名。\n\n### 添加第三方源\n\nCentOS 由于很追求稳定性，所以官方源中自带的软件不多，因而需要一些第三方源，比如\nEPEL、ATrpms、ELRepo、Nux Dextop、RepoForge 等。根据上面提到的软件安装原则，为了尽\n可能保证系统的稳定性，此处大型第三方源只添加 EPEL 源、Nux Dextop 和 ELRepo 源。\n\n#### EPEL\n\n[EPEL](https://fedoraproject.org/wiki/EPEL) 即 Extra Packages for Enterprise Linux，\n为 CentOS 提供了额外的 10000 多个软件包，而且在不替换系统组件方面下了很多功夫，因而可以放心使用。\n\n``` bash\nsudo yum install epel-release\n```\n\n执行完该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `epel.repo` 文件。\n\n<!-- #### Nux Dextop\n\n[Nux Dextop](http://li.nux.ro/repos.html) 中包含了一些与多媒体相关的软件包，作者尽量\n保证不覆盖 base 源。官方说明中说该源与 EPEL 兼容，实际上个别软件包存在冲突，但基本不会造成影响:\n\n    sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `nux-dextop.repo` 文件。-->\n\n#### ELRepo\n\nELRepo 包含了一些硬件相关的驱动程序，比如显卡、声卡驱动:\n\n    sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n    sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `elrepo.repo` 文件。\n\n### 安装 yum-axelget\n\n[yum-axelget](https://dl.fedoraproject.org/pub/epel/7/x86_64/repoview/yum-axelget.html) 是 EPEL\n提供的一个 yum 插件。使用该插件后用 yum 安装软件时可以并行下载，大大提高了软件的下载速度，减少了下载的等待时间:\n\n    sudo yum install yum-axelget\n\n安装该插件的同时会安装另一个软件 axel。axel 是一个并行下载工具，在下载 http、ftp 等简单协议的文件时非常好用。\n\n### 第一次全面更新\n\n在进一步操作之前，先把已经安装的软件包都升级到最新版:\n\n    sudo yum update\n\n要更新的软件包有些多，可能需要一段时间。不过有了 yum-axelget 插件，速度已经快了很多啦。\n\n### 重启\n\n第一次全面更新完之后建议重启。\n\n### 删除多余的 kernel\n\n在前面的 `yum update` 执行之后，可能会将 kernel 也一起更新，则在启动 CentOS 时启动项中会有很多项。\n\n确认当前使用的 kernel 版本号:\n\n    $ uname -r\n    3.10.0-123.9.3.el7.x86_64\n\n查找当前系统安装的所有 kernel:\n\n    $ rpm -qa | grep kernel | sort\n    kernel-3.10.0-123.8.1.el7.x86_64\n    kernel-3.10.0-123.9.2.el7.x86_64\n    kernel-3.10.0-123.9.3.el7.x86_64\n    kernel-devel-3.10.0-123.8.1.el7.x86_64\n    kernel-devel-3.10.0-123.9.2.el7.x86_64\n    kernel-devel-3.10.0-123.9.3.el7.x86_64\n    kernel-headers-3.10.0-123.9.3.el7.x86_64\n    kernel-tools-3.10.0-123.9.3.el7.x86_64\n    kernel-tools-libs-3.10.0-123.9.3.el7.x86_64\n\n可以看出有三个版本的 kernel，123.8.1、123.9.2 和 123.9.3。除了最新的 kernel 外，建议多保留一个旧 kernel，以免新 kernel 出现问题时可以通过旧 kernel 进入系统。因而此处删除 123.8.1 版本的 kernel:\n\n    sudo yum remove kernel-3.10.0-123.8.1.el7.x86_64\n    sudo yum remove kernel-devel-3.10.0-123.8.1.el7.x86_64\n\n## 基础开发环境\n\n### GCC 系列\n\n    sudo yum install gcc                     # C 编译器\n    sudo yum install gcc-c++                 # C++ 编译器\n    sudo yum install gcc-gfortran            # Fortran 编译器\n    sudo yum install compat-gcc-44           # 兼容 gcc 4.4\n    sudo yum install compat-gcc-44-c++       # 兼容 gcc-c++ 4.4\n    sudo yum install compat-gcc-44-gfortran  # 兼容 gcc-fortran 4.4\n    sudo yum install compat-libf2c-34        # g77 3.4.x 兼容库\n\n### 软件开发辅助工具\n\n    sudo yum install make\n    sudo yum install gdb     # 代码调试器\n    sudo yum install cmake   # Cmake\n    sudo yum install git     # 版本控制\n\n## 驱动程序\n\n### 显卡驱动\n\nLinux 默认只使用开源的显卡驱动，就目前的情况来看，开源驱动的效果还是不错的，但跟官方的\n闭源驱动相比还是有一定差距。最明显的区别是，在使用 SAC 的 ppk 功能放大波形时，使用开源驱动会\n出现延迟，而使用官方闭源则整个过程非常顺畅。\n\n关于显卡驱动的安装，请参考 [Linux 下安装 nvidia 显卡驱动](/install-nvidia-drivers-under-linux.html)\n一文中的 “从 ELRepo 源中安装驱动” 部分。\n\n**注意**：目前的显卡驱动似乎有问题，安装后终端有时会出现屏幕闪烁、一屏文字上下重复跳动的情况，\n稍微有些影响用 vim 写代码。是否要安装显卡驱动自己决定。\n\n### NTFS 驱动\n\nCentOS 下默认无法挂载 NTFS 格式的硬盘。需安装 nfts-3g 即可实现即插即用:\n\n    sudo yum install ntfs-3g\n\n## 进阶开发环境\n\n### Java 环境\n\nJava 的一大特色在于跨平台，安装了 Java 运行环境，即可运行 Java 程序:\n\n    sudo yum install java                        # java 运行环境\n\n### Clang 系列\n\nClang 可以认为是 GCC 的替代品，可以用于编译 C、C++、Objective-C 和 Objective-C++。其提供了更友好的\n报错信息，在有些方面比 GCC 更友好，同时其提供了一个代码静态分析器，可以用于分析代码中可能出现的 bug 和内存溢出问题。\n\n    sudo yum install clang             # clang 编译器\n    sudo yum install clang-analyzer    # clang 静态分析器\n\n### Intel 系列\n\nIntel 的大部分软件都是非开源且收费的，但同时部分软件也提供了 Linux 下的非商业免费版。\n比如 icc、mkl 数学库以及代码性能分析工具等。\n\nIntel 软件的申请以及安装参考《[Intel 非商业免费开发工具](/intel-non-commercial-software.html)》。\n\n还有一点需要注意的是，Intel 也提供了并行相关的几个命令，比如 mpicc、mpirun。所以 openmpi、mpich\n和 intel 三者，在并行时只能用其中一个。\n\n### 并行计算\n\n并行可以用 openmpi，也可以用 mpich，二者的功能可以认为是完全相同的。由于二者提供了几乎一样的命令，\n所以二者可以同时安装，但是不可以同时处于使用状态。\n\n#### openmpi\n\n安装 openmpi:\n\n    sudo yum install openmpi openmpi-devel\n\n安装后，二进制文件位于 `/usr/lib64/openmpi/bin` 下，动态库文件位于 `/usr/lib64/openmpi/lib`\n下，因而实际使用的话还需要额外的配置，在 `.bashrc` 中加入如下语句:\n\n    export PATH=/usr/lib64/openmpi/bin/:${PATH}\n    module load mpi/openmpi-x86_64\n\nPS：要使用 `module` 命令需要先安装 `environment-modules` 包。\n\n#### mpich\n\n安装 mpich:\n\n    sudo yum install mpich mpich-devel\n\n安装后，二进制文件位于 `/usr/lib64/mpich/bin` 下，动态库文件位于 `/usr/lib64/mpich/lib` 下，\n因而实际使用的话还需要额外的配置，在 `.bashrc` 中加入如下语句:\n\n    export PATH=/usr/lib64/mpich/bin/:${PATH}\n    module load mpi/mpich-x86_64\n\n## 脚本语言环境\n\n### Perl\n\nCentOS 7.0 自带了 Perl 5.16.3（2013 年 03 月 11 日发布），目前的最新版本为 5.20.1（2014 年 09 月 14 日发布）。\n\n#### 系统自带 Perl\n\n系统自带 Perl，就目前来看，版本不算老，基本够用。官方源和 EPEL 源中提供了 1000 多个模块，可以直接用 yum 安装:\n\n    sudo yum install perl-Parallel-ForkManager  # 并行模块\n\n若源中没有已打包好的模块，也可以使用 perl 自带的 cpan 来安装模块。\n\n优先级：yum > cpan。\n\n#### plenv 管理新版本\n\n若需要使用最新版本的 perl，可以使用 [plenv](/perl-plenv.html) 安装新版本的 perl，并使用 plenv 提供的 cpanm 命令安装模块:\n\n    cpanm install Parallel::ForkManager # 并行模块\n\n### Python\n\nCentOS 7.0 自带 Python 2.7.5，目前 Python 2 的最新版本为 2.7.8，Python 3 的最新版本为 3.4.2。\n\n#### 系统自带 Python\n\n系统自带的 Python 2.7.5，基本已经够用，Python 2 常用的模块在官方源或 EPEL 源中也有有编译好的包，\n因而直接通过 yum 安装即可:\n\n    sudo yum install python-matplotlib  # 2D 绘图库\n    sudo yum install PyQt4  # Qt4 的 Python 绑定\n    sudo yum install numpy  # 数组操作库\n    sudo yum install scipy  # 科学计算库\n    sudo yum install python-requests  # 网页请求\n    sudo yum install python-docopt  # 命令行参数分析器\n    sudo yum install gdal-python    # gdal 的 Python 绑定\n\n#### pyenv 管理 Python3\n\nPython2 与 Python3 之间是不完全兼容的，而我以 Python3 为主，所以需要安装一个 Python3。\n\n首先，安装 [pyenv](/python-pyenv.html) 来管理多个 Python 版本，然后利用 pyenv 安装 anaconda3\n（即 Python3.4）。anaconda 自带了众多科学计算所需的包，免去了安装的麻烦，对于其他包，\n则可以利用 Python 自带的 pip 安装:\n\n    pip install requests\n    pip install docopt\n\n## 编程相关软件\n\n### 编辑器\n\n写代码的时候选一个好用的编辑器很重要，用的比较多的编辑器如下：\n\n1.  vim\n2.  emacs\n3.  atom\n4.  sublime text 3\n5.  Visual Studio Code\n\n### IDE\n\n-   Python IDE：[PyCharm Community Edition](https://www.jetbrains.com/pycharm/)\n\n## 日常软件\n\n### Office 套件\n\n#### LibreOffice\n\n大多数 Linux 发行版都自带 LibreOffice:\n\n    sudo yum install libreoffice\n\nLibreOffice 与 Microsoft Office 的兼容性不太好，操作界面与 MS Office 也有较大差异，让人不太习惯。\n\n#### WPS Office\n\n若在 Linux 下对于文档处理有更高一些的要求，可以尝试目前还处于测试版的 WPS Office for Linux。\nWPS Office 的兼容性以及界面都比 LibreOffice 要好很多，值得期待，当然还是不能做到完全兼容 MS\nOffice。\n\n安装过程参考 [CentOS 下安装 WPS Office](/wps-office-for-centos7.html) 一文。\n\n### PS/PDF 阅读器\n\n系统自带的 evince 阅读器，可以打开 PS 和 PDF 文件，基本足够日常的使用了。\n\n#### zathura\n\nzathura 可以查看 PS、PDF、djvu 格式的文件，可以作为 evince 的替代品:\n\n    sudo yum install zathura zathura-plugins-all\n\n#### ghostscript\n\n    sudo yum install ghostscript\n\n#### master-pdf-editor\n\n官方网站: <https://code-industry.net/free-pdf-editor/>\n\n    sudo yum localinstall http://get.code-industry.net/public/master-pdf-editor3-3.2.62-1.x86_64.rpm\n\n### TeX Live 2015\n\n系统是自带了 TeXLive，版本较老，还是安装最新版比较好。\n\n参考 [Linux 下安装 TeXLive](/install-texlive-under-linux.html) 一文。\n\n### Mendeley\n\nMendeley 是一个跨平台的文献管理软件，其内部自带了一个可以添加注释的 PDF 阅读器。\n\n下载 Generic Linux (64 bits)：http://www.mendeley.com/download-mendeley-desktop\n\n安装:\n\n    tar -xvf mendeleydesktop-1.12.3-linux-x86_64.tar.bz2  # 解压\n    sudo mv mendeleydesktop /opt  # 复制到 / opt 下\n    cd /opt/mendeleydesktop/bin   # cd 进去\n    ./install-mendeley-link-handler.sh /opt/mendeleydesktop/bin/mendeleydesktop\n    sudo yum install qtwebkit  # 安装依赖包\n\n注销重新登陆，在 Application->Education 下即可看到 mendeley 的相关项目。不过是\n没有软件的图标的，强迫症不能忍，用下面的命令解决:\n\n    cp /opt/mendeleydesktop/share/icons/hicolor/128x128/apps/mendeleydesktop.png ~/.local/share/icons/\n\n### Google Chrome 浏览器\n\n默认的浏览器是 Firefox，还是更喜欢 Chrome 浏览器。\n\nGoogle 官方源在国内可能无法正常访问，故而添加 Fedora 中文社区提供的镜像源:\n\n    sudo wget http://repo.fdzh.org/chrome/google-chrome-mirrors.repo -P /etc/yum.repos.d/\n\n安装:\n\n    sudo yum install google-chrome-stable\n\n### Opera 浏览器\n\n也可以选择 Opera 浏览器。\n\n下载地址：http://www.opera.com/download/guide/?os=linux\n\n选择 CentOS RPM package 进行下载。下载完成后，执行:\n\n    sudo yum localinstall opera-12.16-1860.x86_64.rpm\n\n想要卸载的话，就执行:\n\n    sudo yum remove opera\n\n### Flash 插件\n\nFlash 插件主要是看在线视频的时候要用。Google 浏览器自带了 Flash 插件，所以这里安装的 flash 插件主要是为了 firefox。\n\n    sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm\n    sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\n    sudo yum install flash-plugin\n\n### 解压软件\n\n解压 7z 或 zip 格式需要 p7zip，由 EPEL 提供:\n\n    sudo yum install p7zip\n\n解压 rar 格式可以使用 [unar](https://unarchiver.c3.cx/commandline)，该软件位于 EPEL 源中：\n\n    sudo yum install unar\n\n### FTP 客户端\n\nFTP 客户端，还是有界面的 filezilla 比较方便些。\n\n    sudo yum install filezilla\n\n### Google Earth\n\n到 https://www.google.com/earth/download/ge/agree.html 下载64位rpm包，执行如下命令安装:\n\n    sudo yum localinstall google-earth-stable_current_x86_64.rpm\n\n## 效率类软件\n\n这一类工具能够在不同方面提高科研的效率，也提高了使用者的体验。\n\n### 终端模拟器\n\nGnome 自带的终端模拟器是 gnome-terminal。经常会需要开十几个终端，切换和管理起来比较麻烦。\n\n#### terminator\n\nterminator 有很多功能，我只用到了终端分割的功能。 `Ctrl+Shift+O` 对终端水平分隔，\n`Ctrl+Shift+E` 对终端垂直分隔， `Alt + 上下左右 ` 可以在各子终端中切换。terminator 由 Nux Dextop 提供:\n\n    sudo yum install terminator\n\n#### guake\n\n有些时候需要临时执行一两个命令，但是又不想额外启动一个终端的情况下，guake 是个不错的选择。\n\n    sudo yum install guake\n\n安装完成后，在 Application->System Tools 里找到 guake Terminal 即可启动。按下 F12\n即可呼出 guake，再次按下 F12 即可隐藏。也可在终端执行 `guake-prefs` 对 gauke 进行配置。\n\n### zsh 与 oh my zsh\n\nLinux 下有很多 shell，比如最常见的 bash，除此之外还有 csh、ksh。zsh 也是一个 shell。\n\nzsh 的特点在于：\n\n-   语法基本完全兼容于 bash，一般用户完全体会不到其区别\n-   zsh 提供命令补全特性，比 bash 的补全要更好用\n-   可配置性强\n\n完全不经配置的 zsh 已经很好用了，一般用户也没必要花时间研究配置。\n[oh my zsh](https://github.com/robbyrussell/oh-my-zsh) 是一群人一起维护的一套 zsh 配置文件。\n直接用这个配置文件，稍稍了解一点会有更好的体验。\n\n安装 zsh:\n\n    sudo yum install zsh\n\n安装 oh my zsh:\n\n    curl -L http://install.ohmyz.sh | sh\n\n上面的命令，做了如下几件事情：\n\n-   下载 `oh my zsh` 到 `~/.oh-my-zsh`\n-   备份已有的 zsh 配置文件 `~/.zshrc` ，并复制新的 `.zshrc` 文件\n-   将当前用户的默认 shell 由 bash 改成 zsh\n\n第三步中，会报错如下： `chsh: \"/usr/bin/zsh\" is not listed in /etc/shells.` ，需要手动修改默认 shell:\n\n    chsh -s /bin/zsh\n\nchsh 命令修改的是 login shell，因而需要退出当前用户并重新登陆，以后用户的默认 shell\n就从 bash 变成了 zsh，所有的配置都不用写到 `.bashrc` 而要写到 `.zshrc` 中。\n\n在 `.zshrc` 中可以选择喜欢的主题，以及适当数量的插件。下面列出我在用的插件:\n\n1.  git\n\n    该插件为 git 的众多常用命令提供了更简单的别名，比如 `git status` 的别名是 `gst`，\n    大大减少了击键数。但该插件中 `git mergetool --no-prompt` 的别名是 `gmt`，\n    与 GMT 软件冲突，需要将该插件的目录 git 复制到 custom/plugins 下，然后删除其中的 gmt 别名；\n\n2.  命令补全插件: pip, pyenv\n3.  sudo：按两下 `ESC` 即可在当前命令前加上 `sudo`\n4.  yum：为常见的 yum 命令提供别名\n\n### autojump\n\n[autojump](https://github.com/joelthelion/autojump) 是一个非常智能的目录快速切换的工具。简单演示如下:\n\n    $ pwd\n    /home/seisman\n    $ cd Desktop\n    $ cd /opt\n    $ cd /usr/local\n\n    # 用 j 命令迅速从 / usr/local 跳转到与 des 匹配的目录，这里只有 Desktop 可以匹配\n    $ j des\n    $ pwd\n    /home/seisman/Desktop\n\n用法差不多就这样，具体看项目主页。\n\n安装:\n\n    sudo yum install autojump\n    sudo yum install autojump-zsh\n\n### 中文输入法\n\n由于使用的是全英文安装，所以默认是没有中文输入法的。\n\n在“Application”->“Settings”->“Region & Language” 中将“Chinese（Intelligent Pinyin）”添加到“Input Sources” 中即可使用中文输入法。默认使用“Shift”键切换中文输入法。\n\n### 等宽字体\n\n编程要用等宽字体，这点是常识了。一款适合编程的等宽字体，至少要满足如下几个要求：\n\n1.  易于区分 “1”、“i” 和“l”\n2.  易于区分 “0”、“o” 和“O”\n3.  易于区分中文下的左引号和右引号\n4.  美观\n\n目前选择的 Source Code Pro。将解压后的字体文件放在 `~/.fonts` 目录下，并修改终端、gedit 以及其他编辑器、IDE 等的默认字体。\n\n## 虚拟机\n\n有时候可能需要在 Windows 下做一些操作，如果机器性能足够好的话，可以安装虚拟机。\n\n### VirtualBox 虚拟机\n\nVirtuabBox 的安装:\n\n    wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo\n    sudo mv virtualbox.repo /etc/yum.repos.d/\n    sudo yum install VirtualBox-5.0\n\n需要注意两点：\n\n-   若机器性能不够，虚拟机的使用体验会非常差，所以不建议在老机器上使用；\n-   更新 kernel 之后需要执行 `sudo /sbin/rcvboxdrv setup` ；\n-   在 VirtualBox 安装虚拟系统后，记得使用 “设备”->“安装增强功能”，使用效果会更好；\n\n### gnome-boxes\n\ngnome-boxes 是 GNOME3 开发的一个虚拟机工具，使用体验不如 VirtualBox:\n\n    sudo yum install gnome-boxes\n\n### Wine\n\nWine 是一个可以让 Windows 程序运行在 Linux 下的软件。类似虚拟机，但跟虚拟机又不太一样:\n\n    sudo yum install wine\n\n## 同步网盘\n\n网盘根据功能大概可以分为两类：同步网盘和备份网盘。既然是同步网盘，Linux 下\n的客户端必不可少。就目前已知的情况来看，CentOS7 下能使用的同步网盘只有三个：\nDropbox、MEGA 和坚果云。\n\n我主要用同步网盘将 Linux 机器上的 PDF 文献同步到 iPad 上。\n\n### Dropbox\n\n又是一个被墙的工具，熟练掌握科学上网技巧的人可以使用，一般人还是不要用了。\n\n    wget https://www.dropbox.com/download?dl=packages/fedora/nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n    sudo rpm -i nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n\n### MEGA\n\nMEGA： <https://mega.co.nz/>\n\n免费容量 50G，作为同步盘来说基本是够用了。\n\n    # 下载主程序\n    wget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/megasync-CentOS_7.x86_64.rpm\n    # 下载文件管理器扩展（可选）\n    wget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/nautilus-megasync-CentOS_7.x86_64.rpm\n    sudo yum localinstall megasync-CentOS_7.x86_64.rpm\n    sudo yum localinstall nautilus-megasync-CentOS_7.x86_64.rpm\n\n### 坚果云\n\n国内的全平台同步网盘，不限空间，但限制每月上传流量 1G，下载流量 3G。\n\n    # 坚果云依赖于 notify-python\n    sudo yum install notify-python\n    # 下载\n    wget https://jianguoyun.com/static/exe/installer/fedora/nautilus_nutstore_amd64.rpm\n    sudo rpm -i nautilus_nutstore_amd64.rpm\n\n## 工具软件\n\n### 视频下载工具\n\n[you-get](https://github.com/soimort/you-get) 和 [youtube-dl](https://github.com/rg3/youtube-dl)\n是两个用于从视频网站上下载视频文件的工具。其中，后者支持的网站更多，但前者对国内的视频网站支持更好。\n\n    pip install you-get\n    pip install youtube-dl\n    # EPEL 中提供了 youtube-dl 包，因而也可以使用 yum 安装。一般来说，pip 安装的版本更新一些\n\n### PDF 处理工具\n\n[cpdf](http://community.coherentpdf.com/) 是一个跨平台的 PDF 处理工具，可以完成常见的 PDF 合并、\n切割、加密解密、书签、水印等功能。\n\n下载已编译好的 [二进制包](https://github.com/coherentgraphics/cpdf-binaries/archive/master.zip)，\n解压，并将与自己的平台对应的二进制文件复制到 `${HOME}/bin` 目录下即可使用。\n\n### BT 软件\n\ntransmission 是 Linux 下常用的 Torrent 下载软件:\n\n    sudo yum install transmission\n\n在 “Application”->“Internet”-> 中可以启动 transmission。\n\n### uGet\n\n<http://ugetdm.com/>\n\nuGet 是 Linux 下的一个下载工具，支持 HTTP、HTTPS、FTP、Torrent 等，支持多连接，并可以监视剪贴板:\n\n    sudo yum --enablerepo=epel-testing install uget aria2\n\n### 截图软件 shutter\n\nGNOME 自带了截图工具。 `PrtScn` 为截取整个屏幕； `Alt+PrtScn` 为截取当前窗口；\n`Shift+PrtScn` 为自定义截屏区域。\n\n[shutter](http://shutter-project.org/) 是一个功能更强大的截图工具，支持不同的截图方式、\n图片格式，还支持图片的简单编辑与注释:\n\n    sudo yum install shutter\n\n可以通过 [修改快捷键使 shutter 成为默认的截图工具](http://shutter-project.org/faq-help/set-shutter-as-the-default-screenshot-tool/)。\n\n### 其他工具\n\n    sudo yum install nfs-utils     # 挂载 NFS 文件系统所必须\n    sudo yum install xclip         # 终端的文本复制工具\n    sudo yum install ImageMagick   # 其中的 import 和 convert 命令很有用\n    sudo yum install dos2unix unix2dos  # Windows 和 Linux 换行符互相转换\n    sudo yum install meld          # 图形界面下的文件差异比较工具\n\n## 娱乐\n\n### 影音播放器\n\nNux Dextop 提供了 mplayer 和 VLC，可以用于播放常见格式的音频和视频，二者选其一安装即可:\n\n    sudo yum install mplayer\n    sudo yum install vlc\n\n### 游戏\n\n    sudo yum install 2048-cli   # 2048 命令行版\n\n## 参考\n\n1.  [ELRepo 官方网站](http://elrepo.org/tiki/tiki-index.php)\n2.  [ELRepo kmod-nvidia](http://elrepo.org/tiki/kmod-nvidia)\n3.  [CentOS Yum 软件库样例](http://wiki.centos.org/zh/AdditionalResources/Repositories/GoogleYumRepos)\n\n## 修订历史\n\n-   2017-04-15：初稿；","source":"_posts/centos-s.md","raw":"---\ntitle: 用 CentOS 7 打造合适的科研环境\nauthor: Messiah\ndate: 2017-04-15\nupdated: 2017-04-19\ncategories: Linux\ncomments: true\ntags: [CentOS, Perl, Python]\n---\n\n这篇博文记录了我用 CentOS 7 搭建 **数据科学生产环境** 的过程，供我个人在未来重装系统时参考。对于其他同学，也许有借鉴意义。\n\n阅读须知：\n\n1.  **不推荐刚接触 Linux 的人使用 CentOS 发行版**；\n2.  本文尽量写的浅显易懂，但要求读者掌握 Linux 基础知识；\n3.  本文所有操作均在 CentOS 7 下完成，其他发行版或多或少与 CentOS 7 不同，因而仅供参考；\n4.  本文所安装的软件纯粹出于个人习惯及喜好，读者应自己判断，按需安装；\n\n<!--more-->\n\n## 安装 CentOS\n\nCentOS 7 的安装与其他 Linux 发行版的安装差不多，个别地方稍有不同。\n\n### 准备工作\n\n1.  准备材料\n    -   U 盘：容量 2GB 以上，用于制作 U 盘启动盘，因为在制作启动盘时会格式化 U 盘，所以 U 盘内不要包含重要资料\n    -   [CentOS 7.2 LiveCD ISO 镜像文件](http://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-LiveGNOME-1511.iso)\n    -   [Universal USB installer](http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/)：Windows 下的 U 盘启动盘制作工具\n    -   一个已安装 Windows 的电脑：用于制作 U 盘启动盘\n\n2.  运行 Universal USB installer 并制作 U 盘启动盘\n3.  将 U 盘插入计算机，重启，进入 BIOS 选择从 U 盘启动，即可进入 CentOS 的 LiveCD\n4.  进入 LiveCD 后，点击桌面的 “Install to Hard Drive” 即可安装\n\n注：Linux 下可以通过 `dd` 命令制作启动盘，但由于对原理不够了解，偶尔会导致制作失败，\n或制作成功后 U 盘容量有问题，还是用 Windows 下的 Universal USB installer 比较靠谱。\n\n### 安装过程\n\n1.  选择安装过程中使用的语言，这里应 **使用英语，不要使用汉语**。若安装界面使用汉语，最终安装的系统中会出现两个比较麻烦的问题：\n    1.  家目录下的系统文件夹如 Downloads、Desktop 等会以中文表示，这使得在命令行 `cd` 变得很麻烦；\n    2.  终端中某些字符用英文字体，某些字符用中文字体，效果非常差，需要自己修改终端字体方可；\n\n2.  选择区域和城市：Asia 和 Shanghai\n3.  键盘使用 English(US) 而不是 English(UK)\n4.  Hostname 可以改也可以不改，我用 `saturn.geolab`\n5.  安装的目的地，选择要使用的硬盘，在 “Other Storage Options” 处选择“I will configure partioning”，即手动分区\n\n### 分区\n\nCentOS7 的分区似乎比较特别，自认为经验很丰富的我在第一次安装 CentOS7 时还是在分区上耽误了很多时间。后来找到比较合适的分区方法，如下：\n\n-   点击 “Click here to create them automatically”，即让安装程序帮忙分区\n-   默认的分区方案是使用 LVM，其好处在于 “当机器有多块硬盘时，在使用的时候看上去只有一块”\n-   默认的文件系统为 XFS 而不是以前常用的 EXT4；\n-   自动分区完成后，再根据自己的需求，手动修改分区细节\n    -   `/boot` ：CentOS 自动分配，一定不要乱改；\n    -   `/` ：根目录，合理使用并及时清理的话 15G 就够了，不过建议 30G 以上；\n    -   `swap` ：与物理内存大小一致即可\n    -   `/opt` ：个人习惯是将第三方软件都安装在 `/opt` 下，所以分了 70G\n    -   `/home` ：余下的全部空间\n-   点击 “Begin to Install” 开始安装\n\n### 真正的安装\n\n1.  设置 root 密码\n2.  创建一般用户\n3.  等待安装完成\n4.  安装完成，重启\n5.  重启后，同意 License 即可\n\n## 对系统的若干修改\n\n### 若干原则\n\n为了搭建一个稳定的系统，尽量避免因为各种瞎折腾而导致的系统问题，特订立了一些软件安装的原则。\n具体参见《[CentOS7 下的软件安装方法与策略](/how-to-install-softwares-under-centos-7.html)》。\n\n### 给一般账号 root 权限\n\n默认情况下，一般账号是没有 root 权限的。为什么不直接用 root 账号，而是要给一般账号 root 权限呢？\n\n-   **日常工作中使用 root 账号，是非常糟糕且危险的习惯！无论是服务器还是个人电脑都是如此。**\n-   安装软件时需要 root 权限，只能 `su` 切换到 root 账户再安装。对于习惯使用 `sudo` 的人来说，还是有些麻烦。\n\n假设账户名为 seisman，要授予他 root 权限，则要修改配置文件 `/etc/sudoers` :\n\n    $ su\n    # echo 'seisman ALL=(ALL) ALL'>> /etc/sudoers # 向配置文件中加入语句\n    # tail -1 /etc/sudoers  # 检查一下是否正确\n    seisman ALL=(ALL) ALL\n\n其中 seisman 为当前用户名。\n\n### 添加第三方源\n\nCentOS 由于很追求稳定性，所以官方源中自带的软件不多，因而需要一些第三方源，比如\nEPEL、ATrpms、ELRepo、Nux Dextop、RepoForge 等。根据上面提到的软件安装原则，为了尽\n可能保证系统的稳定性，此处大型第三方源只添加 EPEL 源、Nux Dextop 和 ELRepo 源。\n\n#### EPEL\n\n[EPEL](https://fedoraproject.org/wiki/EPEL) 即 Extra Packages for Enterprise Linux，\n为 CentOS 提供了额外的 10000 多个软件包，而且在不替换系统组件方面下了很多功夫，因而可以放心使用。\n\n``` bash\nsudo yum install epel-release\n```\n\n执行完该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `epel.repo` 文件。\n\n<!-- #### Nux Dextop\n\n[Nux Dextop](http://li.nux.ro/repos.html) 中包含了一些与多媒体相关的软件包，作者尽量\n保证不覆盖 base 源。官方说明中说该源与 EPEL 兼容，实际上个别软件包存在冲突，但基本不会造成影响:\n\n    sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `nux-dextop.repo` 文件。-->\n\n#### ELRepo\n\nELRepo 包含了一些硬件相关的驱动程序，比如显卡、声卡驱动:\n\n    sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n    sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `elrepo.repo` 文件。\n\n### 安装 yum-axelget\n\n[yum-axelget](https://dl.fedoraproject.org/pub/epel/7/x86_64/repoview/yum-axelget.html) 是 EPEL\n提供的一个 yum 插件。使用该插件后用 yum 安装软件时可以并行下载，大大提高了软件的下载速度，减少了下载的等待时间:\n\n    sudo yum install yum-axelget\n\n安装该插件的同时会安装另一个软件 axel。axel 是一个并行下载工具，在下载 http、ftp 等简单协议的文件时非常好用。\n\n### 第一次全面更新\n\n在进一步操作之前，先把已经安装的软件包都升级到最新版:\n\n    sudo yum update\n\n要更新的软件包有些多，可能需要一段时间。不过有了 yum-axelget 插件，速度已经快了很多啦。\n\n### 重启\n\n第一次全面更新完之后建议重启。\n\n### 删除多余的 kernel\n\n在前面的 `yum update` 执行之后，可能会将 kernel 也一起更新，则在启动 CentOS 时启动项中会有很多项。\n\n确认当前使用的 kernel 版本号:\n\n    $ uname -r\n    3.10.0-123.9.3.el7.x86_64\n\n查找当前系统安装的所有 kernel:\n\n    $ rpm -qa | grep kernel | sort\n    kernel-3.10.0-123.8.1.el7.x86_64\n    kernel-3.10.0-123.9.2.el7.x86_64\n    kernel-3.10.0-123.9.3.el7.x86_64\n    kernel-devel-3.10.0-123.8.1.el7.x86_64\n    kernel-devel-3.10.0-123.9.2.el7.x86_64\n    kernel-devel-3.10.0-123.9.3.el7.x86_64\n    kernel-headers-3.10.0-123.9.3.el7.x86_64\n    kernel-tools-3.10.0-123.9.3.el7.x86_64\n    kernel-tools-libs-3.10.0-123.9.3.el7.x86_64\n\n可以看出有三个版本的 kernel，123.8.1、123.9.2 和 123.9.3。除了最新的 kernel 外，建议多保留一个旧 kernel，以免新 kernel 出现问题时可以通过旧 kernel 进入系统。因而此处删除 123.8.1 版本的 kernel:\n\n    sudo yum remove kernel-3.10.0-123.8.1.el7.x86_64\n    sudo yum remove kernel-devel-3.10.0-123.8.1.el7.x86_64\n\n## 基础开发环境\n\n### GCC 系列\n\n    sudo yum install gcc                     # C 编译器\n    sudo yum install gcc-c++                 # C++ 编译器\n    sudo yum install gcc-gfortran            # Fortran 编译器\n    sudo yum install compat-gcc-44           # 兼容 gcc 4.4\n    sudo yum install compat-gcc-44-c++       # 兼容 gcc-c++ 4.4\n    sudo yum install compat-gcc-44-gfortran  # 兼容 gcc-fortran 4.4\n    sudo yum install compat-libf2c-34        # g77 3.4.x 兼容库\n\n### 软件开发辅助工具\n\n    sudo yum install make\n    sudo yum install gdb     # 代码调试器\n    sudo yum install cmake   # Cmake\n    sudo yum install git     # 版本控制\n\n## 驱动程序\n\n### 显卡驱动\n\nLinux 默认只使用开源的显卡驱动，就目前的情况来看，开源驱动的效果还是不错的，但跟官方的\n闭源驱动相比还是有一定差距。最明显的区别是，在使用 SAC 的 ppk 功能放大波形时，使用开源驱动会\n出现延迟，而使用官方闭源则整个过程非常顺畅。\n\n关于显卡驱动的安装，请参考 [Linux 下安装 nvidia 显卡驱动](/install-nvidia-drivers-under-linux.html)\n一文中的 “从 ELRepo 源中安装驱动” 部分。\n\n**注意**：目前的显卡驱动似乎有问题，安装后终端有时会出现屏幕闪烁、一屏文字上下重复跳动的情况，\n稍微有些影响用 vim 写代码。是否要安装显卡驱动自己决定。\n\n### NTFS 驱动\n\nCentOS 下默认无法挂载 NTFS 格式的硬盘。需安装 nfts-3g 即可实现即插即用:\n\n    sudo yum install ntfs-3g\n\n## 进阶开发环境\n\n### Java 环境\n\nJava 的一大特色在于跨平台，安装了 Java 运行环境，即可运行 Java 程序:\n\n    sudo yum install java                        # java 运行环境\n\n### Clang 系列\n\nClang 可以认为是 GCC 的替代品，可以用于编译 C、C++、Objective-C 和 Objective-C++。其提供了更友好的\n报错信息，在有些方面比 GCC 更友好，同时其提供了一个代码静态分析器，可以用于分析代码中可能出现的 bug 和内存溢出问题。\n\n    sudo yum install clang             # clang 编译器\n    sudo yum install clang-analyzer    # clang 静态分析器\n\n### Intel 系列\n\nIntel 的大部分软件都是非开源且收费的，但同时部分软件也提供了 Linux 下的非商业免费版。\n比如 icc、mkl 数学库以及代码性能分析工具等。\n\nIntel 软件的申请以及安装参考《[Intel 非商业免费开发工具](/intel-non-commercial-software.html)》。\n\n还有一点需要注意的是，Intel 也提供了并行相关的几个命令，比如 mpicc、mpirun。所以 openmpi、mpich\n和 intel 三者，在并行时只能用其中一个。\n\n### 并行计算\n\n并行可以用 openmpi，也可以用 mpich，二者的功能可以认为是完全相同的。由于二者提供了几乎一样的命令，\n所以二者可以同时安装，但是不可以同时处于使用状态。\n\n#### openmpi\n\n安装 openmpi:\n\n    sudo yum install openmpi openmpi-devel\n\n安装后，二进制文件位于 `/usr/lib64/openmpi/bin` 下，动态库文件位于 `/usr/lib64/openmpi/lib`\n下，因而实际使用的话还需要额外的配置，在 `.bashrc` 中加入如下语句:\n\n    export PATH=/usr/lib64/openmpi/bin/:${PATH}\n    module load mpi/openmpi-x86_64\n\nPS：要使用 `module` 命令需要先安装 `environment-modules` 包。\n\n#### mpich\n\n安装 mpich:\n\n    sudo yum install mpich mpich-devel\n\n安装后，二进制文件位于 `/usr/lib64/mpich/bin` 下，动态库文件位于 `/usr/lib64/mpich/lib` 下，\n因而实际使用的话还需要额外的配置，在 `.bashrc` 中加入如下语句:\n\n    export PATH=/usr/lib64/mpich/bin/:${PATH}\n    module load mpi/mpich-x86_64\n\n## 脚本语言环境\n\n### Perl\n\nCentOS 7.0 自带了 Perl 5.16.3（2013 年 03 月 11 日发布），目前的最新版本为 5.20.1（2014 年 09 月 14 日发布）。\n\n#### 系统自带 Perl\n\n系统自带 Perl，就目前来看，版本不算老，基本够用。官方源和 EPEL 源中提供了 1000 多个模块，可以直接用 yum 安装:\n\n    sudo yum install perl-Parallel-ForkManager  # 并行模块\n\n若源中没有已打包好的模块，也可以使用 perl 自带的 cpan 来安装模块。\n\n优先级：yum > cpan。\n\n#### plenv 管理新版本\n\n若需要使用最新版本的 perl，可以使用 [plenv](/perl-plenv.html) 安装新版本的 perl，并使用 plenv 提供的 cpanm 命令安装模块:\n\n    cpanm install Parallel::ForkManager # 并行模块\n\n### Python\n\nCentOS 7.0 自带 Python 2.7.5，目前 Python 2 的最新版本为 2.7.8，Python 3 的最新版本为 3.4.2。\n\n#### 系统自带 Python\n\n系统自带的 Python 2.7.5，基本已经够用，Python 2 常用的模块在官方源或 EPEL 源中也有有编译好的包，\n因而直接通过 yum 安装即可:\n\n    sudo yum install python-matplotlib  # 2D 绘图库\n    sudo yum install PyQt4  # Qt4 的 Python 绑定\n    sudo yum install numpy  # 数组操作库\n    sudo yum install scipy  # 科学计算库\n    sudo yum install python-requests  # 网页请求\n    sudo yum install python-docopt  # 命令行参数分析器\n    sudo yum install gdal-python    # gdal 的 Python 绑定\n\n#### pyenv 管理 Python3\n\nPython2 与 Python3 之间是不完全兼容的，而我以 Python3 为主，所以需要安装一个 Python3。\n\n首先，安装 [pyenv](/python-pyenv.html) 来管理多个 Python 版本，然后利用 pyenv 安装 anaconda3\n（即 Python3.4）。anaconda 自带了众多科学计算所需的包，免去了安装的麻烦，对于其他包，\n则可以利用 Python 自带的 pip 安装:\n\n    pip install requests\n    pip install docopt\n\n## 编程相关软件\n\n### 编辑器\n\n写代码的时候选一个好用的编辑器很重要，用的比较多的编辑器如下：\n\n1.  vim\n2.  emacs\n3.  atom\n4.  sublime text 3\n5.  Visual Studio Code\n\n### IDE\n\n-   Python IDE：[PyCharm Community Edition](https://www.jetbrains.com/pycharm/)\n\n## 日常软件\n\n### Office 套件\n\n#### LibreOffice\n\n大多数 Linux 发行版都自带 LibreOffice:\n\n    sudo yum install libreoffice\n\nLibreOffice 与 Microsoft Office 的兼容性不太好，操作界面与 MS Office 也有较大差异，让人不太习惯。\n\n#### WPS Office\n\n若在 Linux 下对于文档处理有更高一些的要求，可以尝试目前还处于测试版的 WPS Office for Linux。\nWPS Office 的兼容性以及界面都比 LibreOffice 要好很多，值得期待，当然还是不能做到完全兼容 MS\nOffice。\n\n安装过程参考 [CentOS 下安装 WPS Office](/wps-office-for-centos7.html) 一文。\n\n### PS/PDF 阅读器\n\n系统自带的 evince 阅读器，可以打开 PS 和 PDF 文件，基本足够日常的使用了。\n\n#### zathura\n\nzathura 可以查看 PS、PDF、djvu 格式的文件，可以作为 evince 的替代品:\n\n    sudo yum install zathura zathura-plugins-all\n\n#### ghostscript\n\n    sudo yum install ghostscript\n\n#### master-pdf-editor\n\n官方网站: <https://code-industry.net/free-pdf-editor/>\n\n    sudo yum localinstall http://get.code-industry.net/public/master-pdf-editor3-3.2.62-1.x86_64.rpm\n\n### TeX Live 2015\n\n系统是自带了 TeXLive，版本较老，还是安装最新版比较好。\n\n参考 [Linux 下安装 TeXLive](/install-texlive-under-linux.html) 一文。\n\n### Mendeley\n\nMendeley 是一个跨平台的文献管理软件，其内部自带了一个可以添加注释的 PDF 阅读器。\n\n下载 Generic Linux (64 bits)：http://www.mendeley.com/download-mendeley-desktop\n\n安装:\n\n    tar -xvf mendeleydesktop-1.12.3-linux-x86_64.tar.bz2  # 解压\n    sudo mv mendeleydesktop /opt  # 复制到 / opt 下\n    cd /opt/mendeleydesktop/bin   # cd 进去\n    ./install-mendeley-link-handler.sh /opt/mendeleydesktop/bin/mendeleydesktop\n    sudo yum install qtwebkit  # 安装依赖包\n\n注销重新登陆，在 Application->Education 下即可看到 mendeley 的相关项目。不过是\n没有软件的图标的，强迫症不能忍，用下面的命令解决:\n\n    cp /opt/mendeleydesktop/share/icons/hicolor/128x128/apps/mendeleydesktop.png ~/.local/share/icons/\n\n### Google Chrome 浏览器\n\n默认的浏览器是 Firefox，还是更喜欢 Chrome 浏览器。\n\nGoogle 官方源在国内可能无法正常访问，故而添加 Fedora 中文社区提供的镜像源:\n\n    sudo wget http://repo.fdzh.org/chrome/google-chrome-mirrors.repo -P /etc/yum.repos.d/\n\n安装:\n\n    sudo yum install google-chrome-stable\n\n### Opera 浏览器\n\n也可以选择 Opera 浏览器。\n\n下载地址：http://www.opera.com/download/guide/?os=linux\n\n选择 CentOS RPM package 进行下载。下载完成后，执行:\n\n    sudo yum localinstall opera-12.16-1860.x86_64.rpm\n\n想要卸载的话，就执行:\n\n    sudo yum remove opera\n\n### Flash 插件\n\nFlash 插件主要是看在线视频的时候要用。Google 浏览器自带了 Flash 插件，所以这里安装的 flash 插件主要是为了 firefox。\n\n    sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm\n    sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\n    sudo yum install flash-plugin\n\n### 解压软件\n\n解压 7z 或 zip 格式需要 p7zip，由 EPEL 提供:\n\n    sudo yum install p7zip\n\n解压 rar 格式可以使用 [unar](https://unarchiver.c3.cx/commandline)，该软件位于 EPEL 源中：\n\n    sudo yum install unar\n\n### FTP 客户端\n\nFTP 客户端，还是有界面的 filezilla 比较方便些。\n\n    sudo yum install filezilla\n\n### Google Earth\n\n到 https://www.google.com/earth/download/ge/agree.html 下载64位rpm包，执行如下命令安装:\n\n    sudo yum localinstall google-earth-stable_current_x86_64.rpm\n\n## 效率类软件\n\n这一类工具能够在不同方面提高科研的效率，也提高了使用者的体验。\n\n### 终端模拟器\n\nGnome 自带的终端模拟器是 gnome-terminal。经常会需要开十几个终端，切换和管理起来比较麻烦。\n\n#### terminator\n\nterminator 有很多功能，我只用到了终端分割的功能。 `Ctrl+Shift+O` 对终端水平分隔，\n`Ctrl+Shift+E` 对终端垂直分隔， `Alt + 上下左右 ` 可以在各子终端中切换。terminator 由 Nux Dextop 提供:\n\n    sudo yum install terminator\n\n#### guake\n\n有些时候需要临时执行一两个命令，但是又不想额外启动一个终端的情况下，guake 是个不错的选择。\n\n    sudo yum install guake\n\n安装完成后，在 Application->System Tools 里找到 guake Terminal 即可启动。按下 F12\n即可呼出 guake，再次按下 F12 即可隐藏。也可在终端执行 `guake-prefs` 对 gauke 进行配置。\n\n### zsh 与 oh my zsh\n\nLinux 下有很多 shell，比如最常见的 bash，除此之外还有 csh、ksh。zsh 也是一个 shell。\n\nzsh 的特点在于：\n\n-   语法基本完全兼容于 bash，一般用户完全体会不到其区别\n-   zsh 提供命令补全特性，比 bash 的补全要更好用\n-   可配置性强\n\n完全不经配置的 zsh 已经很好用了，一般用户也没必要花时间研究配置。\n[oh my zsh](https://github.com/robbyrussell/oh-my-zsh) 是一群人一起维护的一套 zsh 配置文件。\n直接用这个配置文件，稍稍了解一点会有更好的体验。\n\n安装 zsh:\n\n    sudo yum install zsh\n\n安装 oh my zsh:\n\n    curl -L http://install.ohmyz.sh | sh\n\n上面的命令，做了如下几件事情：\n\n-   下载 `oh my zsh` 到 `~/.oh-my-zsh`\n-   备份已有的 zsh 配置文件 `~/.zshrc` ，并复制新的 `.zshrc` 文件\n-   将当前用户的默认 shell 由 bash 改成 zsh\n\n第三步中，会报错如下： `chsh: \"/usr/bin/zsh\" is not listed in /etc/shells.` ，需要手动修改默认 shell:\n\n    chsh -s /bin/zsh\n\nchsh 命令修改的是 login shell，因而需要退出当前用户并重新登陆，以后用户的默认 shell\n就从 bash 变成了 zsh，所有的配置都不用写到 `.bashrc` 而要写到 `.zshrc` 中。\n\n在 `.zshrc` 中可以选择喜欢的主题，以及适当数量的插件。下面列出我在用的插件:\n\n1.  git\n\n    该插件为 git 的众多常用命令提供了更简单的别名，比如 `git status` 的别名是 `gst`，\n    大大减少了击键数。但该插件中 `git mergetool --no-prompt` 的别名是 `gmt`，\n    与 GMT 软件冲突，需要将该插件的目录 git 复制到 custom/plugins 下，然后删除其中的 gmt 别名；\n\n2.  命令补全插件: pip, pyenv\n3.  sudo：按两下 `ESC` 即可在当前命令前加上 `sudo`\n4.  yum：为常见的 yum 命令提供别名\n\n### autojump\n\n[autojump](https://github.com/joelthelion/autojump) 是一个非常智能的目录快速切换的工具。简单演示如下:\n\n    $ pwd\n    /home/seisman\n    $ cd Desktop\n    $ cd /opt\n    $ cd /usr/local\n\n    # 用 j 命令迅速从 / usr/local 跳转到与 des 匹配的目录，这里只有 Desktop 可以匹配\n    $ j des\n    $ pwd\n    /home/seisman/Desktop\n\n用法差不多就这样，具体看项目主页。\n\n安装:\n\n    sudo yum install autojump\n    sudo yum install autojump-zsh\n\n### 中文输入法\n\n由于使用的是全英文安装，所以默认是没有中文输入法的。\n\n在“Application”->“Settings”->“Region & Language” 中将“Chinese（Intelligent Pinyin）”添加到“Input Sources” 中即可使用中文输入法。默认使用“Shift”键切换中文输入法。\n\n### 等宽字体\n\n编程要用等宽字体，这点是常识了。一款适合编程的等宽字体，至少要满足如下几个要求：\n\n1.  易于区分 “1”、“i” 和“l”\n2.  易于区分 “0”、“o” 和“O”\n3.  易于区分中文下的左引号和右引号\n4.  美观\n\n目前选择的 Source Code Pro。将解压后的字体文件放在 `~/.fonts` 目录下，并修改终端、gedit 以及其他编辑器、IDE 等的默认字体。\n\n## 虚拟机\n\n有时候可能需要在 Windows 下做一些操作，如果机器性能足够好的话，可以安装虚拟机。\n\n### VirtualBox 虚拟机\n\nVirtuabBox 的安装:\n\n    wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo\n    sudo mv virtualbox.repo /etc/yum.repos.d/\n    sudo yum install VirtualBox-5.0\n\n需要注意两点：\n\n-   若机器性能不够，虚拟机的使用体验会非常差，所以不建议在老机器上使用；\n-   更新 kernel 之后需要执行 `sudo /sbin/rcvboxdrv setup` ；\n-   在 VirtualBox 安装虚拟系统后，记得使用 “设备”->“安装增强功能”，使用效果会更好；\n\n### gnome-boxes\n\ngnome-boxes 是 GNOME3 开发的一个虚拟机工具，使用体验不如 VirtualBox:\n\n    sudo yum install gnome-boxes\n\n### Wine\n\nWine 是一个可以让 Windows 程序运行在 Linux 下的软件。类似虚拟机，但跟虚拟机又不太一样:\n\n    sudo yum install wine\n\n## 同步网盘\n\n网盘根据功能大概可以分为两类：同步网盘和备份网盘。既然是同步网盘，Linux 下\n的客户端必不可少。就目前已知的情况来看，CentOS7 下能使用的同步网盘只有三个：\nDropbox、MEGA 和坚果云。\n\n我主要用同步网盘将 Linux 机器上的 PDF 文献同步到 iPad 上。\n\n### Dropbox\n\n又是一个被墙的工具，熟练掌握科学上网技巧的人可以使用，一般人还是不要用了。\n\n    wget https://www.dropbox.com/download?dl=packages/fedora/nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n    sudo rpm -i nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n\n### MEGA\n\nMEGA： <https://mega.co.nz/>\n\n免费容量 50G，作为同步盘来说基本是够用了。\n\n    # 下载主程序\n    wget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/megasync-CentOS_7.x86_64.rpm\n    # 下载文件管理器扩展（可选）\n    wget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/nautilus-megasync-CentOS_7.x86_64.rpm\n    sudo yum localinstall megasync-CentOS_7.x86_64.rpm\n    sudo yum localinstall nautilus-megasync-CentOS_7.x86_64.rpm\n\n### 坚果云\n\n国内的全平台同步网盘，不限空间，但限制每月上传流量 1G，下载流量 3G。\n\n    # 坚果云依赖于 notify-python\n    sudo yum install notify-python\n    # 下载\n    wget https://jianguoyun.com/static/exe/installer/fedora/nautilus_nutstore_amd64.rpm\n    sudo rpm -i nautilus_nutstore_amd64.rpm\n\n## 工具软件\n\n### 视频下载工具\n\n[you-get](https://github.com/soimort/you-get) 和 [youtube-dl](https://github.com/rg3/youtube-dl)\n是两个用于从视频网站上下载视频文件的工具。其中，后者支持的网站更多，但前者对国内的视频网站支持更好。\n\n    pip install you-get\n    pip install youtube-dl\n    # EPEL 中提供了 youtube-dl 包，因而也可以使用 yum 安装。一般来说，pip 安装的版本更新一些\n\n### PDF 处理工具\n\n[cpdf](http://community.coherentpdf.com/) 是一个跨平台的 PDF 处理工具，可以完成常见的 PDF 合并、\n切割、加密解密、书签、水印等功能。\n\n下载已编译好的 [二进制包](https://github.com/coherentgraphics/cpdf-binaries/archive/master.zip)，\n解压，并将与自己的平台对应的二进制文件复制到 `${HOME}/bin` 目录下即可使用。\n\n### BT 软件\n\ntransmission 是 Linux 下常用的 Torrent 下载软件:\n\n    sudo yum install transmission\n\n在 “Application”->“Internet”-> 中可以启动 transmission。\n\n### uGet\n\n<http://ugetdm.com/>\n\nuGet 是 Linux 下的一个下载工具，支持 HTTP、HTTPS、FTP、Torrent 等，支持多连接，并可以监视剪贴板:\n\n    sudo yum --enablerepo=epel-testing install uget aria2\n\n### 截图软件 shutter\n\nGNOME 自带了截图工具。 `PrtScn` 为截取整个屏幕； `Alt+PrtScn` 为截取当前窗口；\n`Shift+PrtScn` 为自定义截屏区域。\n\n[shutter](http://shutter-project.org/) 是一个功能更强大的截图工具，支持不同的截图方式、\n图片格式，还支持图片的简单编辑与注释:\n\n    sudo yum install shutter\n\n可以通过 [修改快捷键使 shutter 成为默认的截图工具](http://shutter-project.org/faq-help/set-shutter-as-the-default-screenshot-tool/)。\n\n### 其他工具\n\n    sudo yum install nfs-utils     # 挂载 NFS 文件系统所必须\n    sudo yum install xclip         # 终端的文本复制工具\n    sudo yum install ImageMagick   # 其中的 import 和 convert 命令很有用\n    sudo yum install dos2unix unix2dos  # Windows 和 Linux 换行符互相转换\n    sudo yum install meld          # 图形界面下的文件差异比较工具\n\n## 娱乐\n\n### 影音播放器\n\nNux Dextop 提供了 mplayer 和 VLC，可以用于播放常见格式的音频和视频，二者选其一安装即可:\n\n    sudo yum install mplayer\n    sudo yum install vlc\n\n### 游戏\n\n    sudo yum install 2048-cli   # 2048 命令行版\n\n## 参考\n\n1.  [ELRepo 官方网站](http://elrepo.org/tiki/tiki-index.php)\n2.  [ELRepo kmod-nvidia](http://elrepo.org/tiki/kmod-nvidia)\n3.  [CentOS Yum 软件库样例](http://wiki.centos.org/zh/AdditionalResources/Repositories/GoogleYumRepos)\n\n## 修订历史\n\n-   2017-04-15：初稿；","slug":"centos-s","published":1,"layout":"post","photos":[],"link":"","_id":"cj3plemxg0009761w2datknxp","content":"<p>这篇博文记录了我用 CentOS 7 搭建 <strong>数据科学生产环境</strong> 的过程，供我个人在未来重装系统时参考。对于其他同学，也许有借鉴意义。</p>\n<p>阅读须知：</p>\n<ol>\n<li><strong>不推荐刚接触 Linux 的人使用 CentOS 发行版</strong>；</li>\n<li>本文尽量写的浅显易懂，但要求读者掌握 Linux 基础知识；</li>\n<li>本文所有操作均在 CentOS 7 下完成，其他发行版或多或少与 CentOS 7 不同，因而仅供参考；</li>\n<li>本文所安装的软件纯粹出于个人习惯及喜好，读者应自己判断，按需安装；</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"安装-CentOS\"><a href=\"#安装-CentOS\" class=\"headerlink\" title=\"安装 CentOS\"></a>安装 CentOS</h2><p>CentOS 7 的安装与其他 Linux 发行版的安装差不多，个别地方稍有不同。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>准备材料</p>\n<ul>\n<li>U 盘：容量 2GB 以上，用于制作 U 盘启动盘，因为在制作启动盘时会格式化 U 盘，所以 U 盘内不要包含重要资料</li>\n<li><a href=\"http://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-LiveGNOME-1511.iso\" target=\"_blank\" rel=\"external\">CentOS 7.2 LiveCD ISO 镜像文件</a></li>\n<li><a href=\"http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/\" target=\"_blank\" rel=\"external\">Universal USB installer</a>：Windows 下的 U 盘启动盘制作工具</li>\n<li>一个已安装 Windows 的电脑：用于制作 U 盘启动盘</li>\n</ul>\n</li>\n<li><p>运行 Universal USB installer 并制作 U 盘启动盘</p>\n</li>\n<li>将 U 盘插入计算机，重启，进入 BIOS 选择从 U 盘启动，即可进入 CentOS 的 LiveCD</li>\n<li>进入 LiveCD 后，点击桌面的 “Install to Hard Drive” 即可安装</li>\n</ol>\n<p>注：Linux 下可以通过 <code>dd</code> 命令制作启动盘，但由于对原理不够了解，偶尔会导致制作失败，<br>或制作成功后 U 盘容量有问题，还是用 Windows 下的 Universal USB installer 比较靠谱。</p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h3><ol>\n<li><p>选择安装过程中使用的语言，这里应 <strong>使用英语，不要使用汉语</strong>。若安装界面使用汉语，最终安装的系统中会出现两个比较麻烦的问题：</p>\n<ol>\n<li>家目录下的系统文件夹如 Downloads、Desktop 等会以中文表示，这使得在命令行 <code>cd</code> 变得很麻烦；</li>\n<li>终端中某些字符用英文字体，某些字符用中文字体，效果非常差，需要自己修改终端字体方可；</li>\n</ol>\n</li>\n<li><p>选择区域和城市：Asia 和 Shanghai</p>\n</li>\n<li>键盘使用 English(US) 而不是 English(UK)</li>\n<li>Hostname 可以改也可以不改，我用 <code>saturn.geolab</code></li>\n<li>安装的目的地，选择要使用的硬盘，在 “Other Storage Options” 处选择“I will configure partioning”，即手动分区</li>\n</ol>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>CentOS7 的分区似乎比较特别，自认为经验很丰富的我在第一次安装 CentOS7 时还是在分区上耽误了很多时间。后来找到比较合适的分区方法，如下：</p>\n<ul>\n<li>点击 “Click here to create them automatically”，即让安装程序帮忙分区</li>\n<li>默认的分区方案是使用 LVM，其好处在于 “当机器有多块硬盘时，在使用的时候看上去只有一块”</li>\n<li>默认的文件系统为 XFS 而不是以前常用的 EXT4；</li>\n<li>自动分区完成后，再根据自己的需求，手动修改分区细节<ul>\n<li><code>/boot</code> ：CentOS 自动分配，一定不要乱改；</li>\n<li><code>/</code> ：根目录，合理使用并及时清理的话 15G 就够了，不过建议 30G 以上；</li>\n<li><code>swap</code> ：与物理内存大小一致即可</li>\n<li><code>/opt</code> ：个人习惯是将第三方软件都安装在 <code>/opt</code> 下，所以分了 70G</li>\n<li><code>/home</code> ：余下的全部空间</li>\n</ul>\n</li>\n<li>点击 “Begin to Install” 开始安装</li>\n</ul>\n<h3 id=\"真正的安装\"><a href=\"#真正的安装\" class=\"headerlink\" title=\"真正的安装\"></a>真正的安装</h3><ol>\n<li>设置 root 密码</li>\n<li>创建一般用户</li>\n<li>等待安装完成</li>\n<li>安装完成，重启</li>\n<li>重启后，同意 License 即可</li>\n</ol>\n<h2 id=\"对系统的若干修改\"><a href=\"#对系统的若干修改\" class=\"headerlink\" title=\"对系统的若干修改\"></a>对系统的若干修改</h2><h3 id=\"若干原则\"><a href=\"#若干原则\" class=\"headerlink\" title=\"若干原则\"></a>若干原则</h3><p>为了搭建一个稳定的系统，尽量避免因为各种瞎折腾而导致的系统问题，特订立了一些软件安装的原则。<br>具体参见《<a href=\"/how-to-install-softwares-under-centos-7.html\">CentOS7 下的软件安装方法与策略</a>》。</p>\n<h3 id=\"给一般账号-root-权限\"><a href=\"#给一般账号-root-权限\" class=\"headerlink\" title=\"给一般账号 root 权限\"></a>给一般账号 root 权限</h3><p>默认情况下，一般账号是没有 root 权限的。为什么不直接用 root 账号，而是要给一般账号 root 权限呢？</p>\n<ul>\n<li><strong>日常工作中使用 root 账号，是非常糟糕且危险的习惯！无论是服务器还是个人电脑都是如此。</strong></li>\n<li>安装软件时需要 root 权限，只能 <code>su</code> 切换到 root 账户再安装。对于习惯使用 <code>sudo</code> 的人来说，还是有些麻烦。</li>\n</ul>\n<p>假设账户名为 seisman，要授予他 root 权限，则要修改配置文件 <code>/etc/sudoers</code> :</p>\n<pre><code>$ su\n# echo &apos;seisman ALL=(ALL) ALL&apos;&gt;&gt; /etc/sudoers # 向配置文件中加入语句\n# tail -1 /etc/sudoers  # 检查一下是否正确\nseisman ALL=(ALL) ALL\n</code></pre><p>其中 seisman 为当前用户名。</p>\n<h3 id=\"添加第三方源\"><a href=\"#添加第三方源\" class=\"headerlink\" title=\"添加第三方源\"></a>添加第三方源</h3><p>CentOS 由于很追求稳定性，所以官方源中自带的软件不多，因而需要一些第三方源，比如<br>EPEL、ATrpms、ELRepo、Nux Dextop、RepoForge 等。根据上面提到的软件安装原则，为了尽<br>可能保证系统的稳定性，此处大型第三方源只添加 EPEL 源、Nux Dextop 和 ELRepo 源。</p>\n<h4 id=\"EPEL\"><a href=\"#EPEL\" class=\"headerlink\" title=\"EPEL\"></a>EPEL</h4><p><a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"external\">EPEL</a> 即 Extra Packages for Enterprise Linux，<br>为 CentOS 提供了额外的 10000 多个软件包，而且在不替换系统组件方面下了很多功夫，因而可以放心使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install epel-release</div></pre></td></tr></table></figure>\n<p>执行完该命令后，在 <code>/etc/yum.repos.d</code> 目录下会多一个 <code>epel.repo</code> 文件。</p>\n<!-- #### Nux Dextop\n\n[Nux Dextop](http://li.nux.ro/repos.html) 中包含了一些与多媒体相关的软件包，作者尽量\n保证不覆盖 base 源。官方说明中说该源与 EPEL 兼容，实际上个别软件包存在冲突，但基本不会造成影响:\n\n    sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `nux-dextop.repo` 文件。-->\n<h4 id=\"ELRepo\"><a href=\"#ELRepo\" class=\"headerlink\" title=\"ELRepo\"></a>ELRepo</h4><p>ELRepo 包含了一些硬件相关的驱动程序，比如显卡、声卡驱动:</p>\n<pre><code>sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nsudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n</code></pre><p>完成该命令后，在 <code>/etc/yum.repos.d</code> 目录下会多一个 <code>elrepo.repo</code> 文件。</p>\n<h3 id=\"安装-yum-axelget\"><a href=\"#安装-yum-axelget\" class=\"headerlink\" title=\"安装 yum-axelget\"></a>安装 yum-axelget</h3><p><a href=\"https://dl.fedoraproject.org/pub/epel/7/x86_64/repoview/yum-axelget.html\" target=\"_blank\" rel=\"external\">yum-axelget</a> 是 EPEL<br>提供的一个 yum 插件。使用该插件后用 yum 安装软件时可以并行下载，大大提高了软件的下载速度，减少了下载的等待时间:</p>\n<pre><code>sudo yum install yum-axelget\n</code></pre><p>安装该插件的同时会安装另一个软件 axel。axel 是一个并行下载工具，在下载 http、ftp 等简单协议的文件时非常好用。</p>\n<h3 id=\"第一次全面更新\"><a href=\"#第一次全面更新\" class=\"headerlink\" title=\"第一次全面更新\"></a>第一次全面更新</h3><p>在进一步操作之前，先把已经安装的软件包都升级到最新版:</p>\n<pre><code>sudo yum update\n</code></pre><p>要更新的软件包有些多，可能需要一段时间。不过有了 yum-axelget 插件，速度已经快了很多啦。</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>第一次全面更新完之后建议重启。</p>\n<h3 id=\"删除多余的-kernel\"><a href=\"#删除多余的-kernel\" class=\"headerlink\" title=\"删除多余的 kernel\"></a>删除多余的 kernel</h3><p>在前面的 <code>yum update</code> 执行之后，可能会将 kernel 也一起更新，则在启动 CentOS 时启动项中会有很多项。</p>\n<p>确认当前使用的 kernel 版本号:</p>\n<pre><code>$ uname -r\n3.10.0-123.9.3.el7.x86_64\n</code></pre><p>查找当前系统安装的所有 kernel:</p>\n<pre><code>$ rpm -qa | grep kernel | sort\nkernel-3.10.0-123.8.1.el7.x86_64\nkernel-3.10.0-123.9.2.el7.x86_64\nkernel-3.10.0-123.9.3.el7.x86_64\nkernel-devel-3.10.0-123.8.1.el7.x86_64\nkernel-devel-3.10.0-123.9.2.el7.x86_64\nkernel-devel-3.10.0-123.9.3.el7.x86_64\nkernel-headers-3.10.0-123.9.3.el7.x86_64\nkernel-tools-3.10.0-123.9.3.el7.x86_64\nkernel-tools-libs-3.10.0-123.9.3.el7.x86_64\n</code></pre><p>可以看出有三个版本的 kernel，123.8.1、123.9.2 和 123.9.3。除了最新的 kernel 外，建议多保留一个旧 kernel，以免新 kernel 出现问题时可以通过旧 kernel 进入系统。因而此处删除 123.8.1 版本的 kernel:</p>\n<pre><code>sudo yum remove kernel-3.10.0-123.8.1.el7.x86_64\nsudo yum remove kernel-devel-3.10.0-123.8.1.el7.x86_64\n</code></pre><h2 id=\"基础开发环境\"><a href=\"#基础开发环境\" class=\"headerlink\" title=\"基础开发环境\"></a>基础开发环境</h2><h3 id=\"GCC-系列\"><a href=\"#GCC-系列\" class=\"headerlink\" title=\"GCC 系列\"></a>GCC 系列</h3><pre><code>sudo yum install gcc                     # C 编译器\nsudo yum install gcc-c++                 # C++ 编译器\nsudo yum install gcc-gfortran            # Fortran 编译器\nsudo yum install compat-gcc-44           # 兼容 gcc 4.4\nsudo yum install compat-gcc-44-c++       # 兼容 gcc-c++ 4.4\nsudo yum install compat-gcc-44-gfortran  # 兼容 gcc-fortran 4.4\nsudo yum install compat-libf2c-34        # g77 3.4.x 兼容库\n</code></pre><h3 id=\"软件开发辅助工具\"><a href=\"#软件开发辅助工具\" class=\"headerlink\" title=\"软件开发辅助工具\"></a>软件开发辅助工具</h3><pre><code>sudo yum install make\nsudo yum install gdb     # 代码调试器\nsudo yum install cmake   # Cmake\nsudo yum install git     # 版本控制\n</code></pre><h2 id=\"驱动程序\"><a href=\"#驱动程序\" class=\"headerlink\" title=\"驱动程序\"></a>驱动程序</h2><h3 id=\"显卡驱动\"><a href=\"#显卡驱动\" class=\"headerlink\" title=\"显卡驱动\"></a>显卡驱动</h3><p>Linux 默认只使用开源的显卡驱动，就目前的情况来看，开源驱动的效果还是不错的，但跟官方的<br>闭源驱动相比还是有一定差距。最明显的区别是，在使用 SAC 的 ppk 功能放大波形时，使用开源驱动会<br>出现延迟，而使用官方闭源则整个过程非常顺畅。</p>\n<p>关于显卡驱动的安装，请参考 <a href=\"/install-nvidia-drivers-under-linux.html\">Linux 下安装 nvidia 显卡驱动</a><br>一文中的 “从 ELRepo 源中安装驱动” 部分。</p>\n<p><strong>注意</strong>：目前的显卡驱动似乎有问题，安装后终端有时会出现屏幕闪烁、一屏文字上下重复跳动的情况，<br>稍微有些影响用 vim 写代码。是否要安装显卡驱动自己决定。</p>\n<h3 id=\"NTFS-驱动\"><a href=\"#NTFS-驱动\" class=\"headerlink\" title=\"NTFS 驱动\"></a>NTFS 驱动</h3><p>CentOS 下默认无法挂载 NTFS 格式的硬盘。需安装 nfts-3g 即可实现即插即用:</p>\n<pre><code>sudo yum install ntfs-3g\n</code></pre><h2 id=\"进阶开发环境\"><a href=\"#进阶开发环境\" class=\"headerlink\" title=\"进阶开发环境\"></a>进阶开发环境</h2><h3 id=\"Java-环境\"><a href=\"#Java-环境\" class=\"headerlink\" title=\"Java 环境\"></a>Java 环境</h3><p>Java 的一大特色在于跨平台，安装了 Java 运行环境，即可运行 Java 程序:</p>\n<pre><code>sudo yum install java                        # java 运行环境\n</code></pre><h3 id=\"Clang-系列\"><a href=\"#Clang-系列\" class=\"headerlink\" title=\"Clang 系列\"></a>Clang 系列</h3><p>Clang 可以认为是 GCC 的替代品，可以用于编译 C、C++、Objective-C 和 Objective-C++。其提供了更友好的<br>报错信息，在有些方面比 GCC 更友好，同时其提供了一个代码静态分析器，可以用于分析代码中可能出现的 bug 和内存溢出问题。</p>\n<pre><code>sudo yum install clang             # clang 编译器\nsudo yum install clang-analyzer    # clang 静态分析器\n</code></pre><h3 id=\"Intel-系列\"><a href=\"#Intel-系列\" class=\"headerlink\" title=\"Intel 系列\"></a>Intel 系列</h3><p>Intel 的大部分软件都是非开源且收费的，但同时部分软件也提供了 Linux 下的非商业免费版。<br>比如 icc、mkl 数学库以及代码性能分析工具等。</p>\n<p>Intel 软件的申请以及安装参考《<a href=\"/intel-non-commercial-software.html\">Intel 非商业免费开发工具</a>》。</p>\n<p>还有一点需要注意的是，Intel 也提供了并行相关的几个命令，比如 mpicc、mpirun。所以 openmpi、mpich<br>和 intel 三者，在并行时只能用其中一个。</p>\n<h3 id=\"并行计算\"><a href=\"#并行计算\" class=\"headerlink\" title=\"并行计算\"></a>并行计算</h3><p>并行可以用 openmpi，也可以用 mpich，二者的功能可以认为是完全相同的。由于二者提供了几乎一样的命令，<br>所以二者可以同时安装，但是不可以同时处于使用状态。</p>\n<h4 id=\"openmpi\"><a href=\"#openmpi\" class=\"headerlink\" title=\"openmpi\"></a>openmpi</h4><p>安装 openmpi:</p>\n<pre><code>sudo yum install openmpi openmpi-devel\n</code></pre><p>安装后，二进制文件位于 <code>/usr/lib64/openmpi/bin</code> 下，动态库文件位于 <code>/usr/lib64/openmpi/lib</code><br>下，因而实际使用的话还需要额外的配置，在 <code>.bashrc</code> 中加入如下语句:</p>\n<pre><code>export PATH=/usr/lib64/openmpi/bin/:${PATH}\nmodule load mpi/openmpi-x86_64\n</code></pre><p>PS：要使用 <code>module</code> 命令需要先安装 <code>environment-modules</code> 包。</p>\n<h4 id=\"mpich\"><a href=\"#mpich\" class=\"headerlink\" title=\"mpich\"></a>mpich</h4><p>安装 mpich:</p>\n<pre><code>sudo yum install mpich mpich-devel\n</code></pre><p>安装后，二进制文件位于 <code>/usr/lib64/mpich/bin</code> 下，动态库文件位于 <code>/usr/lib64/mpich/lib</code> 下，<br>因而实际使用的话还需要额外的配置，在 <code>.bashrc</code> 中加入如下语句:</p>\n<pre><code>export PATH=/usr/lib64/mpich/bin/:${PATH}\nmodule load mpi/mpich-x86_64\n</code></pre><h2 id=\"脚本语言环境\"><a href=\"#脚本语言环境\" class=\"headerlink\" title=\"脚本语言环境\"></a>脚本语言环境</h2><h3 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h3><p>CentOS 7.0 自带了 Perl 5.16.3（2013 年 03 月 11 日发布），目前的最新版本为 5.20.1（2014 年 09 月 14 日发布）。</p>\n<h4 id=\"系统自带-Perl\"><a href=\"#系统自带-Perl\" class=\"headerlink\" title=\"系统自带 Perl\"></a>系统自带 Perl</h4><p>系统自带 Perl，就目前来看，版本不算老，基本够用。官方源和 EPEL 源中提供了 1000 多个模块，可以直接用 yum 安装:</p>\n<pre><code>sudo yum install perl-Parallel-ForkManager  # 并行模块\n</code></pre><p>若源中没有已打包好的模块，也可以使用 perl 自带的 cpan 来安装模块。</p>\n<p>优先级：yum &gt; cpan。</p>\n<h4 id=\"plenv-管理新版本\"><a href=\"#plenv-管理新版本\" class=\"headerlink\" title=\"plenv 管理新版本\"></a>plenv 管理新版本</h4><p>若需要使用最新版本的 perl，可以使用 <a href=\"/perl-plenv.html\">plenv</a> 安装新版本的 perl，并使用 plenv 提供的 cpanm 命令安装模块:</p>\n<pre><code>cpanm install Parallel::ForkManager # 并行模块\n</code></pre><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>CentOS 7.0 自带 Python 2.7.5，目前 Python 2 的最新版本为 2.7.8，Python 3 的最新版本为 3.4.2。</p>\n<h4 id=\"系统自带-Python\"><a href=\"#系统自带-Python\" class=\"headerlink\" title=\"系统自带 Python\"></a>系统自带 Python</h4><p>系统自带的 Python 2.7.5，基本已经够用，Python 2 常用的模块在官方源或 EPEL 源中也有有编译好的包，<br>因而直接通过 yum 安装即可:</p>\n<pre><code>sudo yum install python-matplotlib  # 2D 绘图库\nsudo yum install PyQt4  # Qt4 的 Python 绑定\nsudo yum install numpy  # 数组操作库\nsudo yum install scipy  # 科学计算库\nsudo yum install python-requests  # 网页请求\nsudo yum install python-docopt  # 命令行参数分析器\nsudo yum install gdal-python    # gdal 的 Python 绑定\n</code></pre><h4 id=\"pyenv-管理-Python3\"><a href=\"#pyenv-管理-Python3\" class=\"headerlink\" title=\"pyenv 管理 Python3\"></a>pyenv 管理 Python3</h4><p>Python2 与 Python3 之间是不完全兼容的，而我以 Python3 为主，所以需要安装一个 Python3。</p>\n<p>首先，安装 <a href=\"/python-pyenv.html\">pyenv</a> 来管理多个 Python 版本，然后利用 pyenv 安装 anaconda3<br>（即 Python3.4）。anaconda 自带了众多科学计算所需的包，免去了安装的麻烦，对于其他包，<br>则可以利用 Python 自带的 pip 安装:</p>\n<pre><code>pip install requests\npip install docopt\n</code></pre><h2 id=\"编程相关软件\"><a href=\"#编程相关软件\" class=\"headerlink\" title=\"编程相关软件\"></a>编程相关软件</h2><h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><p>写代码的时候选一个好用的编辑器很重要，用的比较多的编辑器如下：</p>\n<ol>\n<li>vim</li>\n<li>emacs</li>\n<li>atom</li>\n<li>sublime text 3</li>\n<li>Visual Studio Code</li>\n</ol>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><ul>\n<li>Python IDE：<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"external\">PyCharm Community Edition</a></li>\n</ul>\n<h2 id=\"日常软件\"><a href=\"#日常软件\" class=\"headerlink\" title=\"日常软件\"></a>日常软件</h2><h3 id=\"Office-套件\"><a href=\"#Office-套件\" class=\"headerlink\" title=\"Office 套件\"></a>Office 套件</h3><h4 id=\"LibreOffice\"><a href=\"#LibreOffice\" class=\"headerlink\" title=\"LibreOffice\"></a>LibreOffice</h4><p>大多数 Linux 发行版都自带 LibreOffice:</p>\n<pre><code>sudo yum install libreoffice\n</code></pre><p>LibreOffice 与 Microsoft Office 的兼容性不太好，操作界面与 MS Office 也有较大差异，让人不太习惯。</p>\n<h4 id=\"WPS-Office\"><a href=\"#WPS-Office\" class=\"headerlink\" title=\"WPS Office\"></a>WPS Office</h4><p>若在 Linux 下对于文档处理有更高一些的要求，可以尝试目前还处于测试版的 WPS Office for Linux。<br>WPS Office 的兼容性以及界面都比 LibreOffice 要好很多，值得期待，当然还是不能做到完全兼容 MS<br>Office。</p>\n<p>安装过程参考 <a href=\"/wps-office-for-centos7.html\">CentOS 下安装 WPS Office</a> 一文。</p>\n<h3 id=\"PS-PDF-阅读器\"><a href=\"#PS-PDF-阅读器\" class=\"headerlink\" title=\"PS/PDF 阅读器\"></a>PS/PDF 阅读器</h3><p>系统自带的 evince 阅读器，可以打开 PS 和 PDF 文件，基本足够日常的使用了。</p>\n<h4 id=\"zathura\"><a href=\"#zathura\" class=\"headerlink\" title=\"zathura\"></a>zathura</h4><p>zathura 可以查看 PS、PDF、djvu 格式的文件，可以作为 evince 的替代品:</p>\n<pre><code>sudo yum install zathura zathura-plugins-all\n</code></pre><h4 id=\"ghostscript\"><a href=\"#ghostscript\" class=\"headerlink\" title=\"ghostscript\"></a>ghostscript</h4><pre><code>sudo yum install ghostscript\n</code></pre><h4 id=\"master-pdf-editor\"><a href=\"#master-pdf-editor\" class=\"headerlink\" title=\"master-pdf-editor\"></a>master-pdf-editor</h4><p>官方网站: <a href=\"https://code-industry.net/free-pdf-editor/\" target=\"_blank\" rel=\"external\">https://code-industry.net/free-pdf-editor/</a></p>\n<pre><code>sudo yum localinstall http://get.code-industry.net/public/master-pdf-editor3-3.2.62-1.x86_64.rpm\n</code></pre><h3 id=\"TeX-Live-2015\"><a href=\"#TeX-Live-2015\" class=\"headerlink\" title=\"TeX Live 2015\"></a>TeX Live 2015</h3><p>系统是自带了 TeXLive，版本较老，还是安装最新版比较好。</p>\n<p>参考 <a href=\"/install-texlive-under-linux.html\">Linux 下安装 TeXLive</a> 一文。</p>\n<h3 id=\"Mendeley\"><a href=\"#Mendeley\" class=\"headerlink\" title=\"Mendeley\"></a>Mendeley</h3><p>Mendeley 是一个跨平台的文献管理软件，其内部自带了一个可以添加注释的 PDF 阅读器。</p>\n<p>下载 Generic Linux (64 bits)：<a href=\"http://www.mendeley.com/download-mendeley-desktop\" target=\"_blank\" rel=\"external\">http://www.mendeley.com/download-mendeley-desktop</a></p>\n<p>安装:</p>\n<pre><code>tar -xvf mendeleydesktop-1.12.3-linux-x86_64.tar.bz2  # 解压\nsudo mv mendeleydesktop /opt  # 复制到 / opt 下\ncd /opt/mendeleydesktop/bin   # cd 进去\n./install-mendeley-link-handler.sh /opt/mendeleydesktop/bin/mendeleydesktop\nsudo yum install qtwebkit  # 安装依赖包\n</code></pre><p>注销重新登陆，在 Application-&gt;Education 下即可看到 mendeley 的相关项目。不过是<br>没有软件的图标的，强迫症不能忍，用下面的命令解决:</p>\n<pre><code>cp /opt/mendeleydesktop/share/icons/hicolor/128x128/apps/mendeleydesktop.png ~/.local/share/icons/\n</code></pre><h3 id=\"Google-Chrome-浏览器\"><a href=\"#Google-Chrome-浏览器\" class=\"headerlink\" title=\"Google Chrome 浏览器\"></a>Google Chrome 浏览器</h3><p>默认的浏览器是 Firefox，还是更喜欢 Chrome 浏览器。</p>\n<p>Google 官方源在国内可能无法正常访问，故而添加 Fedora 中文社区提供的镜像源:</p>\n<pre><code>sudo wget http://repo.fdzh.org/chrome/google-chrome-mirrors.repo -P /etc/yum.repos.d/\n</code></pre><p>安装:</p>\n<pre><code>sudo yum install google-chrome-stable\n</code></pre><h3 id=\"Opera-浏览器\"><a href=\"#Opera-浏览器\" class=\"headerlink\" title=\"Opera 浏览器\"></a>Opera 浏览器</h3><p>也可以选择 Opera 浏览器。</p>\n<p>下载地址：<a href=\"http://www.opera.com/download/guide/?os=linux\" target=\"_blank\" rel=\"external\">http://www.opera.com/download/guide/?os=linux</a></p>\n<p>选择 CentOS RPM package 进行下载。下载完成后，执行:</p>\n<pre><code>sudo yum localinstall opera-12.16-1860.x86_64.rpm\n</code></pre><p>想要卸载的话，就执行:</p>\n<pre><code>sudo yum remove opera\n</code></pre><h3 id=\"Flash-插件\"><a href=\"#Flash-插件\" class=\"headerlink\" title=\"Flash 插件\"></a>Flash 插件</h3><p>Flash 插件主要是看在线视频的时候要用。Google 浏览器自带了 Flash 插件，所以这里安装的 flash 插件主要是为了 firefox。</p>\n<pre><code>sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm\nsudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\nsudo yum install flash-plugin\n</code></pre><h3 id=\"解压软件\"><a href=\"#解压软件\" class=\"headerlink\" title=\"解压软件\"></a>解压软件</h3><p>解压 7z 或 zip 格式需要 p7zip，由 EPEL 提供:</p>\n<pre><code>sudo yum install p7zip\n</code></pre><p>解压 rar 格式可以使用 <a href=\"https://unarchiver.c3.cx/commandline\" target=\"_blank\" rel=\"external\">unar</a>，该软件位于 EPEL 源中：</p>\n<pre><code>sudo yum install unar\n</code></pre><h3 id=\"FTP-客户端\"><a href=\"#FTP-客户端\" class=\"headerlink\" title=\"FTP 客户端\"></a>FTP 客户端</h3><p>FTP 客户端，还是有界面的 filezilla 比较方便些。</p>\n<pre><code>sudo yum install filezilla\n</code></pre><h3 id=\"Google-Earth\"><a href=\"#Google-Earth\" class=\"headerlink\" title=\"Google Earth\"></a>Google Earth</h3><p>到 <a href=\"https://www.google.com/earth/download/ge/agree.html\" target=\"_blank\" rel=\"external\">https://www.google.com/earth/download/ge/agree.html</a> 下载64位rpm包，执行如下命令安装:</p>\n<pre><code>sudo yum localinstall google-earth-stable_current_x86_64.rpm\n</code></pre><h2 id=\"效率类软件\"><a href=\"#效率类软件\" class=\"headerlink\" title=\"效率类软件\"></a>效率类软件</h2><p>这一类工具能够在不同方面提高科研的效率，也提高了使用者的体验。</p>\n<h3 id=\"终端模拟器\"><a href=\"#终端模拟器\" class=\"headerlink\" title=\"终端模拟器\"></a>终端模拟器</h3><p>Gnome 自带的终端模拟器是 gnome-terminal。经常会需要开十几个终端，切换和管理起来比较麻烦。</p>\n<h4 id=\"terminator\"><a href=\"#terminator\" class=\"headerlink\" title=\"terminator\"></a>terminator</h4><p>terminator 有很多功能，我只用到了终端分割的功能。 <code>Ctrl+Shift+O</code> 对终端水平分隔，<br><code>Ctrl+Shift+E</code> 对终端垂直分隔， <code>Alt + 上下左右</code> 可以在各子终端中切换。terminator 由 Nux Dextop 提供:</p>\n<pre><code>sudo yum install terminator\n</code></pre><h4 id=\"guake\"><a href=\"#guake\" class=\"headerlink\" title=\"guake\"></a>guake</h4><p>有些时候需要临时执行一两个命令，但是又不想额外启动一个终端的情况下，guake 是个不错的选择。</p>\n<pre><code>sudo yum install guake\n</code></pre><p>安装完成后，在 Application-&gt;System Tools 里找到 guake Terminal 即可启动。按下 F12<br>即可呼出 guake，再次按下 F12 即可隐藏。也可在终端执行 <code>guake-prefs</code> 对 gauke 进行配置。</p>\n<h3 id=\"zsh-与-oh-my-zsh\"><a href=\"#zsh-与-oh-my-zsh\" class=\"headerlink\" title=\"zsh 与 oh my zsh\"></a>zsh 与 oh my zsh</h3><p>Linux 下有很多 shell，比如最常见的 bash，除此之外还有 csh、ksh。zsh 也是一个 shell。</p>\n<p>zsh 的特点在于：</p>\n<ul>\n<li>语法基本完全兼容于 bash，一般用户完全体会不到其区别</li>\n<li>zsh 提供命令补全特性，比 bash 的补全要更好用</li>\n<li>可配置性强</li>\n</ul>\n<p>完全不经配置的 zsh 已经很好用了，一般用户也没必要花时间研究配置。<br><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh my zsh</a> 是一群人一起维护的一套 zsh 配置文件。<br>直接用这个配置文件，稍稍了解一点会有更好的体验。</p>\n<p>安装 zsh:</p>\n<pre><code>sudo yum install zsh\n</code></pre><p>安装 oh my zsh:</p>\n<pre><code>curl -L http://install.ohmyz.sh | sh\n</code></pre><p>上面的命令，做了如下几件事情：</p>\n<ul>\n<li>下载 <code>oh my zsh</code> 到 <code>~/.oh-my-zsh</code></li>\n<li>备份已有的 zsh 配置文件 <code>~/.zshrc</code> ，并复制新的 <code>.zshrc</code> 文件</li>\n<li>将当前用户的默认 shell 由 bash 改成 zsh</li>\n</ul>\n<p>第三步中，会报错如下： <code>chsh: &quot;/usr/bin/zsh&quot; is not listed in /etc/shells.</code> ，需要手动修改默认 shell:</p>\n<pre><code>chsh -s /bin/zsh\n</code></pre><p>chsh 命令修改的是 login shell，因而需要退出当前用户并重新登陆，以后用户的默认 shell<br>就从 bash 变成了 zsh，所有的配置都不用写到 <code>.bashrc</code> 而要写到 <code>.zshrc</code> 中。</p>\n<p>在 <code>.zshrc</code> 中可以选择喜欢的主题，以及适当数量的插件。下面列出我在用的插件:</p>\n<ol>\n<li><p>git</p>\n<p>该插件为 git 的众多常用命令提供了更简单的别名，比如 <code>git status</code> 的别名是 <code>gst</code>，<br>大大减少了击键数。但该插件中 <code>git mergetool --no-prompt</code> 的别名是 <code>gmt</code>，<br>与 GMT 软件冲突，需要将该插件的目录 git 复制到 custom/plugins 下，然后删除其中的 gmt 别名；</p>\n</li>\n<li><p>命令补全插件: pip, pyenv</p>\n</li>\n<li>sudo：按两下 <code>ESC</code> 即可在当前命令前加上 <code>sudo</code></li>\n<li>yum：为常见的 yum 命令提供别名</li>\n</ol>\n<h3 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h3><p><a href=\"https://github.com/joelthelion/autojump\" target=\"_blank\" rel=\"external\">autojump</a> 是一个非常智能的目录快速切换的工具。简单演示如下:</p>\n<pre><code>$ pwd\n/home/seisman\n$ cd Desktop\n$ cd /opt\n$ cd /usr/local\n\n# 用 j 命令迅速从 / usr/local 跳转到与 des 匹配的目录，这里只有 Desktop 可以匹配\n$ j des\n$ pwd\n/home/seisman/Desktop\n</code></pre><p>用法差不多就这样，具体看项目主页。</p>\n<p>安装:</p>\n<pre><code>sudo yum install autojump\nsudo yum install autojump-zsh\n</code></pre><h3 id=\"中文输入法\"><a href=\"#中文输入法\" class=\"headerlink\" title=\"中文输入法\"></a>中文输入法</h3><p>由于使用的是全英文安装，所以默认是没有中文输入法的。</p>\n<p>在“Application”-&gt;“Settings”-&gt;“Region &amp; Language” 中将“Chinese（Intelligent Pinyin）”添加到“Input Sources” 中即可使用中文输入法。默认使用“Shift”键切换中文输入法。</p>\n<h3 id=\"等宽字体\"><a href=\"#等宽字体\" class=\"headerlink\" title=\"等宽字体\"></a>等宽字体</h3><p>编程要用等宽字体，这点是常识了。一款适合编程的等宽字体，至少要满足如下几个要求：</p>\n<ol>\n<li>易于区分 “1”、“i” 和“l”</li>\n<li>易于区分 “0”、“o” 和“O”</li>\n<li>易于区分中文下的左引号和右引号</li>\n<li>美观</li>\n</ol>\n<p>目前选择的 Source Code Pro。将解压后的字体文件放在 <code>~/.fonts</code> 目录下，并修改终端、gedit 以及其他编辑器、IDE 等的默认字体。</p>\n<h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p>有时候可能需要在 Windows 下做一些操作，如果机器性能足够好的话，可以安装虚拟机。</p>\n<h3 id=\"VirtualBox-虚拟机\"><a href=\"#VirtualBox-虚拟机\" class=\"headerlink\" title=\"VirtualBox 虚拟机\"></a>VirtualBox 虚拟机</h3><p>VirtuabBox 的安装:</p>\n<pre><code>wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo\nsudo mv virtualbox.repo /etc/yum.repos.d/\nsudo yum install VirtualBox-5.0\n</code></pre><p>需要注意两点：</p>\n<ul>\n<li>若机器性能不够，虚拟机的使用体验会非常差，所以不建议在老机器上使用；</li>\n<li>更新 kernel 之后需要执行 <code>sudo /sbin/rcvboxdrv setup</code> ；</li>\n<li>在 VirtualBox 安装虚拟系统后，记得使用 “设备”-&gt;“安装增强功能”，使用效果会更好；</li>\n</ul>\n<h3 id=\"gnome-boxes\"><a href=\"#gnome-boxes\" class=\"headerlink\" title=\"gnome-boxes\"></a>gnome-boxes</h3><p>gnome-boxes 是 GNOME3 开发的一个虚拟机工具，使用体验不如 VirtualBox:</p>\n<pre><code>sudo yum install gnome-boxes\n</code></pre><h3 id=\"Wine\"><a href=\"#Wine\" class=\"headerlink\" title=\"Wine\"></a>Wine</h3><p>Wine 是一个可以让 Windows 程序运行在 Linux 下的软件。类似虚拟机，但跟虚拟机又不太一样:</p>\n<pre><code>sudo yum install wine\n</code></pre><h2 id=\"同步网盘\"><a href=\"#同步网盘\" class=\"headerlink\" title=\"同步网盘\"></a>同步网盘</h2><p>网盘根据功能大概可以分为两类：同步网盘和备份网盘。既然是同步网盘，Linux 下<br>的客户端必不可少。就目前已知的情况来看，CentOS7 下能使用的同步网盘只有三个：<br>Dropbox、MEGA 和坚果云。</p>\n<p>我主要用同步网盘将 Linux 机器上的 PDF 文献同步到 iPad 上。</p>\n<h3 id=\"Dropbox\"><a href=\"#Dropbox\" class=\"headerlink\" title=\"Dropbox\"></a>Dropbox</h3><p>又是一个被墙的工具，熟练掌握科学上网技巧的人可以使用，一般人还是不要用了。</p>\n<pre><code>wget https://www.dropbox.com/download?dl=packages/fedora/nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\nsudo rpm -i nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n</code></pre><h3 id=\"MEGA\"><a href=\"#MEGA\" class=\"headerlink\" title=\"MEGA\"></a>MEGA</h3><p>MEGA： <a href=\"https://mega.co.nz/\" target=\"_blank\" rel=\"external\">https://mega.co.nz/</a></p>\n<p>免费容量 50G，作为同步盘来说基本是够用了。</p>\n<pre><code># 下载主程序\nwget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/megasync-CentOS_7.x86_64.rpm\n# 下载文件管理器扩展（可选）\nwget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/nautilus-megasync-CentOS_7.x86_64.rpm\nsudo yum localinstall megasync-CentOS_7.x86_64.rpm\nsudo yum localinstall nautilus-megasync-CentOS_7.x86_64.rpm\n</code></pre><h3 id=\"坚果云\"><a href=\"#坚果云\" class=\"headerlink\" title=\"坚果云\"></a>坚果云</h3><p>国内的全平台同步网盘，不限空间，但限制每月上传流量 1G，下载流量 3G。</p>\n<pre><code># 坚果云依赖于 notify-python\nsudo yum install notify-python\n# 下载\nwget https://jianguoyun.com/static/exe/installer/fedora/nautilus_nutstore_amd64.rpm\nsudo rpm -i nautilus_nutstore_amd64.rpm\n</code></pre><h2 id=\"工具软件\"><a href=\"#工具软件\" class=\"headerlink\" title=\"工具软件\"></a>工具软件</h2><h3 id=\"视频下载工具\"><a href=\"#视频下载工具\" class=\"headerlink\" title=\"视频下载工具\"></a>视频下载工具</h3><p><a href=\"https://github.com/soimort/you-get\" target=\"_blank\" rel=\"external\">you-get</a> 和 <a href=\"https://github.com/rg3/youtube-dl\" target=\"_blank\" rel=\"external\">youtube-dl</a><br>是两个用于从视频网站上下载视频文件的工具。其中，后者支持的网站更多，但前者对国内的视频网站支持更好。</p>\n<pre><code>pip install you-get\npip install youtube-dl\n# EPEL 中提供了 youtube-dl 包，因而也可以使用 yum 安装。一般来说，pip 安装的版本更新一些\n</code></pre><h3 id=\"PDF-处理工具\"><a href=\"#PDF-处理工具\" class=\"headerlink\" title=\"PDF 处理工具\"></a>PDF 处理工具</h3><p><a href=\"http://community.coherentpdf.com/\" target=\"_blank\" rel=\"external\">cpdf</a> 是一个跨平台的 PDF 处理工具，可以完成常见的 PDF 合并、<br>切割、加密解密、书签、水印等功能。</p>\n<p>下载已编译好的 <a href=\"https://github.com/coherentgraphics/cpdf-binaries/archive/master.zip\" target=\"_blank\" rel=\"external\">二进制包</a>，<br>解压，并将与自己的平台对应的二进制文件复制到 <code>${HOME}/bin</code> 目录下即可使用。</p>\n<h3 id=\"BT-软件\"><a href=\"#BT-软件\" class=\"headerlink\" title=\"BT 软件\"></a>BT 软件</h3><p>transmission 是 Linux 下常用的 Torrent 下载软件:</p>\n<pre><code>sudo yum install transmission\n</code></pre><p>在 “Application”-&gt;“Internet”-&gt; 中可以启动 transmission。</p>\n<h3 id=\"uGet\"><a href=\"#uGet\" class=\"headerlink\" title=\"uGet\"></a>uGet</h3><p><a href=\"http://ugetdm.com/\" target=\"_blank\" rel=\"external\">http://ugetdm.com/</a></p>\n<p>uGet 是 Linux 下的一个下载工具，支持 HTTP、HTTPS、FTP、Torrent 等，支持多连接，并可以监视剪贴板:</p>\n<pre><code>sudo yum --enablerepo=epel-testing install uget aria2\n</code></pre><h3 id=\"截图软件-shutter\"><a href=\"#截图软件-shutter\" class=\"headerlink\" title=\"截图软件 shutter\"></a>截图软件 shutter</h3><p>GNOME 自带了截图工具。 <code>PrtScn</code> 为截取整个屏幕； <code>Alt+PrtScn</code> 为截取当前窗口；<br><code>Shift+PrtScn</code> 为自定义截屏区域。</p>\n<p><a href=\"http://shutter-project.org/\" target=\"_blank\" rel=\"external\">shutter</a> 是一个功能更强大的截图工具，支持不同的截图方式、<br>图片格式，还支持图片的简单编辑与注释:</p>\n<pre><code>sudo yum install shutter\n</code></pre><p>可以通过 <a href=\"http://shutter-project.org/faq-help/set-shutter-as-the-default-screenshot-tool/\" target=\"_blank\" rel=\"external\">修改快捷键使 shutter 成为默认的截图工具</a>。</p>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><pre><code>sudo yum install nfs-utils     # 挂载 NFS 文件系统所必须\nsudo yum install xclip         # 终端的文本复制工具\nsudo yum install ImageMagick   # 其中的 import 和 convert 命令很有用\nsudo yum install dos2unix unix2dos  # Windows 和 Linux 换行符互相转换\nsudo yum install meld          # 图形界面下的文件差异比较工具\n</code></pre><h2 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h2><h3 id=\"影音播放器\"><a href=\"#影音播放器\" class=\"headerlink\" title=\"影音播放器\"></a>影音播放器</h3><p>Nux Dextop 提供了 mplayer 和 VLC，可以用于播放常见格式的音频和视频，二者选其一安装即可:</p>\n<pre><code>sudo yum install mplayer\nsudo yum install vlc\n</code></pre><h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><pre><code>sudo yum install 2048-cli   # 2048 命令行版\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://elrepo.org/tiki/tiki-index.php\" target=\"_blank\" rel=\"external\">ELRepo 官方网站</a></li>\n<li><a href=\"http://elrepo.org/tiki/kmod-nvidia\" target=\"_blank\" rel=\"external\">ELRepo kmod-nvidia</a></li>\n<li><a href=\"http://wiki.centos.org/zh/AdditionalResources/Repositories/GoogleYumRepos\" target=\"_blank\" rel=\"external\">CentOS Yum 软件库样例</a></li>\n</ol>\n<h2 id=\"修订历史\"><a href=\"#修订历史\" class=\"headerlink\" title=\"修订历史\"></a>修订历史</h2><ul>\n<li>2017-04-15：初稿；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇博文记录了我用 CentOS 7 搭建 <strong>数据科学生产环境</strong> 的过程，供我个人在未来重装系统时参考。对于其他同学，也许有借鉴意义。</p>\n<p>阅读须知：</p>\n<ol>\n<li><strong>不推荐刚接触 Linux 的人使用 CentOS 发行版</strong>；</li>\n<li>本文尽量写的浅显易懂，但要求读者掌握 Linux 基础知识；</li>\n<li>本文所有操作均在 CentOS 7 下完成，其他发行版或多或少与 CentOS 7 不同，因而仅供参考；</li>\n<li>本文所安装的软件纯粹出于个人习惯及喜好，读者应自己判断，按需安装；</li>\n</ol>","more":"<h2 id=\"安装-CentOS\"><a href=\"#安装-CentOS\" class=\"headerlink\" title=\"安装 CentOS\"></a>安装 CentOS</h2><p>CentOS 7 的安装与其他 Linux 发行版的安装差不多，个别地方稍有不同。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li><p>准备材料</p>\n<ul>\n<li>U 盘：容量 2GB 以上，用于制作 U 盘启动盘，因为在制作启动盘时会格式化 U 盘，所以 U 盘内不要包含重要资料</li>\n<li><a href=\"http://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-LiveGNOME-1511.iso\">CentOS 7.2 LiveCD ISO 镜像文件</a></li>\n<li><a href=\"http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/\">Universal USB installer</a>：Windows 下的 U 盘启动盘制作工具</li>\n<li>一个已安装 Windows 的电脑：用于制作 U 盘启动盘</li>\n</ul>\n</li>\n<li><p>运行 Universal USB installer 并制作 U 盘启动盘</p>\n</li>\n<li>将 U 盘插入计算机，重启，进入 BIOS 选择从 U 盘启动，即可进入 CentOS 的 LiveCD</li>\n<li>进入 LiveCD 后，点击桌面的 “Install to Hard Drive” 即可安装</li>\n</ol>\n<p>注：Linux 下可以通过 <code>dd</code> 命令制作启动盘，但由于对原理不够了解，偶尔会导致制作失败，<br>或制作成功后 U 盘容量有问题，还是用 Windows 下的 Universal USB installer 比较靠谱。</p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h3><ol>\n<li><p>选择安装过程中使用的语言，这里应 <strong>使用英语，不要使用汉语</strong>。若安装界面使用汉语，最终安装的系统中会出现两个比较麻烦的问题：</p>\n<ol>\n<li>家目录下的系统文件夹如 Downloads、Desktop 等会以中文表示，这使得在命令行 <code>cd</code> 变得很麻烦；</li>\n<li>终端中某些字符用英文字体，某些字符用中文字体，效果非常差，需要自己修改终端字体方可；</li>\n</ol>\n</li>\n<li><p>选择区域和城市：Asia 和 Shanghai</p>\n</li>\n<li>键盘使用 English(US) 而不是 English(UK)</li>\n<li>Hostname 可以改也可以不改，我用 <code>saturn.geolab</code></li>\n<li>安装的目的地，选择要使用的硬盘，在 “Other Storage Options” 处选择“I will configure partioning”，即手动分区</li>\n</ol>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>CentOS7 的分区似乎比较特别，自认为经验很丰富的我在第一次安装 CentOS7 时还是在分区上耽误了很多时间。后来找到比较合适的分区方法，如下：</p>\n<ul>\n<li>点击 “Click here to create them automatically”，即让安装程序帮忙分区</li>\n<li>默认的分区方案是使用 LVM，其好处在于 “当机器有多块硬盘时，在使用的时候看上去只有一块”</li>\n<li>默认的文件系统为 XFS 而不是以前常用的 EXT4；</li>\n<li>自动分区完成后，再根据自己的需求，手动修改分区细节<ul>\n<li><code>/boot</code> ：CentOS 自动分配，一定不要乱改；</li>\n<li><code>/</code> ：根目录，合理使用并及时清理的话 15G 就够了，不过建议 30G 以上；</li>\n<li><code>swap</code> ：与物理内存大小一致即可</li>\n<li><code>/opt</code> ：个人习惯是将第三方软件都安装在 <code>/opt</code> 下，所以分了 70G</li>\n<li><code>/home</code> ：余下的全部空间</li>\n</ul>\n</li>\n<li>点击 “Begin to Install” 开始安装</li>\n</ul>\n<h3 id=\"真正的安装\"><a href=\"#真正的安装\" class=\"headerlink\" title=\"真正的安装\"></a>真正的安装</h3><ol>\n<li>设置 root 密码</li>\n<li>创建一般用户</li>\n<li>等待安装完成</li>\n<li>安装完成，重启</li>\n<li>重启后，同意 License 即可</li>\n</ol>\n<h2 id=\"对系统的若干修改\"><a href=\"#对系统的若干修改\" class=\"headerlink\" title=\"对系统的若干修改\"></a>对系统的若干修改</h2><h3 id=\"若干原则\"><a href=\"#若干原则\" class=\"headerlink\" title=\"若干原则\"></a>若干原则</h3><p>为了搭建一个稳定的系统，尽量避免因为各种瞎折腾而导致的系统问题，特订立了一些软件安装的原则。<br>具体参见《<a href=\"/how-to-install-softwares-under-centos-7.html\">CentOS7 下的软件安装方法与策略</a>》。</p>\n<h3 id=\"给一般账号-root-权限\"><a href=\"#给一般账号-root-权限\" class=\"headerlink\" title=\"给一般账号 root 权限\"></a>给一般账号 root 权限</h3><p>默认情况下，一般账号是没有 root 权限的。为什么不直接用 root 账号，而是要给一般账号 root 权限呢？</p>\n<ul>\n<li><strong>日常工作中使用 root 账号，是非常糟糕且危险的习惯！无论是服务器还是个人电脑都是如此。</strong></li>\n<li>安装软件时需要 root 权限，只能 <code>su</code> 切换到 root 账户再安装。对于习惯使用 <code>sudo</code> 的人来说，还是有些麻烦。</li>\n</ul>\n<p>假设账户名为 seisman，要授予他 root 权限，则要修改配置文件 <code>/etc/sudoers</code> :</p>\n<pre><code>$ su\n# echo &apos;seisman ALL=(ALL) ALL&apos;&gt;&gt; /etc/sudoers # 向配置文件中加入语句\n# tail -1 /etc/sudoers  # 检查一下是否正确\nseisman ALL=(ALL) ALL\n</code></pre><p>其中 seisman 为当前用户名。</p>\n<h3 id=\"添加第三方源\"><a href=\"#添加第三方源\" class=\"headerlink\" title=\"添加第三方源\"></a>添加第三方源</h3><p>CentOS 由于很追求稳定性，所以官方源中自带的软件不多，因而需要一些第三方源，比如<br>EPEL、ATrpms、ELRepo、Nux Dextop、RepoForge 等。根据上面提到的软件安装原则，为了尽<br>可能保证系统的稳定性，此处大型第三方源只添加 EPEL 源、Nux Dextop 和 ELRepo 源。</p>\n<h4 id=\"EPEL\"><a href=\"#EPEL\" class=\"headerlink\" title=\"EPEL\"></a>EPEL</h4><p><a href=\"https://fedoraproject.org/wiki/EPEL\">EPEL</a> 即 Extra Packages for Enterprise Linux，<br>为 CentOS 提供了额外的 10000 多个软件包，而且在不替换系统组件方面下了很多功夫，因而可以放心使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install epel-release</div></pre></td></tr></table></figure>\n<p>执行完该命令后，在 <code>/etc/yum.repos.d</code> 目录下会多一个 <code>epel.repo</code> 文件。</p>\n<!-- #### Nux Dextop\n\n[Nux Dextop](http://li.nux.ro/repos.html) 中包含了一些与多媒体相关的软件包，作者尽量\n保证不覆盖 base 源。官方说明中说该源与 EPEL 兼容，实际上个别软件包存在冲突，但基本不会造成影响:\n\n    sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n\n完成该命令后，在 `/etc/yum.repos.d` 目录下会多一个 `nux-dextop.repo` 文件。-->\n<h4 id=\"ELRepo\"><a href=\"#ELRepo\" class=\"headerlink\" title=\"ELRepo\"></a>ELRepo</h4><p>ELRepo 包含了一些硬件相关的驱动程序，比如显卡、声卡驱动:</p>\n<pre><code>sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nsudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\n</code></pre><p>完成该命令后，在 <code>/etc/yum.repos.d</code> 目录下会多一个 <code>elrepo.repo</code> 文件。</p>\n<h3 id=\"安装-yum-axelget\"><a href=\"#安装-yum-axelget\" class=\"headerlink\" title=\"安装 yum-axelget\"></a>安装 yum-axelget</h3><p><a href=\"https://dl.fedoraproject.org/pub/epel/7/x86_64/repoview/yum-axelget.html\">yum-axelget</a> 是 EPEL<br>提供的一个 yum 插件。使用该插件后用 yum 安装软件时可以并行下载，大大提高了软件的下载速度，减少了下载的等待时间:</p>\n<pre><code>sudo yum install yum-axelget\n</code></pre><p>安装该插件的同时会安装另一个软件 axel。axel 是一个并行下载工具，在下载 http、ftp 等简单协议的文件时非常好用。</p>\n<h3 id=\"第一次全面更新\"><a href=\"#第一次全面更新\" class=\"headerlink\" title=\"第一次全面更新\"></a>第一次全面更新</h3><p>在进一步操作之前，先把已经安装的软件包都升级到最新版:</p>\n<pre><code>sudo yum update\n</code></pre><p>要更新的软件包有些多，可能需要一段时间。不过有了 yum-axelget 插件，速度已经快了很多啦。</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>第一次全面更新完之后建议重启。</p>\n<h3 id=\"删除多余的-kernel\"><a href=\"#删除多余的-kernel\" class=\"headerlink\" title=\"删除多余的 kernel\"></a>删除多余的 kernel</h3><p>在前面的 <code>yum update</code> 执行之后，可能会将 kernel 也一起更新，则在启动 CentOS 时启动项中会有很多项。</p>\n<p>确认当前使用的 kernel 版本号:</p>\n<pre><code>$ uname -r\n3.10.0-123.9.3.el7.x86_64\n</code></pre><p>查找当前系统安装的所有 kernel:</p>\n<pre><code>$ rpm -qa | grep kernel | sort\nkernel-3.10.0-123.8.1.el7.x86_64\nkernel-3.10.0-123.9.2.el7.x86_64\nkernel-3.10.0-123.9.3.el7.x86_64\nkernel-devel-3.10.0-123.8.1.el7.x86_64\nkernel-devel-3.10.0-123.9.2.el7.x86_64\nkernel-devel-3.10.0-123.9.3.el7.x86_64\nkernel-headers-3.10.0-123.9.3.el7.x86_64\nkernel-tools-3.10.0-123.9.3.el7.x86_64\nkernel-tools-libs-3.10.0-123.9.3.el7.x86_64\n</code></pre><p>可以看出有三个版本的 kernel，123.8.1、123.9.2 和 123.9.3。除了最新的 kernel 外，建议多保留一个旧 kernel，以免新 kernel 出现问题时可以通过旧 kernel 进入系统。因而此处删除 123.8.1 版本的 kernel:</p>\n<pre><code>sudo yum remove kernel-3.10.0-123.8.1.el7.x86_64\nsudo yum remove kernel-devel-3.10.0-123.8.1.el7.x86_64\n</code></pre><h2 id=\"基础开发环境\"><a href=\"#基础开发环境\" class=\"headerlink\" title=\"基础开发环境\"></a>基础开发环境</h2><h3 id=\"GCC-系列\"><a href=\"#GCC-系列\" class=\"headerlink\" title=\"GCC 系列\"></a>GCC 系列</h3><pre><code>sudo yum install gcc                     # C 编译器\nsudo yum install gcc-c++                 # C++ 编译器\nsudo yum install gcc-gfortran            # Fortran 编译器\nsudo yum install compat-gcc-44           # 兼容 gcc 4.4\nsudo yum install compat-gcc-44-c++       # 兼容 gcc-c++ 4.4\nsudo yum install compat-gcc-44-gfortran  # 兼容 gcc-fortran 4.4\nsudo yum install compat-libf2c-34        # g77 3.4.x 兼容库\n</code></pre><h3 id=\"软件开发辅助工具\"><a href=\"#软件开发辅助工具\" class=\"headerlink\" title=\"软件开发辅助工具\"></a>软件开发辅助工具</h3><pre><code>sudo yum install make\nsudo yum install gdb     # 代码调试器\nsudo yum install cmake   # Cmake\nsudo yum install git     # 版本控制\n</code></pre><h2 id=\"驱动程序\"><a href=\"#驱动程序\" class=\"headerlink\" title=\"驱动程序\"></a>驱动程序</h2><h3 id=\"显卡驱动\"><a href=\"#显卡驱动\" class=\"headerlink\" title=\"显卡驱动\"></a>显卡驱动</h3><p>Linux 默认只使用开源的显卡驱动，就目前的情况来看，开源驱动的效果还是不错的，但跟官方的<br>闭源驱动相比还是有一定差距。最明显的区别是，在使用 SAC 的 ppk 功能放大波形时，使用开源驱动会<br>出现延迟，而使用官方闭源则整个过程非常顺畅。</p>\n<p>关于显卡驱动的安装，请参考 <a href=\"/install-nvidia-drivers-under-linux.html\">Linux 下安装 nvidia 显卡驱动</a><br>一文中的 “从 ELRepo 源中安装驱动” 部分。</p>\n<p><strong>注意</strong>：目前的显卡驱动似乎有问题，安装后终端有时会出现屏幕闪烁、一屏文字上下重复跳动的情况，<br>稍微有些影响用 vim 写代码。是否要安装显卡驱动自己决定。</p>\n<h3 id=\"NTFS-驱动\"><a href=\"#NTFS-驱动\" class=\"headerlink\" title=\"NTFS 驱动\"></a>NTFS 驱动</h3><p>CentOS 下默认无法挂载 NTFS 格式的硬盘。需安装 nfts-3g 即可实现即插即用:</p>\n<pre><code>sudo yum install ntfs-3g\n</code></pre><h2 id=\"进阶开发环境\"><a href=\"#进阶开发环境\" class=\"headerlink\" title=\"进阶开发环境\"></a>进阶开发环境</h2><h3 id=\"Java-环境\"><a href=\"#Java-环境\" class=\"headerlink\" title=\"Java 环境\"></a>Java 环境</h3><p>Java 的一大特色在于跨平台，安装了 Java 运行环境，即可运行 Java 程序:</p>\n<pre><code>sudo yum install java                        # java 运行环境\n</code></pre><h3 id=\"Clang-系列\"><a href=\"#Clang-系列\" class=\"headerlink\" title=\"Clang 系列\"></a>Clang 系列</h3><p>Clang 可以认为是 GCC 的替代品，可以用于编译 C、C++、Objective-C 和 Objective-C++。其提供了更友好的<br>报错信息，在有些方面比 GCC 更友好，同时其提供了一个代码静态分析器，可以用于分析代码中可能出现的 bug 和内存溢出问题。</p>\n<pre><code>sudo yum install clang             # clang 编译器\nsudo yum install clang-analyzer    # clang 静态分析器\n</code></pre><h3 id=\"Intel-系列\"><a href=\"#Intel-系列\" class=\"headerlink\" title=\"Intel 系列\"></a>Intel 系列</h3><p>Intel 的大部分软件都是非开源且收费的，但同时部分软件也提供了 Linux 下的非商业免费版。<br>比如 icc、mkl 数学库以及代码性能分析工具等。</p>\n<p>Intel 软件的申请以及安装参考《<a href=\"/intel-non-commercial-software.html\">Intel 非商业免费开发工具</a>》。</p>\n<p>还有一点需要注意的是，Intel 也提供了并行相关的几个命令，比如 mpicc、mpirun。所以 openmpi、mpich<br>和 intel 三者，在并行时只能用其中一个。</p>\n<h3 id=\"并行计算\"><a href=\"#并行计算\" class=\"headerlink\" title=\"并行计算\"></a>并行计算</h3><p>并行可以用 openmpi，也可以用 mpich，二者的功能可以认为是完全相同的。由于二者提供了几乎一样的命令，<br>所以二者可以同时安装，但是不可以同时处于使用状态。</p>\n<h4 id=\"openmpi\"><a href=\"#openmpi\" class=\"headerlink\" title=\"openmpi\"></a>openmpi</h4><p>安装 openmpi:</p>\n<pre><code>sudo yum install openmpi openmpi-devel\n</code></pre><p>安装后，二进制文件位于 <code>/usr/lib64/openmpi/bin</code> 下，动态库文件位于 <code>/usr/lib64/openmpi/lib</code><br>下，因而实际使用的话还需要额外的配置，在 <code>.bashrc</code> 中加入如下语句:</p>\n<pre><code>export PATH=/usr/lib64/openmpi/bin/:${PATH}\nmodule load mpi/openmpi-x86_64\n</code></pre><p>PS：要使用 <code>module</code> 命令需要先安装 <code>environment-modules</code> 包。</p>\n<h4 id=\"mpich\"><a href=\"#mpich\" class=\"headerlink\" title=\"mpich\"></a>mpich</h4><p>安装 mpich:</p>\n<pre><code>sudo yum install mpich mpich-devel\n</code></pre><p>安装后，二进制文件位于 <code>/usr/lib64/mpich/bin</code> 下，动态库文件位于 <code>/usr/lib64/mpich/lib</code> 下，<br>因而实际使用的话还需要额外的配置，在 <code>.bashrc</code> 中加入如下语句:</p>\n<pre><code>export PATH=/usr/lib64/mpich/bin/:${PATH}\nmodule load mpi/mpich-x86_64\n</code></pre><h2 id=\"脚本语言环境\"><a href=\"#脚本语言环境\" class=\"headerlink\" title=\"脚本语言环境\"></a>脚本语言环境</h2><h3 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h3><p>CentOS 7.0 自带了 Perl 5.16.3（2013 年 03 月 11 日发布），目前的最新版本为 5.20.1（2014 年 09 月 14 日发布）。</p>\n<h4 id=\"系统自带-Perl\"><a href=\"#系统自带-Perl\" class=\"headerlink\" title=\"系统自带 Perl\"></a>系统自带 Perl</h4><p>系统自带 Perl，就目前来看，版本不算老，基本够用。官方源和 EPEL 源中提供了 1000 多个模块，可以直接用 yum 安装:</p>\n<pre><code>sudo yum install perl-Parallel-ForkManager  # 并行模块\n</code></pre><p>若源中没有已打包好的模块，也可以使用 perl 自带的 cpan 来安装模块。</p>\n<p>优先级：yum &gt; cpan。</p>\n<h4 id=\"plenv-管理新版本\"><a href=\"#plenv-管理新版本\" class=\"headerlink\" title=\"plenv 管理新版本\"></a>plenv 管理新版本</h4><p>若需要使用最新版本的 perl，可以使用 <a href=\"/perl-plenv.html\">plenv</a> 安装新版本的 perl，并使用 plenv 提供的 cpanm 命令安装模块:</p>\n<pre><code>cpanm install Parallel::ForkManager # 并行模块\n</code></pre><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>CentOS 7.0 自带 Python 2.7.5，目前 Python 2 的最新版本为 2.7.8，Python 3 的最新版本为 3.4.2。</p>\n<h4 id=\"系统自带-Python\"><a href=\"#系统自带-Python\" class=\"headerlink\" title=\"系统自带 Python\"></a>系统自带 Python</h4><p>系统自带的 Python 2.7.5，基本已经够用，Python 2 常用的模块在官方源或 EPEL 源中也有有编译好的包，<br>因而直接通过 yum 安装即可:</p>\n<pre><code>sudo yum install python-matplotlib  # 2D 绘图库\nsudo yum install PyQt4  # Qt4 的 Python 绑定\nsudo yum install numpy  # 数组操作库\nsudo yum install scipy  # 科学计算库\nsudo yum install python-requests  # 网页请求\nsudo yum install python-docopt  # 命令行参数分析器\nsudo yum install gdal-python    # gdal 的 Python 绑定\n</code></pre><h4 id=\"pyenv-管理-Python3\"><a href=\"#pyenv-管理-Python3\" class=\"headerlink\" title=\"pyenv 管理 Python3\"></a>pyenv 管理 Python3</h4><p>Python2 与 Python3 之间是不完全兼容的，而我以 Python3 为主，所以需要安装一个 Python3。</p>\n<p>首先，安装 <a href=\"/python-pyenv.html\">pyenv</a> 来管理多个 Python 版本，然后利用 pyenv 安装 anaconda3<br>（即 Python3.4）。anaconda 自带了众多科学计算所需的包，免去了安装的麻烦，对于其他包，<br>则可以利用 Python 自带的 pip 安装:</p>\n<pre><code>pip install requests\npip install docopt\n</code></pre><h2 id=\"编程相关软件\"><a href=\"#编程相关软件\" class=\"headerlink\" title=\"编程相关软件\"></a>编程相关软件</h2><h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><p>写代码的时候选一个好用的编辑器很重要，用的比较多的编辑器如下：</p>\n<ol>\n<li>vim</li>\n<li>emacs</li>\n<li>atom</li>\n<li>sublime text 3</li>\n<li>Visual Studio Code</li>\n</ol>\n<h3 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h3><ul>\n<li>Python IDE：<a href=\"https://www.jetbrains.com/pycharm/\">PyCharm Community Edition</a></li>\n</ul>\n<h2 id=\"日常软件\"><a href=\"#日常软件\" class=\"headerlink\" title=\"日常软件\"></a>日常软件</h2><h3 id=\"Office-套件\"><a href=\"#Office-套件\" class=\"headerlink\" title=\"Office 套件\"></a>Office 套件</h3><h4 id=\"LibreOffice\"><a href=\"#LibreOffice\" class=\"headerlink\" title=\"LibreOffice\"></a>LibreOffice</h4><p>大多数 Linux 发行版都自带 LibreOffice:</p>\n<pre><code>sudo yum install libreoffice\n</code></pre><p>LibreOffice 与 Microsoft Office 的兼容性不太好，操作界面与 MS Office 也有较大差异，让人不太习惯。</p>\n<h4 id=\"WPS-Office\"><a href=\"#WPS-Office\" class=\"headerlink\" title=\"WPS Office\"></a>WPS Office</h4><p>若在 Linux 下对于文档处理有更高一些的要求，可以尝试目前还处于测试版的 WPS Office for Linux。<br>WPS Office 的兼容性以及界面都比 LibreOffice 要好很多，值得期待，当然还是不能做到完全兼容 MS<br>Office。</p>\n<p>安装过程参考 <a href=\"/wps-office-for-centos7.html\">CentOS 下安装 WPS Office</a> 一文。</p>\n<h3 id=\"PS-PDF-阅读器\"><a href=\"#PS-PDF-阅读器\" class=\"headerlink\" title=\"PS/PDF 阅读器\"></a>PS/PDF 阅读器</h3><p>系统自带的 evince 阅读器，可以打开 PS 和 PDF 文件，基本足够日常的使用了。</p>\n<h4 id=\"zathura\"><a href=\"#zathura\" class=\"headerlink\" title=\"zathura\"></a>zathura</h4><p>zathura 可以查看 PS、PDF、djvu 格式的文件，可以作为 evince 的替代品:</p>\n<pre><code>sudo yum install zathura zathura-plugins-all\n</code></pre><h4 id=\"ghostscript\"><a href=\"#ghostscript\" class=\"headerlink\" title=\"ghostscript\"></a>ghostscript</h4><pre><code>sudo yum install ghostscript\n</code></pre><h4 id=\"master-pdf-editor\"><a href=\"#master-pdf-editor\" class=\"headerlink\" title=\"master-pdf-editor\"></a>master-pdf-editor</h4><p>官方网站: <a href=\"https://code-industry.net/free-pdf-editor/\">https://code-industry.net/free-pdf-editor/</a></p>\n<pre><code>sudo yum localinstall http://get.code-industry.net/public/master-pdf-editor3-3.2.62-1.x86_64.rpm\n</code></pre><h3 id=\"TeX-Live-2015\"><a href=\"#TeX-Live-2015\" class=\"headerlink\" title=\"TeX Live 2015\"></a>TeX Live 2015</h3><p>系统是自带了 TeXLive，版本较老，还是安装最新版比较好。</p>\n<p>参考 <a href=\"/install-texlive-under-linux.html\">Linux 下安装 TeXLive</a> 一文。</p>\n<h3 id=\"Mendeley\"><a href=\"#Mendeley\" class=\"headerlink\" title=\"Mendeley\"></a>Mendeley</h3><p>Mendeley 是一个跨平台的文献管理软件，其内部自带了一个可以添加注释的 PDF 阅读器。</p>\n<p>下载 Generic Linux (64 bits)：<a href=\"http://www.mendeley.com/download-mendeley-desktop\">http://www.mendeley.com/download-mendeley-desktop</a></p>\n<p>安装:</p>\n<pre><code>tar -xvf mendeleydesktop-1.12.3-linux-x86_64.tar.bz2  # 解压\nsudo mv mendeleydesktop /opt  # 复制到 / opt 下\ncd /opt/mendeleydesktop/bin   # cd 进去\n./install-mendeley-link-handler.sh /opt/mendeleydesktop/bin/mendeleydesktop\nsudo yum install qtwebkit  # 安装依赖包\n</code></pre><p>注销重新登陆，在 Application-&gt;Education 下即可看到 mendeley 的相关项目。不过是<br>没有软件的图标的，强迫症不能忍，用下面的命令解决:</p>\n<pre><code>cp /opt/mendeleydesktop/share/icons/hicolor/128x128/apps/mendeleydesktop.png ~/.local/share/icons/\n</code></pre><h3 id=\"Google-Chrome-浏览器\"><a href=\"#Google-Chrome-浏览器\" class=\"headerlink\" title=\"Google Chrome 浏览器\"></a>Google Chrome 浏览器</h3><p>默认的浏览器是 Firefox，还是更喜欢 Chrome 浏览器。</p>\n<p>Google 官方源在国内可能无法正常访问，故而添加 Fedora 中文社区提供的镜像源:</p>\n<pre><code>sudo wget http://repo.fdzh.org/chrome/google-chrome-mirrors.repo -P /etc/yum.repos.d/\n</code></pre><p>安装:</p>\n<pre><code>sudo yum install google-chrome-stable\n</code></pre><h3 id=\"Opera-浏览器\"><a href=\"#Opera-浏览器\" class=\"headerlink\" title=\"Opera 浏览器\"></a>Opera 浏览器</h3><p>也可以选择 Opera 浏览器。</p>\n<p>下载地址：<a href=\"http://www.opera.com/download/guide/?os=linux\">http://www.opera.com/download/guide/?os=linux</a></p>\n<p>选择 CentOS RPM package 进行下载。下载完成后，执行:</p>\n<pre><code>sudo yum localinstall opera-12.16-1860.x86_64.rpm\n</code></pre><p>想要卸载的话，就执行:</p>\n<pre><code>sudo yum remove opera\n</code></pre><h3 id=\"Flash-插件\"><a href=\"#Flash-插件\" class=\"headerlink\" title=\"Flash 插件\"></a>Flash 插件</h3><p>Flash 插件主要是看在线视频的时候要用。Google 浏览器自带了 Flash 插件，所以这里安装的 flash 插件主要是为了 firefox。</p>\n<pre><code>sudo rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm\nsudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux\nsudo yum install flash-plugin\n</code></pre><h3 id=\"解压软件\"><a href=\"#解压软件\" class=\"headerlink\" title=\"解压软件\"></a>解压软件</h3><p>解压 7z 或 zip 格式需要 p7zip，由 EPEL 提供:</p>\n<pre><code>sudo yum install p7zip\n</code></pre><p>解压 rar 格式可以使用 <a href=\"https://unarchiver.c3.cx/commandline\">unar</a>，该软件位于 EPEL 源中：</p>\n<pre><code>sudo yum install unar\n</code></pre><h3 id=\"FTP-客户端\"><a href=\"#FTP-客户端\" class=\"headerlink\" title=\"FTP 客户端\"></a>FTP 客户端</h3><p>FTP 客户端，还是有界面的 filezilla 比较方便些。</p>\n<pre><code>sudo yum install filezilla\n</code></pre><h3 id=\"Google-Earth\"><a href=\"#Google-Earth\" class=\"headerlink\" title=\"Google Earth\"></a>Google Earth</h3><p>到 <a href=\"https://www.google.com/earth/download/ge/agree.html\">https://www.google.com/earth/download/ge/agree.html</a> 下载64位rpm包，执行如下命令安装:</p>\n<pre><code>sudo yum localinstall google-earth-stable_current_x86_64.rpm\n</code></pre><h2 id=\"效率类软件\"><a href=\"#效率类软件\" class=\"headerlink\" title=\"效率类软件\"></a>效率类软件</h2><p>这一类工具能够在不同方面提高科研的效率，也提高了使用者的体验。</p>\n<h3 id=\"终端模拟器\"><a href=\"#终端模拟器\" class=\"headerlink\" title=\"终端模拟器\"></a>终端模拟器</h3><p>Gnome 自带的终端模拟器是 gnome-terminal。经常会需要开十几个终端，切换和管理起来比较麻烦。</p>\n<h4 id=\"terminator\"><a href=\"#terminator\" class=\"headerlink\" title=\"terminator\"></a>terminator</h4><p>terminator 有很多功能，我只用到了终端分割的功能。 <code>Ctrl+Shift+O</code> 对终端水平分隔，<br><code>Ctrl+Shift+E</code> 对终端垂直分隔， <code>Alt + 上下左右</code> 可以在各子终端中切换。terminator 由 Nux Dextop 提供:</p>\n<pre><code>sudo yum install terminator\n</code></pre><h4 id=\"guake\"><a href=\"#guake\" class=\"headerlink\" title=\"guake\"></a>guake</h4><p>有些时候需要临时执行一两个命令，但是又不想额外启动一个终端的情况下，guake 是个不错的选择。</p>\n<pre><code>sudo yum install guake\n</code></pre><p>安装完成后，在 Application-&gt;System Tools 里找到 guake Terminal 即可启动。按下 F12<br>即可呼出 guake，再次按下 F12 即可隐藏。也可在终端执行 <code>guake-prefs</code> 对 gauke 进行配置。</p>\n<h3 id=\"zsh-与-oh-my-zsh\"><a href=\"#zsh-与-oh-my-zsh\" class=\"headerlink\" title=\"zsh 与 oh my zsh\"></a>zsh 与 oh my zsh</h3><p>Linux 下有很多 shell，比如最常见的 bash，除此之外还有 csh、ksh。zsh 也是一个 shell。</p>\n<p>zsh 的特点在于：</p>\n<ul>\n<li>语法基本完全兼容于 bash，一般用户完全体会不到其区别</li>\n<li>zsh 提供命令补全特性，比 bash 的补全要更好用</li>\n<li>可配置性强</li>\n</ul>\n<p>完全不经配置的 zsh 已经很好用了，一般用户也没必要花时间研究配置。<br><a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh my zsh</a> 是一群人一起维护的一套 zsh 配置文件。<br>直接用这个配置文件，稍稍了解一点会有更好的体验。</p>\n<p>安装 zsh:</p>\n<pre><code>sudo yum install zsh\n</code></pre><p>安装 oh my zsh:</p>\n<pre><code>curl -L http://install.ohmyz.sh | sh\n</code></pre><p>上面的命令，做了如下几件事情：</p>\n<ul>\n<li>下载 <code>oh my zsh</code> 到 <code>~/.oh-my-zsh</code></li>\n<li>备份已有的 zsh 配置文件 <code>~/.zshrc</code> ，并复制新的 <code>.zshrc</code> 文件</li>\n<li>将当前用户的默认 shell 由 bash 改成 zsh</li>\n</ul>\n<p>第三步中，会报错如下： <code>chsh: &quot;/usr/bin/zsh&quot; is not listed in /etc/shells.</code> ，需要手动修改默认 shell:</p>\n<pre><code>chsh -s /bin/zsh\n</code></pre><p>chsh 命令修改的是 login shell，因而需要退出当前用户并重新登陆，以后用户的默认 shell<br>就从 bash 变成了 zsh，所有的配置都不用写到 <code>.bashrc</code> 而要写到 <code>.zshrc</code> 中。</p>\n<p>在 <code>.zshrc</code> 中可以选择喜欢的主题，以及适当数量的插件。下面列出我在用的插件:</p>\n<ol>\n<li><p>git</p>\n<p>该插件为 git 的众多常用命令提供了更简单的别名，比如 <code>git status</code> 的别名是 <code>gst</code>，<br>大大减少了击键数。但该插件中 <code>git mergetool --no-prompt</code> 的别名是 <code>gmt</code>，<br>与 GMT 软件冲突，需要将该插件的目录 git 复制到 custom/plugins 下，然后删除其中的 gmt 别名；</p>\n</li>\n<li><p>命令补全插件: pip, pyenv</p>\n</li>\n<li>sudo：按两下 <code>ESC</code> 即可在当前命令前加上 <code>sudo</code></li>\n<li>yum：为常见的 yum 命令提供别名</li>\n</ol>\n<h3 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h3><p><a href=\"https://github.com/joelthelion/autojump\">autojump</a> 是一个非常智能的目录快速切换的工具。简单演示如下:</p>\n<pre><code>$ pwd\n/home/seisman\n$ cd Desktop\n$ cd /opt\n$ cd /usr/local\n\n# 用 j 命令迅速从 / usr/local 跳转到与 des 匹配的目录，这里只有 Desktop 可以匹配\n$ j des\n$ pwd\n/home/seisman/Desktop\n</code></pre><p>用法差不多就这样，具体看项目主页。</p>\n<p>安装:</p>\n<pre><code>sudo yum install autojump\nsudo yum install autojump-zsh\n</code></pre><h3 id=\"中文输入法\"><a href=\"#中文输入法\" class=\"headerlink\" title=\"中文输入法\"></a>中文输入法</h3><p>由于使用的是全英文安装，所以默认是没有中文输入法的。</p>\n<p>在“Application”-&gt;“Settings”-&gt;“Region &amp; Language” 中将“Chinese（Intelligent Pinyin）”添加到“Input Sources” 中即可使用中文输入法。默认使用“Shift”键切换中文输入法。</p>\n<h3 id=\"等宽字体\"><a href=\"#等宽字体\" class=\"headerlink\" title=\"等宽字体\"></a>等宽字体</h3><p>编程要用等宽字体，这点是常识了。一款适合编程的等宽字体，至少要满足如下几个要求：</p>\n<ol>\n<li>易于区分 “1”、“i” 和“l”</li>\n<li>易于区分 “0”、“o” 和“O”</li>\n<li>易于区分中文下的左引号和右引号</li>\n<li>美观</li>\n</ol>\n<p>目前选择的 Source Code Pro。将解压后的字体文件放在 <code>~/.fonts</code> 目录下，并修改终端、gedit 以及其他编辑器、IDE 等的默认字体。</p>\n<h2 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h2><p>有时候可能需要在 Windows 下做一些操作，如果机器性能足够好的话，可以安装虚拟机。</p>\n<h3 id=\"VirtualBox-虚拟机\"><a href=\"#VirtualBox-虚拟机\" class=\"headerlink\" title=\"VirtualBox 虚拟机\"></a>VirtualBox 虚拟机</h3><p>VirtuabBox 的安装:</p>\n<pre><code>wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo\nsudo mv virtualbox.repo /etc/yum.repos.d/\nsudo yum install VirtualBox-5.0\n</code></pre><p>需要注意两点：</p>\n<ul>\n<li>若机器性能不够，虚拟机的使用体验会非常差，所以不建议在老机器上使用；</li>\n<li>更新 kernel 之后需要执行 <code>sudo /sbin/rcvboxdrv setup</code> ；</li>\n<li>在 VirtualBox 安装虚拟系统后，记得使用 “设备”-&gt;“安装增强功能”，使用效果会更好；</li>\n</ul>\n<h3 id=\"gnome-boxes\"><a href=\"#gnome-boxes\" class=\"headerlink\" title=\"gnome-boxes\"></a>gnome-boxes</h3><p>gnome-boxes 是 GNOME3 开发的一个虚拟机工具，使用体验不如 VirtualBox:</p>\n<pre><code>sudo yum install gnome-boxes\n</code></pre><h3 id=\"Wine\"><a href=\"#Wine\" class=\"headerlink\" title=\"Wine\"></a>Wine</h3><p>Wine 是一个可以让 Windows 程序运行在 Linux 下的软件。类似虚拟机，但跟虚拟机又不太一样:</p>\n<pre><code>sudo yum install wine\n</code></pre><h2 id=\"同步网盘\"><a href=\"#同步网盘\" class=\"headerlink\" title=\"同步网盘\"></a>同步网盘</h2><p>网盘根据功能大概可以分为两类：同步网盘和备份网盘。既然是同步网盘，Linux 下<br>的客户端必不可少。就目前已知的情况来看，CentOS7 下能使用的同步网盘只有三个：<br>Dropbox、MEGA 和坚果云。</p>\n<p>我主要用同步网盘将 Linux 机器上的 PDF 文献同步到 iPad 上。</p>\n<h3 id=\"Dropbox\"><a href=\"#Dropbox\" class=\"headerlink\" title=\"Dropbox\"></a>Dropbox</h3><p>又是一个被墙的工具，熟练掌握科学上网技巧的人可以使用，一般人还是不要用了。</p>\n<pre><code>wget https://www.dropbox.com/download?dl=packages/fedora/nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\nsudo rpm -i nautilus-dropbox-1.6.2-1.fedora.x86_64.rpm\n</code></pre><h3 id=\"MEGA\"><a href=\"#MEGA\" class=\"headerlink\" title=\"MEGA\"></a>MEGA</h3><p>MEGA： <a href=\"https://mega.co.nz/\">https://mega.co.nz/</a></p>\n<p>免费容量 50G，作为同步盘来说基本是够用了。</p>\n<pre><code># 下载主程序\nwget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/megasync-CentOS_7.x86_64.rpm\n# 下载文件管理器扩展（可选）\nwget https://mega.nz/linux/MEGAsync/CentOS_7/x86_64/nautilus-megasync-CentOS_7.x86_64.rpm\nsudo yum localinstall megasync-CentOS_7.x86_64.rpm\nsudo yum localinstall nautilus-megasync-CentOS_7.x86_64.rpm\n</code></pre><h3 id=\"坚果云\"><a href=\"#坚果云\" class=\"headerlink\" title=\"坚果云\"></a>坚果云</h3><p>国内的全平台同步网盘，不限空间，但限制每月上传流量 1G，下载流量 3G。</p>\n<pre><code># 坚果云依赖于 notify-python\nsudo yum install notify-python\n# 下载\nwget https://jianguoyun.com/static/exe/installer/fedora/nautilus_nutstore_amd64.rpm\nsudo rpm -i nautilus_nutstore_amd64.rpm\n</code></pre><h2 id=\"工具软件\"><a href=\"#工具软件\" class=\"headerlink\" title=\"工具软件\"></a>工具软件</h2><h3 id=\"视频下载工具\"><a href=\"#视频下载工具\" class=\"headerlink\" title=\"视频下载工具\"></a>视频下载工具</h3><p><a href=\"https://github.com/soimort/you-get\">you-get</a> 和 <a href=\"https://github.com/rg3/youtube-dl\">youtube-dl</a><br>是两个用于从视频网站上下载视频文件的工具。其中，后者支持的网站更多，但前者对国内的视频网站支持更好。</p>\n<pre><code>pip install you-get\npip install youtube-dl\n# EPEL 中提供了 youtube-dl 包，因而也可以使用 yum 安装。一般来说，pip 安装的版本更新一些\n</code></pre><h3 id=\"PDF-处理工具\"><a href=\"#PDF-处理工具\" class=\"headerlink\" title=\"PDF 处理工具\"></a>PDF 处理工具</h3><p><a href=\"http://community.coherentpdf.com/\">cpdf</a> 是一个跨平台的 PDF 处理工具，可以完成常见的 PDF 合并、<br>切割、加密解密、书签、水印等功能。</p>\n<p>下载已编译好的 <a href=\"https://github.com/coherentgraphics/cpdf-binaries/archive/master.zip\">二进制包</a>，<br>解压，并将与自己的平台对应的二进制文件复制到 <code>${HOME}/bin</code> 目录下即可使用。</p>\n<h3 id=\"BT-软件\"><a href=\"#BT-软件\" class=\"headerlink\" title=\"BT 软件\"></a>BT 软件</h3><p>transmission 是 Linux 下常用的 Torrent 下载软件:</p>\n<pre><code>sudo yum install transmission\n</code></pre><p>在 “Application”-&gt;“Internet”-&gt; 中可以启动 transmission。</p>\n<h3 id=\"uGet\"><a href=\"#uGet\" class=\"headerlink\" title=\"uGet\"></a>uGet</h3><p><a href=\"http://ugetdm.com/\">http://ugetdm.com/</a></p>\n<p>uGet 是 Linux 下的一个下载工具，支持 HTTP、HTTPS、FTP、Torrent 等，支持多连接，并可以监视剪贴板:</p>\n<pre><code>sudo yum --enablerepo=epel-testing install uget aria2\n</code></pre><h3 id=\"截图软件-shutter\"><a href=\"#截图软件-shutter\" class=\"headerlink\" title=\"截图软件 shutter\"></a>截图软件 shutter</h3><p>GNOME 自带了截图工具。 <code>PrtScn</code> 为截取整个屏幕； <code>Alt+PrtScn</code> 为截取当前窗口；<br><code>Shift+PrtScn</code> 为自定义截屏区域。</p>\n<p><a href=\"http://shutter-project.org/\">shutter</a> 是一个功能更强大的截图工具，支持不同的截图方式、<br>图片格式，还支持图片的简单编辑与注释:</p>\n<pre><code>sudo yum install shutter\n</code></pre><p>可以通过 <a href=\"http://shutter-project.org/faq-help/set-shutter-as-the-default-screenshot-tool/\">修改快捷键使 shutter 成为默认的截图工具</a>。</p>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><pre><code>sudo yum install nfs-utils     # 挂载 NFS 文件系统所必须\nsudo yum install xclip         # 终端的文本复制工具\nsudo yum install ImageMagick   # 其中的 import 和 convert 命令很有用\nsudo yum install dos2unix unix2dos  # Windows 和 Linux 换行符互相转换\nsudo yum install meld          # 图形界面下的文件差异比较工具\n</code></pre><h2 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h2><h3 id=\"影音播放器\"><a href=\"#影音播放器\" class=\"headerlink\" title=\"影音播放器\"></a>影音播放器</h3><p>Nux Dextop 提供了 mplayer 和 VLC，可以用于播放常见格式的音频和视频，二者选其一安装即可:</p>\n<pre><code>sudo yum install mplayer\nsudo yum install vlc\n</code></pre><h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><pre><code>sudo yum install 2048-cli   # 2048 命令行版\n</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"http://elrepo.org/tiki/tiki-index.php\">ELRepo 官方网站</a></li>\n<li><a href=\"http://elrepo.org/tiki/kmod-nvidia\">ELRepo kmod-nvidia</a></li>\n<li><a href=\"http://wiki.centos.org/zh/AdditionalResources/Repositories/GoogleYumRepos\">CentOS Yum 软件库样例</a></li>\n</ol>\n<h2 id=\"修订历史\"><a href=\"#修订历史\" class=\"headerlink\" title=\"修订历史\"></a>修订历史</h2><ul>\n<li>2017-04-15：初稿；</li>\n</ul>"},{"title":"Mac生产力配置备忘","author":"Messiah","comments":1,"date":"2017-04-10T03:15:00.000Z","_content":"# Mac生产力配置备忘\n\n## 如何配置一个高效的 Mac 工作环境\n\n[English Version](/2017/05/01/Productive-Configuration-For-Mac/)\n\n## Table of Contents\n\n1. [OS X](#1-os-x)\n\n   - [功能键](#功能键)\n   - [全键盘控制](#全键盘控制)\n   - [Spotlight 快捷键](#spotlight-快捷键)\n   - [输入法快捷键](#输入法快捷键)\n   - [其他快捷键](#其他快捷键)\n   - [设置 Trackpad 轻点来点按](#设置-trackpad-轻点来点按)\n   - [语音](#语音)\n   - [词典](#词典)\n   - [Dock Position](#dock-position)\n   - [更改 Caps Lock 键为 Control 键](#更改-caps-lock-键为-control-键)\n   - [Remove all Dock icons[OCD]](#remove-all-dock-iconsocd)\n   - [重置 Launchpad 上图标位置[OCD]](#重置-launchpad-上图标位置ocd)\n   - [创建大小写敏感的工作区](#创建大小写敏感的工作区)\n   - [Keychain Access](#keychain-access)\n\n2. [常用工具](#2-常用工具)\n\n   - [Homebrew](#homebrew)\n   - [Homebrew Cask](#homebrew-cask)\n   - [iTerm2](#iterm2)\n   - [Oh My Zsh](#oh-my-zsh)\n   - [stow](#stow)\n   - [Git 常用别名](#git-常用别名)\n   - [Scroll Reverser](#scroll-reverser)\n   - [ShiftIt](#shiftit)\n   - [Sublime Text 2](#sublime-text-2)\n   - [MacDown](#macdown)\n   - [z](#z)\n   - [Vimium](#vimium)\n   - [LastPass](#lastpass)\n   - [SourceTree](#sourcetree)\n   - [CheatSheet](#cheatsheet)\n   - [Alfred](#alfred)\n\n3. [开发工具](#3-开发工具)\n\n   - [Java](#java)\n   - [jEnv](#jenv)\n   - [民间使用的 Java 版本切换方法](#民间使用的-java-版本切换方法)\n   - [Java[OCD]](#javaocd)\n   - [IntelliJ IDEA](#intellij-idea)\n   - [rbenv](#rbenv)\n   - [Ruby 常用别名](#ruby-常用别名)\n\n一直想写这么一篇文章，把我从同事那里学到的经验分享出来。市面上有很多类似的文章，写得都非常好，让我受益匪浅。不过我还是有一些自己总结出来的经验想要分享。\n\n在工作中，我一般会在 1 到 10 人的团队中，经常会结对编程，即两个人共用一台 Mac 工作，因此也经常会把 Mac 外接一个大显示器、鼠标和键盘。我的常用开发平台有 Java、Ruby、Node.js、Web 等，使用 [JetBrains](https://www.jetbrains.com/) 的开发工具，比如 IntelliJ IDEA、RubyMine、WebStorm 等。\n\n我深知自己的知识有限，所以写下本文以便和大家切磋交流。同时更有效率的方法和更好的工具也在不断涌现，我也贪心的希望把更好的方法和工具都收集更到到这里，我会不断更新本文，让它尽量不过时。欢迎在评论区分享你的经验。期待你的反馈。\n\n我认为“一个高效的 Mac 工作环境”有以下几个特点：\n\n- 自动化\n\n  举个例子。手动安装一个应用，需要1)打开浏览器，2)搜索应用的名字，3)打开应用网站，4)寻找下载链接和安装方法，5)下载并等待下载完成，6)安装下载文件，7)可能还有后续的安装步骤。而自动化安装一个应用，只需要1)打开终端工具，2)敲入安装命令，3)等待完成这几个步骤。\n\n  自动化可以大大简化操作，提高效率。\n\n- 统一\n\n  我经常结对编程，偶尔会遇到快捷键不一样，命令不同等问题。我强烈建议，至少在一个团队中，大家尽量使用相同的快捷键、命令等环境。（我记得有个实践就是这个，可是我一直没找到该实践的名字和出处，求告诉）\n\n- 够用\n\n  够用就好，如果系统本身已经满足了我的需求，我不会再使用第三方工具。\n\n- 效率\n\n  效率，一切都是为了效率。\n\n本文对于第三方应用如何安装和使用只有最简单的介绍，具体还请参考官方网站和相关文档。\n\n有些章节标题标注了[OCD]，意思是这些章节带有我强烈的个人色彩，如果你跟我臭味相投，欢迎借鉴，如果你并不认同，请忽略掉好了。\n\n\n## 1. OS X\n\n本节介绍操作系统本身的一些设置。\n\n### 功能键\n\n默认情况下，F1-F12 都是特殊功能，比如调节屏幕亮度。而当你需要键入 F1-F12 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 Fn。这对于开发人员来说是非常不方便的。\n\n把 F1-F12 改成标准功能键：选择`System Preferences` > `Keyboard`，在`Keyboard`标签页中选中`Use all F1, F2, etc. keys as standard function keys`。\n\n### 全键盘控制\n\n当你在 Sublime Text 里关闭文件时，可能会遇到这样的对话框：\n\n![dialog-box-without-all-controls](/img/dialog-box-without-all-controls.png)\n\n注意这个`Save`按钮跟其他两个按钮不太一样，它的底色是蓝的。这种按钮被称为默认按钮，除了用鼠标点击触发外，还可以通过回车键触发。\n\n那么问题来了，如果你不想保存，想点击`Don't Save`，是不是只能用鼠标点击了呢？\n\n并不是这样：选择`System Preferences` > `Keyboard`，在`Shortcuts`标签页中选择`All controls`；或者使用快捷键`⌃F7`。之后这个对话框会变成这样：\n\n![dialog-box-with-all-controls](/img/dialog-box-with-all-controls.png)\n\n这个`Don't Save`按钮有了一圈蓝边，这个意味着你可以通过空格键触发。不仅如此，你还可以用`Tab`键把蓝边转移到其他按钮，来实现全键盘控制。\n\n除了`All controls`这个方法，你还可以用`⌘⌫`来选择`Don't Save`。`⌘⌫`的作用是在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。\n\n除了上述两个办法之外，居然还有个方法！就是按`⌘D`！据说是因为按`⌘+按钮的大写首字母`可以触发该按钮。可是！我按了`⌘C`和`⌘S`想取消和保存都没用！但是`⌘D`真的有用！如果仅仅是这也就算了，可是我又手贱试了下 TextEdit，在关闭未保存的文件时弹出的对话框上有三个按钮`Delete`、`Cancel`和`Save`。然而`⌘D`和`⌘C`都没用，但是！`⌘S`可以保存！我完全不能理解！我整个人几乎都是崩溃的，只好以咆哮体写下这段文字。如果谁能解释请务必告诉我，必有重谢！\n\n`⌘C`不能用应该是因为它绑定到了复制功能；而`⌘D`不能用因为它的作用是从“打开”对话框或“存储”对话框中选择“桌面”文件夹。\n\n在这个对话框上，你可以用`Esc`来执行`Cancel`操作。\n\n### Spotlight 快捷键\n\n中文版 OS X 的 Spotlight 的快捷键是`⌃Space`。这个快捷键有一些问题：\n\n- JetBrains 的 IDE，比如 IntelliJ IDEA、WebStorm 等都使用`⌃Space`作为自动完成这个最常用功能的快捷键。我不建议更改 IDE 的快捷键，而建议更改 Spotlight 的快捷键。\n- 对于没有添加中文输入法的 Mac 来说，Spotlight 的快捷键是`⌘Space`。英语国家的人都是这样的。所以我建议把 Spotlight 的快捷键设置为`⌘Space`，跟他们一致。\n\n### 输入法快捷键\n\n一般来说切换输入法的快捷键是`⌘Space`。由于我建议把 Spotlight 的快捷键设置为`⌘Space`，所以我建议把切换输入法的快捷键设置为`⌥Space`。\n\n### 其他快捷键\n\n让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。\n\n- [Mac keyboard shortcts](https://support.apple.com/kb/HT201236)\n\n  苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。\n  \n- [Mac keyboard shortcuts for accessibility features](https://support.apple.com/kb/HT204434)\n\n  苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。\n\n### 设置 Trackpad 轻点来点按\n\n默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按：\n\n选择`System Preferences` > `Trackpad`，在`Point & Click`标签页中选中`Tap to click`。\n\n### 语音\n\nOS X 自带了语音功能，可以用`say`命令让 Mac 开口说话：\n\n```sh\nsay hello\n```\n\n可以和`&&`或者`;`配合使用来提示你某任务已经完成：\n\n```sh\nbrew update && brew upgrade && brew cleanup ; say mission complete\n```\n\n通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键`⌥+ESC`发音。仅仅需要这样设置一下：选择`System Preferences` > `Dictation & Speech`，在`Text to Speech`标签页中选中`Speak selected text when the key is pressed`。\n\n### 词典\n\nOS X 自带了词典（Dictionary）。你几乎可以在任何应用中通过三指轻拍触摸板来现实对应单词的释义。\n\n也可以打开 Dictionary 应用来查找单词。\n\n可以在 Dictionary 应用中添加英汉汉英词典。\n\n### Dock Position\n\n默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。\n\n### 更改 Caps Lock 键为 Control 键\n\n我经常用到`Control`键，但这个键在键盘的左下角，很难按到。同时我发现我很少使用`Caps Lock`键，我一般会用`Shift`键加字母来输入大写字母，或者先输入小写再（通过快捷键）转换成大写。\n\n基于以上原因，我把`Caps Lock`键的功能改成了`Control`键。很多同事也都这么做的，可能是受到 [HHKB](https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard) 的影响。\n\n设置方法：选择`System Preferences` > `Keyboard`，在`Keyboard`标签页中点击`Modifier Keys...`按钮，在弹出的窗口中，把`Caps Lock (⇪) Key:`对应的选项改成`⌃ Control`。\n\n### Remove all Dock icons[OCD]\n\n本条目对于强迫症适用。\n\n默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。\n\nPS：Finder 图标是删不掉的。\n\n除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标：\n\n```sh\ndefaults write com.apple.dock static-only -boolean true; killall Dock\n```\n\n恢复也非常简单：\n\n```sh\ndefaults delete com.apple.dock static-only; killall Dock\n```\n\nPS：使用这个方法的话，Dock 上的`Downloads`也会被隐藏掉。\n\n### 重置 Launchpad 上图标位置[OCD]\n\n本条目对于强迫症适用。\n\n新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序：\n\n```sh\ndefaults write com.apple.dock ResetLaunchPad -bool true; killall Dock\n```\n\n在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。\n\n### 创建大小写敏感的工作区\n\n在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题：\n\n```sh\nhdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage\n```\n\n可以通过三种方式挂载镜像：\n\n1. 直接双击打开 `~/Documents/workspace.dmg.sparseimage`\n2. `open ~/Documents/workspace.dmg.sparseimage`\n3. `hdiutil attach ~/Documents/workspace.dmg.sparseimage`\n\n### Keychain Access\n\n钥匙串访问（Keychain Access）是一个 OS X 应用程序，对我来说它最大的功能就是查看已经保存的各种账号和密码，包括 Wi-Fi 密码。\n\n## 2. 常用工具\n\n本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。\n\n### [Homebrew](http://brew.sh)\n\n包管理工具，官方称之为`The missing package manager for OS X`。\n\n安装步骤见官网。\n\n有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定：\n\n```sh\nbrew install mysql gradle maven node\n```\n\nPS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。\n\nbrew 的替代品有 [MacPorts](https://www.macports.org/)，现在基本没人用它。\n\n### [Homebrew Cask](https://caskroom.github.io)\n\nbrew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：`brew cask install google-chrome`。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。\n\nbrew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。\n\n安装步骤见官网。\n\n应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。\n\n几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用`brew cask search`命令搜索。\n\n### [iTerm2](https://www.iterm2.com/)\n\niTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如`Split Panes`等[一群实用特性](https://www.iterm2.com/features.html)。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。\n\n安装：\n\n```sh\nbrew cask install iterm2\n```\n\n感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了。\n\n在终端里，除了可以用`⌃E`等快捷键（详见[其他快捷键](#其他快捷键)）之外，还可以使用`⌥B`、`⌥F`等快捷键（具体可以参考[这里](http://ss64.com/bash/syntax-keyboard.html)）。前提是这样设置一下：\n\n选择`Iterm`菜单 > `Preferences` > `Profiles`，选择你在使用的 Profile（默认是`Default`），在`Keys`标签页中把`Left option (⌥) key acts as`和`Right option (⌥) key acts as`都设置成`+ESC`。\n\n在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：\n\n选择`Iterm`菜单 > `Preferences` > `Profiles`，选择你在使用的 Profile（默认是Default），在`General`标签页中的`Working Directory`部分中选择`Reuse previous seesion's directory`。\n\n至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。\n\n在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按`⌘C`复制。\n\n### [Oh My Zsh](http://ohmyz.sh)\n\n默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。\n\n安装方法见官网。\n\n目前我使用的插件有：`git z sublime history rbenv bundler rake`\n\nOh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。\n\n在 Z shell 中，`~/.zshrc`是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的`$PATH`写入`~/.zshrc`中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制`$PATH`，而 Oh My Zsh 提供的默认`$PATH`值`$HOME/bin:/usr/local/bin:$PATH`是非常合适的一个值，它把`$HOME/bin`加入了`$PATH`，可以让我们把自己用的脚本放到`$HOME/bin`下。\n\n所以建议把`~/.zshrc`重置：\n\n```sh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n> [2016年6月17号的一次提交](https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26)后，`zshrc.zsh-template`就不再修改`$PATH`了。请找到`# export PATH=$HOME/bin:/usr/local/bin:$PATH`这一行，把前面的`#`去掉。\n\nOh My Zsh 还有很多[有价值的插件](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)。\n\n替代品有 [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)。基于 [Fishshell](http://fishshell.com/) 。\n\n### [Stow](http://www.gnu.org/software/stow/)\n\nGNU stow 是管理符号链接（symlink）的一个小公举。主要用于 symlink 你的 [dotfiles](http://dotfiles.github.io/) 如 emacs，git，fish/zsh 的配置文件。安装只需要\n\n```\nbrew install stow\n```\n\n安装了 stow 之后，我们可以开始 symlink 一些 dotfiles 了。完整使用 stow 和 dotfiles 的流程可以参考 <https://github.com/jcouyang/dotfiles>\n\n当你的 dotfiles 都妥妥的 symlink 到 `~/dotfiles` 后，push 到 github 上就再也不怕换电脑了。\n\n### Git 常用别名\n\n几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用`git st`来代替`git status`。然而这需要手动设置，每个人也都不完全一样。\n\nOh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如`gst`作为`git status`的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名：\n\nAlias | Command\n----- | -------\ngapa  | `git add --patch`\ngc!   | `git commit -v --amend`\ngcl   | `git clone --recursive`\ngclean| `git reset --hard && git clean -dfx`\ngcm   | `git checkout master`\ngcmsg | `git commit -m`\ngco   | `git checkout`\ngd    | `git diff`\ngdca  | `git diff --cached`\nglola | `git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all`\ngp    | `git push`\ngrbc  | `git rebase --continue`\ngst   | `git status`\ngup   | `git pull --rebase`\ngwip  | `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"`\n\n\n完整列表请参考：<https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git>\n\n\n### Scroll Reverser\n\n当你在浏览一个很长的网页时，你看完了当前显示的内容，想要看后续的内容，你可以在 Trackpad 上双指上滑，或者鼠标滚轮向上滚动。这是被称作“自然”的滚动方向。\n\n然而在 Windows 里鼠标滚动的行为是相反的：鼠标滚轮向下滚动才会让浏览器显示后续的内容，向上滚动会达到页面的顶部。你可以在 OS X 的系统偏好设置里修改（选择`System Preferences` > `Trackpad`，在`Scroll & Zoom`标签页中不选中`Scroll direction: natural`），但是这样会同时改变鼠标滚轮的方向和 Trackpad 的方向。\n\n要想只改变鼠标滚轮的方向，而保持 Trackpad 依旧是“自然”的，我们需要 Scroll Reverser：\n\n```sh\nbrew cask install scroll-reverser\n```\n\nPS：这货会让三指点击失效\n\n### ShiftIt\n\n原生 OS X 下只能手动调整窗口大小，所以我们需要窗口管理工具。我用过很多窗口管理工具，可惜大部分工具都存在快捷键冲突的问题（对我来说主要是 IntelliJ IDEA）。ShiftIt 是少见的没有冲突的窗口管理工具：\n\n```sh\nbrew cask install shiftit\n```\n\nPS：ShiftIt的旧版本需要安装 X11，最新版本已经修正了这个问题。\n\n替代者有 SizeUp，主要快捷键和 ShiftIt 相同。\n\n当然如果喜欢 hacking，[Slate](https://github.com/jigish/slate)  是个不错的 hackable 的窗口管理工具。配置可以参照 http://thume.ca/howto/2012/11/19/using-slate/\n\n### Sublime Text 2\n\n安装：\n\n```sh\nbrew cask install sublime-text\n```\n\n在命令行中指定使用 Sublime Text 打开某文件，是一个非常常用的功能，一般我们会按照 [OS X Command Line](https://www.sublimetext.com/docs/2/osx_command_line.html) 中所说执行 `ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl` 来增加`subl`链接。但是如果你用 brew-cask 安装的话，恭喜你，你不需要运行这个命令，因为 brew-cask 自动帮你做了这件事情。而且你卸载 Sublime Text 的时候 brew-cask 会自动删掉这个链接。\n\n同时 Oh My Zsh 也提供了 Sublime Text 插件，叫做`sublime`。参考：<https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime>，这个插件和通过 brew-cask 安装的 Sublime Text 完美兼容。\n\n替代品有 Atom、TextMate、Sublime Text 3 等，跟 Sublime Text 2 一样，用 brew-cask 安装的话命令行工具会被自动加入`$PATH`。\n\n### MacDown\n\nMacDown 是 Markdown 编辑器。由于 Mou 一直不支持代码高亮，我就转向了 MacDown。完美支持 [GFM](https://help.github.com/articles/github-flavored-markdown/)。\n\n我特别喜欢 [Markdown](https://daringfireball.net/projects/markdown/)，我用 Makdown 来写文章（包括本文），写幻灯片（[reveal.js](https://github.com/hakimel/reveal.js/)）。Markdown 可以让我专注于内容本身，而无需花精力在排版和样式上。\n\n安装：\n\n```sh\nbrew cask install macdown\n```\n\n### z\n\n在打开终端后，你是怎么进入项目的工作目录？是`cd xxx`，`⌃R`还是用别名？\n\n[z](https://github.com/rupa/z) 工具可以帮你快速进入目录。比如在我的 Mac 上运行`z cask`就会进入`/usr/local/Library/Taps/caskroom/homebrew-cask/Casks`目录。\n\n这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑`~/.zshrc`文件，在`plugins=(git)`这行中加上`z`变成`plugins=(git z)`，然后运行`source ~/.zshrc`重新加载配置文件，就可以使用 z 了。\n\n替代品有 autojump。autojump 需要使用 brew 安装。\n\n### [Vimium](https://vimium.github.io/)\n\nVimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。\n\n安装方法请参考官方网站。\n\n其他浏览器也有类似的工具，比如 FireFox 的 [KeySnail](https://github.com/mooz/keysnail)。\n\n### [LastPass](https://lastpass.com)\n\nLastPass 是管理密码的工具，支持二次验证，提供所有浏览器插件以及 Mac 桌面版本。\n\n最重要的是，它提供 **命令行** 的版本，可以直接通过 brew 安装\n\n```sh\nbrew install lastpass-cli --with-pinentry\n```\n\n之后，只需要登陆：\n\n```sh\nlpass login you@email.com\n```\n\n就可以拷贝密码或者集成到其他命令中了：\n\n```sh\nlpass show --password gmail.com -c\n```\n\n### [SourceTree](https://www.sourcetreeapp.com/)\n\nSourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。如果你发现命令行无法满足你的要求，可以试试 SourceTree。\n\n安装：\n\n```sh\nbrew cask install sourcetree\n```\n\n用 brew-cask 安装会自动增加命令行工具`stree`到`$PATH`里。在命令行中输入`stree`可以快速用 SourceTree 打开当前 Git 仓库。详细用法请参见`stree --help`。\n\n### [CheatSheet](http://www.mediaatelier.com/CheatSheet/)\n\nCheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按`⌘`。\n\n![CheatSheet](http://www.mediaatelier.com/CheatSheet/imgs/main.png)\n\n安装：\n\n```sh\nbrew cask install cheatsheet\n```\n\n### [Alfred](https://www.alfredapp.com)\n\nMac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。\n\n上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问[这里](http://www.alfredworkflow.com/)挑选喜欢的，并可以极其简单地根据自己的需要修改。\n\n安装：\n\n```sh\nbrew cask install alfred\n```\n\n## 3. 开发工具\n\n### Java\n\n现在 OS X 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。在 brew-cask 之前，我们需要从 <https://developer.apple.com/downloads/> 或者 Oracle 网站上下载。还有更麻烦的－－卸载 JDK 和升级 JDK。\n\nJDK 安装文件是 pkg 格式，卸载和`.app`不一样，且没有自动卸载方式。\n\n而 brew-cask 提供了自动安装和卸载功能，能够自动从官网上下载并安装 JDK 8。\n\n```sh\nbrew cask install java\n```\n\n如果你需要安装 JDK 7 或者 JDK 6，可以使用`homebrew-cask-versions`：\n\n```sh\nbrew tap caskroom/versions\nbrew cask install java6\n```\n\n在 OS X 上，你可以同时安装多个版本的 JDK。你可以通过命令`/usr/libexec/java_home -V`来查看安装了哪几个 JDK。\n\n那问题来了，当你运行`java`或者 Java 程序时使用的是哪个 JDK 呢？在 OS X 下，`java`也就是`/usr/bin/java`在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量`JAVA_HOME`来更改其指向：\n\n```sh\n$ java -version\njava version \"1.8.0_60\"\nJava(TM) SE Runtime Environment (build 1.8.0_60-b27)\nJava HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version\njava version \"1.6.0_65\"\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)\n```\n\n其中`JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home`可以用`` JAVA_HOME=`/usr/libexec/java_home -v 1.6` ``这种更加通用的方式代替。\n\n### [jEnv](https://github.com/gcuisinier/jenv)\n\n也可以使用 jEnv 来管理不同版本的 JDK，这个工具跟 [rbenv](#rbenv) 类似，通过当前目录下的`.java-version`来决定使用哪个 JDK。jEnv 也可以用 brew 安装。不过要使用 jEnv 要有几个问题：\n\n- 需要手动把`eval \"$(jenv init -)\"`加入 profile，没有 Oh My Zsh 插件。这点是我非常反感的。\n\n  可以把`eval \"$(jenv init -)\"`加入`~/.zlogin`，这样可以避免修改`~/.zshrc`。\n- 需要手动添加 JDK，不会自动采集系统 JDK。跟 Ruby 不同，OS X 已经提供`/usr/libexec/java_home`工具来管理安装的 JDK。\n- 需要 `jenv rehash`。这个是跟 rbenv 学的。\n\n所以我建议不要使用 jEnv。\n\n### 民间使用的 Java 版本切换方法\n\n添加以下脚本到当前 shell 配置文件中：`~/.zprofile`或者`~/.bash_profile`。\n\n```sh\nfunction setjdk() {\n    export JAVA_HOME=`/usr/libexec/java_home -v $@`\n}\n```\n这样我们就可以通过输入一条命令进行版本切换了：\n\n```sh\nsetjdk 1.8\n```\n\n### Java[OCD]\n\n作为一个强迫症患者，每当我看到 Java 的错误写法就想纠正过来。\n\n当指编程语言时，Java 的正确写法是首字母大写，其余小写。其他写法比如`JAVA`、`java`都是不对的。\n\n在其他一些地方会使用小写的`java`：\n\n- `java`命令\n- 原文件`Main.java`\n- 包名`java.lang`\n\n只有在全大写的标题里使用`JAVA`或者环境变量`JAVA_HOME`。\n\n### IntelliJ IDEA\n\nJava 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：\n\n```sh\nbrew cask install intellij-idea\n```\n\n也可以安装开源免费的 Community Edition：\n\n```sh\nbrew cask install intellij-idea-ce\n```\n\nIntelliJ IDEA 有几套内建的快捷键方案（Keymap）。其中适用于 OS X 的有`Mac OS X`和`Mac OS X 10.5+`两种。区别是:\n\n- `Mac OS X`方案和其他平台上的快捷键类似，\n- 而`Mac OS X 10.5+`更加符合 OS X 常用的快捷键。\n\n一个团队使用不同的快捷键会严重影响效率。可以用`View | Quick Switch Scheme`（`⌃ Back Quote`）快速切换 Keymap。\n\n如果可以选择的话，我建议使用`Mac OS X`方案。因为我经常遇到使用 Windows 的客户，而 Windows 平台上的快捷键和`Mac OS X`方案类似。\n\n可以从 IDEA 的`Help > Default Keymap Reference`打开快捷键的参考手册。不过从这里打开的是`Mac OS X 10.5+`方案的，而`Mac OS X`方案的可以从这里找到：<http://www.basrikahveci.com/static/ij_keymap_mac.pdf>。\n\n### [rbenv](https://github.com/sstephenson/rbenv)\n\n人人都需要一个 Ruby 版本管理工具。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。\n\n安装：\n\n```sh\nbrew install rbenv ruby-build\n```\n\n然后在`~/.zshrc`中加上`rbenv`插件。否则你需要手动添加`eval \"$(rbenv init -)\"`到`~/zshrc`或者`~/.zprofile`文件里。\n\n有时候项目会依赖一些奇怪的版本号，比如`ruby-2.1.0`，这个时候你需要 [rbenv-aliases](https://github.com/tpope/rbenv-aliases) 帮忙：\n\n```sh\nbrew install rbenv-aliases\n```\n\n替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了。chruby 也是一个轻量级工具，而且可以完美的和 Oh My Zsh 集成在一起，我看到有些生产环境在用它。\n\n### Ruby 常用别名\n\n几乎所有 Ruby 开发人员都会把`bi`作为`bundle install`的别名。Oh My Zsh 提供`builder`插件，这个插件提供了一套别名，比如`bi`、`be`。同时还能让你在运行一些常用 gem 的时候直接输入`rspec`，不需要`be rspec`这样了。具体包括哪些命令请参考[这里](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler)。\n\nZ shell 对于`[`和`]`符号有特殊的处理，所以在运行`rake task[parameter]`的时候会报错，你需要改成`rake task\\[parameter\\]`或者`noglob rake task[parameter]`。然而 Oh My Zsh 已经看穿这一切，自带的 rake 插件已经解决了这个问题：`brake task[parameter]`。\n\n添加插件的时候注意把`rake`放到`bundler`后面，例如这样：\n\n```\nplugins=(git z sublime history rbenv bundler rake)\n```\n\n## 参考资料\n\n- [Hacker's Guide to Setting up Your Mac](http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac)\n- [Setting up a new (OS X) development machine](https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell)\n- [高效 MacBook 工作环境配置](http://www.xialeizhou.com/?p=71)\n- [程序员如何优雅地使用 Mac？](http://www.zhihu.com/question/20873070)\n- [装点你的 Dock：外观篇](http://sspai.com/33493)","source":"_posts/Mac生产力配置备忘.md","raw":"title: Mac生产力配置备忘\nauthor: Messiah\ncomments: true\ntags:\n  - mac\n  - homebrew\n  - IDE\n  - zsh\n  - git\n  - sublime\ncategories:\n  - 备忘录\ndate: 2017-04-10 11:15:00\n---\n# Mac生产力配置备忘\n\n## 如何配置一个高效的 Mac 工作环境\n\n[English Version](/2017/05/01/Productive-Configuration-For-Mac/)\n\n## Table of Contents\n\n1. [OS X](#1-os-x)\n\n   - [功能键](#功能键)\n   - [全键盘控制](#全键盘控制)\n   - [Spotlight 快捷键](#spotlight-快捷键)\n   - [输入法快捷键](#输入法快捷键)\n   - [其他快捷键](#其他快捷键)\n   - [设置 Trackpad 轻点来点按](#设置-trackpad-轻点来点按)\n   - [语音](#语音)\n   - [词典](#词典)\n   - [Dock Position](#dock-position)\n   - [更改 Caps Lock 键为 Control 键](#更改-caps-lock-键为-control-键)\n   - [Remove all Dock icons[OCD]](#remove-all-dock-iconsocd)\n   - [重置 Launchpad 上图标位置[OCD]](#重置-launchpad-上图标位置ocd)\n   - [创建大小写敏感的工作区](#创建大小写敏感的工作区)\n   - [Keychain Access](#keychain-access)\n\n2. [常用工具](#2-常用工具)\n\n   - [Homebrew](#homebrew)\n   - [Homebrew Cask](#homebrew-cask)\n   - [iTerm2](#iterm2)\n   - [Oh My Zsh](#oh-my-zsh)\n   - [stow](#stow)\n   - [Git 常用别名](#git-常用别名)\n   - [Scroll Reverser](#scroll-reverser)\n   - [ShiftIt](#shiftit)\n   - [Sublime Text 2](#sublime-text-2)\n   - [MacDown](#macdown)\n   - [z](#z)\n   - [Vimium](#vimium)\n   - [LastPass](#lastpass)\n   - [SourceTree](#sourcetree)\n   - [CheatSheet](#cheatsheet)\n   - [Alfred](#alfred)\n\n3. [开发工具](#3-开发工具)\n\n   - [Java](#java)\n   - [jEnv](#jenv)\n   - [民间使用的 Java 版本切换方法](#民间使用的-java-版本切换方法)\n   - [Java[OCD]](#javaocd)\n   - [IntelliJ IDEA](#intellij-idea)\n   - [rbenv](#rbenv)\n   - [Ruby 常用别名](#ruby-常用别名)\n\n一直想写这么一篇文章，把我从同事那里学到的经验分享出来。市面上有很多类似的文章，写得都非常好，让我受益匪浅。不过我还是有一些自己总结出来的经验想要分享。\n\n在工作中，我一般会在 1 到 10 人的团队中，经常会结对编程，即两个人共用一台 Mac 工作，因此也经常会把 Mac 外接一个大显示器、鼠标和键盘。我的常用开发平台有 Java、Ruby、Node.js、Web 等，使用 [JetBrains](https://www.jetbrains.com/) 的开发工具，比如 IntelliJ IDEA、RubyMine、WebStorm 等。\n\n我深知自己的知识有限，所以写下本文以便和大家切磋交流。同时更有效率的方法和更好的工具也在不断涌现，我也贪心的希望把更好的方法和工具都收集更到到这里，我会不断更新本文，让它尽量不过时。欢迎在评论区分享你的经验。期待你的反馈。\n\n我认为“一个高效的 Mac 工作环境”有以下几个特点：\n\n- 自动化\n\n  举个例子。手动安装一个应用，需要1)打开浏览器，2)搜索应用的名字，3)打开应用网站，4)寻找下载链接和安装方法，5)下载并等待下载完成，6)安装下载文件，7)可能还有后续的安装步骤。而自动化安装一个应用，只需要1)打开终端工具，2)敲入安装命令，3)等待完成这几个步骤。\n\n  自动化可以大大简化操作，提高效率。\n\n- 统一\n\n  我经常结对编程，偶尔会遇到快捷键不一样，命令不同等问题。我强烈建议，至少在一个团队中，大家尽量使用相同的快捷键、命令等环境。（我记得有个实践就是这个，可是我一直没找到该实践的名字和出处，求告诉）\n\n- 够用\n\n  够用就好，如果系统本身已经满足了我的需求，我不会再使用第三方工具。\n\n- 效率\n\n  效率，一切都是为了效率。\n\n本文对于第三方应用如何安装和使用只有最简单的介绍，具体还请参考官方网站和相关文档。\n\n有些章节标题标注了[OCD]，意思是这些章节带有我强烈的个人色彩，如果你跟我臭味相投，欢迎借鉴，如果你并不认同，请忽略掉好了。\n\n\n## 1. OS X\n\n本节介绍操作系统本身的一些设置。\n\n### 功能键\n\n默认情况下，F1-F12 都是特殊功能，比如调节屏幕亮度。而当你需要键入 F1-F12 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 Fn。这对于开发人员来说是非常不方便的。\n\n把 F1-F12 改成标准功能键：选择`System Preferences` > `Keyboard`，在`Keyboard`标签页中选中`Use all F1, F2, etc. keys as standard function keys`。\n\n### 全键盘控制\n\n当你在 Sublime Text 里关闭文件时，可能会遇到这样的对话框：\n\n![dialog-box-without-all-controls](/img/dialog-box-without-all-controls.png)\n\n注意这个`Save`按钮跟其他两个按钮不太一样，它的底色是蓝的。这种按钮被称为默认按钮，除了用鼠标点击触发外，还可以通过回车键触发。\n\n那么问题来了，如果你不想保存，想点击`Don't Save`，是不是只能用鼠标点击了呢？\n\n并不是这样：选择`System Preferences` > `Keyboard`，在`Shortcuts`标签页中选择`All controls`；或者使用快捷键`⌃F7`。之后这个对话框会变成这样：\n\n![dialog-box-with-all-controls](/img/dialog-box-with-all-controls.png)\n\n这个`Don't Save`按钮有了一圈蓝边，这个意味着你可以通过空格键触发。不仅如此，你还可以用`Tab`键把蓝边转移到其他按钮，来实现全键盘控制。\n\n除了`All controls`这个方法，你还可以用`⌘⌫`来选择`Don't Save`。`⌘⌫`的作用是在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。\n\n除了上述两个办法之外，居然还有个方法！就是按`⌘D`！据说是因为按`⌘+按钮的大写首字母`可以触发该按钮。可是！我按了`⌘C`和`⌘S`想取消和保存都没用！但是`⌘D`真的有用！如果仅仅是这也就算了，可是我又手贱试了下 TextEdit，在关闭未保存的文件时弹出的对话框上有三个按钮`Delete`、`Cancel`和`Save`。然而`⌘D`和`⌘C`都没用，但是！`⌘S`可以保存！我完全不能理解！我整个人几乎都是崩溃的，只好以咆哮体写下这段文字。如果谁能解释请务必告诉我，必有重谢！\n\n`⌘C`不能用应该是因为它绑定到了复制功能；而`⌘D`不能用因为它的作用是从“打开”对话框或“存储”对话框中选择“桌面”文件夹。\n\n在这个对话框上，你可以用`Esc`来执行`Cancel`操作。\n\n### Spotlight 快捷键\n\n中文版 OS X 的 Spotlight 的快捷键是`⌃Space`。这个快捷键有一些问题：\n\n- JetBrains 的 IDE，比如 IntelliJ IDEA、WebStorm 等都使用`⌃Space`作为自动完成这个最常用功能的快捷键。我不建议更改 IDE 的快捷键，而建议更改 Spotlight 的快捷键。\n- 对于没有添加中文输入法的 Mac 来说，Spotlight 的快捷键是`⌘Space`。英语国家的人都是这样的。所以我建议把 Spotlight 的快捷键设置为`⌘Space`，跟他们一致。\n\n### 输入法快捷键\n\n一般来说切换输入法的快捷键是`⌘Space`。由于我建议把 Spotlight 的快捷键设置为`⌘Space`，所以我建议把切换输入法的快捷键设置为`⌥Space`。\n\n### 其他快捷键\n\n让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。\n\n- [Mac keyboard shortcts](https://support.apple.com/kb/HT201236)\n\n  苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。\n  \n- [Mac keyboard shortcuts for accessibility features](https://support.apple.com/kb/HT204434)\n\n  苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。\n\n### 设置 Trackpad 轻点来点按\n\n默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按：\n\n选择`System Preferences` > `Trackpad`，在`Point & Click`标签页中选中`Tap to click`。\n\n### 语音\n\nOS X 自带了语音功能，可以用`say`命令让 Mac 开口说话：\n\n```sh\nsay hello\n```\n\n可以和`&&`或者`;`配合使用来提示你某任务已经完成：\n\n```sh\nbrew update && brew upgrade && brew cleanup ; say mission complete\n```\n\n通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键`⌥+ESC`发音。仅仅需要这样设置一下：选择`System Preferences` > `Dictation & Speech`，在`Text to Speech`标签页中选中`Speak selected text when the key is pressed`。\n\n### 词典\n\nOS X 自带了词典（Dictionary）。你几乎可以在任何应用中通过三指轻拍触摸板来现实对应单词的释义。\n\n也可以打开 Dictionary 应用来查找单词。\n\n可以在 Dictionary 应用中添加英汉汉英词典。\n\n### Dock Position\n\n默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。\n\n### 更改 Caps Lock 键为 Control 键\n\n我经常用到`Control`键，但这个键在键盘的左下角，很难按到。同时我发现我很少使用`Caps Lock`键，我一般会用`Shift`键加字母来输入大写字母，或者先输入小写再（通过快捷键）转换成大写。\n\n基于以上原因，我把`Caps Lock`键的功能改成了`Control`键。很多同事也都这么做的，可能是受到 [HHKB](https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard) 的影响。\n\n设置方法：选择`System Preferences` > `Keyboard`，在`Keyboard`标签页中点击`Modifier Keys...`按钮，在弹出的窗口中，把`Caps Lock (⇪) Key:`对应的选项改成`⌃ Control`。\n\n### Remove all Dock icons[OCD]\n\n本条目对于强迫症适用。\n\n默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。\n\nPS：Finder 图标是删不掉的。\n\n除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标：\n\n```sh\ndefaults write com.apple.dock static-only -boolean true; killall Dock\n```\n\n恢复也非常简单：\n\n```sh\ndefaults delete com.apple.dock static-only; killall Dock\n```\n\nPS：使用这个方法的话，Dock 上的`Downloads`也会被隐藏掉。\n\n### 重置 Launchpad 上图标位置[OCD]\n\n本条目对于强迫症适用。\n\n新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序：\n\n```sh\ndefaults write com.apple.dock ResetLaunchPad -bool true; killall Dock\n```\n\n在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。\n\n### 创建大小写敏感的工作区\n\n在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题：\n\n```sh\nhdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage\n```\n\n可以通过三种方式挂载镜像：\n\n1. 直接双击打开 `~/Documents/workspace.dmg.sparseimage`\n2. `open ~/Documents/workspace.dmg.sparseimage`\n3. `hdiutil attach ~/Documents/workspace.dmg.sparseimage`\n\n### Keychain Access\n\n钥匙串访问（Keychain Access）是一个 OS X 应用程序，对我来说它最大的功能就是查看已经保存的各种账号和密码，包括 Wi-Fi 密码。\n\n## 2. 常用工具\n\n本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。\n\n### [Homebrew](http://brew.sh)\n\n包管理工具，官方称之为`The missing package manager for OS X`。\n\n安装步骤见官网。\n\n有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定：\n\n```sh\nbrew install mysql gradle maven node\n```\n\nPS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。\n\nbrew 的替代品有 [MacPorts](https://www.macports.org/)，现在基本没人用它。\n\n### [Homebrew Cask](https://caskroom.github.io)\n\nbrew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：`brew cask install google-chrome`。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。\n\nbrew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。\n\n安装步骤见官网。\n\n应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。\n\n几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用`brew cask search`命令搜索。\n\n### [iTerm2](https://www.iterm2.com/)\n\niTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如`Split Panes`等[一群实用特性](https://www.iterm2.com/features.html)。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。\n\n安装：\n\n```sh\nbrew cask install iterm2\n```\n\n感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了。\n\n在终端里，除了可以用`⌃E`等快捷键（详见[其他快捷键](#其他快捷键)）之外，还可以使用`⌥B`、`⌥F`等快捷键（具体可以参考[这里](http://ss64.com/bash/syntax-keyboard.html)）。前提是这样设置一下：\n\n选择`Iterm`菜单 > `Preferences` > `Profiles`，选择你在使用的 Profile（默认是`Default`），在`Keys`标签页中把`Left option (⌥) key acts as`和`Right option (⌥) key acts as`都设置成`+ESC`。\n\n在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：\n\n选择`Iterm`菜单 > `Preferences` > `Profiles`，选择你在使用的 Profile（默认是Default），在`General`标签页中的`Working Directory`部分中选择`Reuse previous seesion's directory`。\n\n至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。\n\n在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按`⌘C`复制。\n\n### [Oh My Zsh](http://ohmyz.sh)\n\n默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。\n\n安装方法见官网。\n\n目前我使用的插件有：`git z sublime history rbenv bundler rake`\n\nOh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。\n\n在 Z shell 中，`~/.zshrc`是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的`$PATH`写入`~/.zshrc`中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制`$PATH`，而 Oh My Zsh 提供的默认`$PATH`值`$HOME/bin:/usr/local/bin:$PATH`是非常合适的一个值，它把`$HOME/bin`加入了`$PATH`，可以让我们把自己用的脚本放到`$HOME/bin`下。\n\n所以建议把`~/.zshrc`重置：\n\n```sh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n> [2016年6月17号的一次提交](https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26)后，`zshrc.zsh-template`就不再修改`$PATH`了。请找到`# export PATH=$HOME/bin:/usr/local/bin:$PATH`这一行，把前面的`#`去掉。\n\nOh My Zsh 还有很多[有价值的插件](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview)。\n\n替代品有 [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)。基于 [Fishshell](http://fishshell.com/) 。\n\n### [Stow](http://www.gnu.org/software/stow/)\n\nGNU stow 是管理符号链接（symlink）的一个小公举。主要用于 symlink 你的 [dotfiles](http://dotfiles.github.io/) 如 emacs，git，fish/zsh 的配置文件。安装只需要\n\n```\nbrew install stow\n```\n\n安装了 stow 之后，我们可以开始 symlink 一些 dotfiles 了。完整使用 stow 和 dotfiles 的流程可以参考 <https://github.com/jcouyang/dotfiles>\n\n当你的 dotfiles 都妥妥的 symlink 到 `~/dotfiles` 后，push 到 github 上就再也不怕换电脑了。\n\n### Git 常用别名\n\n几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用`git st`来代替`git status`。然而这需要手动设置，每个人也都不完全一样。\n\nOh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如`gst`作为`git status`的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名：\n\nAlias | Command\n----- | -------\ngapa  | `git add --patch`\ngc!   | `git commit -v --amend`\ngcl   | `git clone --recursive`\ngclean| `git reset --hard && git clean -dfx`\ngcm   | `git checkout master`\ngcmsg | `git commit -m`\ngco   | `git checkout`\ngd    | `git diff`\ngdca  | `git diff --cached`\nglola | `git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all`\ngp    | `git push`\ngrbc  | `git rebase --continue`\ngst   | `git status`\ngup   | `git pull --rebase`\ngwip  | `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"`\n\n\n完整列表请参考：<https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git>\n\n\n### Scroll Reverser\n\n当你在浏览一个很长的网页时，你看完了当前显示的内容，想要看后续的内容，你可以在 Trackpad 上双指上滑，或者鼠标滚轮向上滚动。这是被称作“自然”的滚动方向。\n\n然而在 Windows 里鼠标滚动的行为是相反的：鼠标滚轮向下滚动才会让浏览器显示后续的内容，向上滚动会达到页面的顶部。你可以在 OS X 的系统偏好设置里修改（选择`System Preferences` > `Trackpad`，在`Scroll & Zoom`标签页中不选中`Scroll direction: natural`），但是这样会同时改变鼠标滚轮的方向和 Trackpad 的方向。\n\n要想只改变鼠标滚轮的方向，而保持 Trackpad 依旧是“自然”的，我们需要 Scroll Reverser：\n\n```sh\nbrew cask install scroll-reverser\n```\n\nPS：这货会让三指点击失效\n\n### ShiftIt\n\n原生 OS X 下只能手动调整窗口大小，所以我们需要窗口管理工具。我用过很多窗口管理工具，可惜大部分工具都存在快捷键冲突的问题（对我来说主要是 IntelliJ IDEA）。ShiftIt 是少见的没有冲突的窗口管理工具：\n\n```sh\nbrew cask install shiftit\n```\n\nPS：ShiftIt的旧版本需要安装 X11，最新版本已经修正了这个问题。\n\n替代者有 SizeUp，主要快捷键和 ShiftIt 相同。\n\n当然如果喜欢 hacking，[Slate](https://github.com/jigish/slate)  是个不错的 hackable 的窗口管理工具。配置可以参照 http://thume.ca/howto/2012/11/19/using-slate/\n\n### Sublime Text 2\n\n安装：\n\n```sh\nbrew cask install sublime-text\n```\n\n在命令行中指定使用 Sublime Text 打开某文件，是一个非常常用的功能，一般我们会按照 [OS X Command Line](https://www.sublimetext.com/docs/2/osx_command_line.html) 中所说执行 `ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl` 来增加`subl`链接。但是如果你用 brew-cask 安装的话，恭喜你，你不需要运行这个命令，因为 brew-cask 自动帮你做了这件事情。而且你卸载 Sublime Text 的时候 brew-cask 会自动删掉这个链接。\n\n同时 Oh My Zsh 也提供了 Sublime Text 插件，叫做`sublime`。参考：<https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime>，这个插件和通过 brew-cask 安装的 Sublime Text 完美兼容。\n\n替代品有 Atom、TextMate、Sublime Text 3 等，跟 Sublime Text 2 一样，用 brew-cask 安装的话命令行工具会被自动加入`$PATH`。\n\n### MacDown\n\nMacDown 是 Markdown 编辑器。由于 Mou 一直不支持代码高亮，我就转向了 MacDown。完美支持 [GFM](https://help.github.com/articles/github-flavored-markdown/)。\n\n我特别喜欢 [Markdown](https://daringfireball.net/projects/markdown/)，我用 Makdown 来写文章（包括本文），写幻灯片（[reveal.js](https://github.com/hakimel/reveal.js/)）。Markdown 可以让我专注于内容本身，而无需花精力在排版和样式上。\n\n安装：\n\n```sh\nbrew cask install macdown\n```\n\n### z\n\n在打开终端后，你是怎么进入项目的工作目录？是`cd xxx`，`⌃R`还是用别名？\n\n[z](https://github.com/rupa/z) 工具可以帮你快速进入目录。比如在我的 Mac 上运行`z cask`就会进入`/usr/local/Library/Taps/caskroom/homebrew-cask/Casks`目录。\n\n这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑`~/.zshrc`文件，在`plugins=(git)`这行中加上`z`变成`plugins=(git z)`，然后运行`source ~/.zshrc`重新加载配置文件，就可以使用 z 了。\n\n替代品有 autojump。autojump 需要使用 brew 安装。\n\n### [Vimium](https://vimium.github.io/)\n\nVimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。\n\n安装方法请参考官方网站。\n\n其他浏览器也有类似的工具，比如 FireFox 的 [KeySnail](https://github.com/mooz/keysnail)。\n\n### [LastPass](https://lastpass.com)\n\nLastPass 是管理密码的工具，支持二次验证，提供所有浏览器插件以及 Mac 桌面版本。\n\n最重要的是，它提供 **命令行** 的版本，可以直接通过 brew 安装\n\n```sh\nbrew install lastpass-cli --with-pinentry\n```\n\n之后，只需要登陆：\n\n```sh\nlpass login you@email.com\n```\n\n就可以拷贝密码或者集成到其他命令中了：\n\n```sh\nlpass show --password gmail.com -c\n```\n\n### [SourceTree](https://www.sourcetreeapp.com/)\n\nSourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。如果你发现命令行无法满足你的要求，可以试试 SourceTree。\n\n安装：\n\n```sh\nbrew cask install sourcetree\n```\n\n用 brew-cask 安装会自动增加命令行工具`stree`到`$PATH`里。在命令行中输入`stree`可以快速用 SourceTree 打开当前 Git 仓库。详细用法请参见`stree --help`。\n\n### [CheatSheet](http://www.mediaatelier.com/CheatSheet/)\n\nCheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按`⌘`。\n\n![CheatSheet](http://www.mediaatelier.com/CheatSheet/imgs/main.png)\n\n安装：\n\n```sh\nbrew cask install cheatsheet\n```\n\n### [Alfred](https://www.alfredapp.com)\n\nMac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。\n\n上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问[这里](http://www.alfredworkflow.com/)挑选喜欢的，并可以极其简单地根据自己的需要修改。\n\n安装：\n\n```sh\nbrew cask install alfred\n```\n\n## 3. 开发工具\n\n### Java\n\n现在 OS X 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。在 brew-cask 之前，我们需要从 <https://developer.apple.com/downloads/> 或者 Oracle 网站上下载。还有更麻烦的－－卸载 JDK 和升级 JDK。\n\nJDK 安装文件是 pkg 格式，卸载和`.app`不一样，且没有自动卸载方式。\n\n而 brew-cask 提供了自动安装和卸载功能，能够自动从官网上下载并安装 JDK 8。\n\n```sh\nbrew cask install java\n```\n\n如果你需要安装 JDK 7 或者 JDK 6，可以使用`homebrew-cask-versions`：\n\n```sh\nbrew tap caskroom/versions\nbrew cask install java6\n```\n\n在 OS X 上，你可以同时安装多个版本的 JDK。你可以通过命令`/usr/libexec/java_home -V`来查看安装了哪几个 JDK。\n\n那问题来了，当你运行`java`或者 Java 程序时使用的是哪个 JDK 呢？在 OS X 下，`java`也就是`/usr/bin/java`在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量`JAVA_HOME`来更改其指向：\n\n```sh\n$ java -version\njava version \"1.8.0_60\"\nJava(TM) SE Runtime Environment (build 1.8.0_60-b27)\nJava HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version\njava version \"1.6.0_65\"\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)\n```\n\n其中`JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home`可以用`` JAVA_HOME=`/usr/libexec/java_home -v 1.6` ``这种更加通用的方式代替。\n\n### [jEnv](https://github.com/gcuisinier/jenv)\n\n也可以使用 jEnv 来管理不同版本的 JDK，这个工具跟 [rbenv](#rbenv) 类似，通过当前目录下的`.java-version`来决定使用哪个 JDK。jEnv 也可以用 brew 安装。不过要使用 jEnv 要有几个问题：\n\n- 需要手动把`eval \"$(jenv init -)\"`加入 profile，没有 Oh My Zsh 插件。这点是我非常反感的。\n\n  可以把`eval \"$(jenv init -)\"`加入`~/.zlogin`，这样可以避免修改`~/.zshrc`。\n- 需要手动添加 JDK，不会自动采集系统 JDK。跟 Ruby 不同，OS X 已经提供`/usr/libexec/java_home`工具来管理安装的 JDK。\n- 需要 `jenv rehash`。这个是跟 rbenv 学的。\n\n所以我建议不要使用 jEnv。\n\n### 民间使用的 Java 版本切换方法\n\n添加以下脚本到当前 shell 配置文件中：`~/.zprofile`或者`~/.bash_profile`。\n\n```sh\nfunction setjdk() {\n    export JAVA_HOME=`/usr/libexec/java_home -v $@`\n}\n```\n这样我们就可以通过输入一条命令进行版本切换了：\n\n```sh\nsetjdk 1.8\n```\n\n### Java[OCD]\n\n作为一个强迫症患者，每当我看到 Java 的错误写法就想纠正过来。\n\n当指编程语言时，Java 的正确写法是首字母大写，其余小写。其他写法比如`JAVA`、`java`都是不对的。\n\n在其他一些地方会使用小写的`java`：\n\n- `java`命令\n- 原文件`Main.java`\n- 包名`java.lang`\n\n只有在全大写的标题里使用`JAVA`或者环境变量`JAVA_HOME`。\n\n### IntelliJ IDEA\n\nJava 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：\n\n```sh\nbrew cask install intellij-idea\n```\n\n也可以安装开源免费的 Community Edition：\n\n```sh\nbrew cask install intellij-idea-ce\n```\n\nIntelliJ IDEA 有几套内建的快捷键方案（Keymap）。其中适用于 OS X 的有`Mac OS X`和`Mac OS X 10.5+`两种。区别是:\n\n- `Mac OS X`方案和其他平台上的快捷键类似，\n- 而`Mac OS X 10.5+`更加符合 OS X 常用的快捷键。\n\n一个团队使用不同的快捷键会严重影响效率。可以用`View | Quick Switch Scheme`（`⌃ Back Quote`）快速切换 Keymap。\n\n如果可以选择的话，我建议使用`Mac OS X`方案。因为我经常遇到使用 Windows 的客户，而 Windows 平台上的快捷键和`Mac OS X`方案类似。\n\n可以从 IDEA 的`Help > Default Keymap Reference`打开快捷键的参考手册。不过从这里打开的是`Mac OS X 10.5+`方案的，而`Mac OS X`方案的可以从这里找到：<http://www.basrikahveci.com/static/ij_keymap_mac.pdf>。\n\n### [rbenv](https://github.com/sstephenson/rbenv)\n\n人人都需要一个 Ruby 版本管理工具。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。\n\n安装：\n\n```sh\nbrew install rbenv ruby-build\n```\n\n然后在`~/.zshrc`中加上`rbenv`插件。否则你需要手动添加`eval \"$(rbenv init -)\"`到`~/zshrc`或者`~/.zprofile`文件里。\n\n有时候项目会依赖一些奇怪的版本号，比如`ruby-2.1.0`，这个时候你需要 [rbenv-aliases](https://github.com/tpope/rbenv-aliases) 帮忙：\n\n```sh\nbrew install rbenv-aliases\n```\n\n替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了。chruby 也是一个轻量级工具，而且可以完美的和 Oh My Zsh 集成在一起，我看到有些生产环境在用它。\n\n### Ruby 常用别名\n\n几乎所有 Ruby 开发人员都会把`bi`作为`bundle install`的别名。Oh My Zsh 提供`builder`插件，这个插件提供了一套别名，比如`bi`、`be`。同时还能让你在运行一些常用 gem 的时候直接输入`rspec`，不需要`be rspec`这样了。具体包括哪些命令请参考[这里](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler)。\n\nZ shell 对于`[`和`]`符号有特殊的处理，所以在运行`rake task[parameter]`的时候会报错，你需要改成`rake task\\[parameter\\]`或者`noglob rake task[parameter]`。然而 Oh My Zsh 已经看穿这一切，自带的 rake 插件已经解决了这个问题：`brake task[parameter]`。\n\n添加插件的时候注意把`rake`放到`bundler`后面，例如这样：\n\n```\nplugins=(git z sublime history rbenv bundler rake)\n```\n\n## 参考资料\n\n- [Hacker's Guide to Setting up Your Mac](http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac)\n- [Setting up a new (OS X) development machine](https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell)\n- [高效 MacBook 工作环境配置](http://www.xialeizhou.com/?p=71)\n- [程序员如何优雅地使用 Mac？](http://www.zhihu.com/question/20873070)\n- [装点你的 Dock：外观篇](http://sspai.com/33493)","slug":"Mac生产力配置备忘","published":1,"updated":"2017-06-09T01:53:12.000Z","layout":"post","photos":[],"link":"","_id":"cj3plemxo000b761wglthhfk5","content":"<h1 id=\"Mac生产力配置备忘\"><a href=\"#Mac生产力配置备忘\" class=\"headerlink\" title=\"Mac生产力配置备忘\"></a>Mac生产力配置备忘</h1><h2 id=\"如何配置一个高效的-Mac-工作环境\"><a href=\"#如何配置一个高效的-Mac-工作环境\" class=\"headerlink\" title=\"如何配置一个高效的 Mac 工作环境\"></a>如何配置一个高效的 Mac 工作环境</h2><p><a href=\"/2017/05/01/Productive-Configuration-For-Mac/\">English Version</a></p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><ol>\n<li><p><a href=\"#1-os-x\">OS X</a></p>\n<ul>\n<li><a href=\"#功能键\">功能键</a></li>\n<li><a href=\"#全键盘控制\">全键盘控制</a></li>\n<li><a href=\"#spotlight-快捷键\">Spotlight 快捷键</a></li>\n<li><a href=\"#输入法快捷键\">输入法快捷键</a></li>\n<li><a href=\"#其他快捷键\">其他快捷键</a></li>\n<li><a href=\"#设置-trackpad-轻点来点按\">设置 Trackpad 轻点来点按</a></li>\n<li><a href=\"#语音\">语音</a></li>\n<li><a href=\"#词典\">词典</a></li>\n<li><a href=\"#dock-position\">Dock Position</a></li>\n<li><a href=\"#更改-caps-lock-键为-control-键\">更改 Caps Lock 键为 Control 键</a></li>\n<li><a href=\"#remove-all-dock-iconsocd\">Remove all Dock icons[OCD]</a></li>\n<li><a href=\"#重置-launchpad-上图标位置ocd\">重置 Launchpad 上图标位置[OCD]</a></li>\n<li><a href=\"#创建大小写敏感的工作区\">创建大小写敏感的工作区</a></li>\n<li><a href=\"#keychain-access\">Keychain Access</a></li>\n</ul>\n</li>\n<li><p><a href=\"#2-常用工具\">常用工具</a></p>\n<ul>\n<li><a href=\"#homebrew\">Homebrew</a></li>\n<li><a href=\"#homebrew-cask\">Homebrew Cask</a></li>\n<li><a href=\"#iterm2\">iTerm2</a></li>\n<li><a href=\"#oh-my-zsh\">Oh My Zsh</a></li>\n<li><a href=\"#stow\">stow</a></li>\n<li><a href=\"#git-常用别名\">Git 常用别名</a></li>\n<li><a href=\"#scroll-reverser\">Scroll Reverser</a></li>\n<li><a href=\"#shiftit\">ShiftIt</a></li>\n<li><a href=\"#sublime-text-2\">Sublime Text 2</a></li>\n<li><a href=\"#macdown\">MacDown</a></li>\n<li><a href=\"#z\">z</a></li>\n<li><a href=\"#vimium\">Vimium</a></li>\n<li><a href=\"#lastpass\">LastPass</a></li>\n<li><a href=\"#sourcetree\">SourceTree</a></li>\n<li><a href=\"#cheatsheet\">CheatSheet</a></li>\n<li><a href=\"#alfred\">Alfred</a></li>\n</ul>\n</li>\n<li><p><a href=\"#3-开发工具\">开发工具</a></p>\n<ul>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#jenv\">jEnv</a></li>\n<li><a href=\"#民间使用的-java-版本切换方法\">民间使用的 Java 版本切换方法</a></li>\n<li><a href=\"#javaocd\">Java[OCD]</a></li>\n<li><a href=\"#intellij-idea\">IntelliJ IDEA</a></li>\n<li><a href=\"#rbenv\">rbenv</a></li>\n<li><a href=\"#ruby-常用别名\">Ruby 常用别名</a></li>\n</ul>\n</li>\n</ol>\n<p>一直想写这么一篇文章，把我从同事那里学到的经验分享出来。市面上有很多类似的文章，写得都非常好，让我受益匪浅。不过我还是有一些自己总结出来的经验想要分享。</p>\n<p>在工作中，我一般会在 1 到 10 人的团队中，经常会结对编程，即两个人共用一台 Mac 工作，因此也经常会把 Mac 外接一个大显示器、鼠标和键盘。我的常用开发平台有 Java、Ruby、Node.js、Web 等，使用 <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"external\">JetBrains</a> 的开发工具，比如 IntelliJ IDEA、RubyMine、WebStorm 等。</p>\n<p>我深知自己的知识有限，所以写下本文以便和大家切磋交流。同时更有效率的方法和更好的工具也在不断涌现，我也贪心的希望把更好的方法和工具都收集更到到这里，我会不断更新本文，让它尽量不过时。欢迎在评论区分享你的经验。期待你的反馈。</p>\n<p>我认为“一个高效的 Mac 工作环境”有以下几个特点：</p>\n<ul>\n<li><p>自动化</p>\n<p>举个例子。手动安装一个应用，需要1)打开浏览器，2)搜索应用的名字，3)打开应用网站，4)寻找下载链接和安装方法，5)下载并等待下载完成，6)安装下载文件，7)可能还有后续的安装步骤。而自动化安装一个应用，只需要1)打开终端工具，2)敲入安装命令，3)等待完成这几个步骤。</p>\n<p>自动化可以大大简化操作，提高效率。</p>\n</li>\n<li><p>统一</p>\n<p>我经常结对编程，偶尔会遇到快捷键不一样，命令不同等问题。我强烈建议，至少在一个团队中，大家尽量使用相同的快捷键、命令等环境。（我记得有个实践就是这个，可是我一直没找到该实践的名字和出处，求告诉）</p>\n</li>\n<li><p>够用</p>\n<p>够用就好，如果系统本身已经满足了我的需求，我不会再使用第三方工具。</p>\n</li>\n<li><p>效率</p>\n<p>效率，一切都是为了效率。</p>\n</li>\n</ul>\n<p>本文对于第三方应用如何安装和使用只有最简单的介绍，具体还请参考官方网站和相关文档。</p>\n<p>有些章节标题标注了[OCD]，意思是这些章节带有我强烈的个人色彩，如果你跟我臭味相投，欢迎借鉴，如果你并不认同，请忽略掉好了。</p>\n<h2 id=\"1-OS-X\"><a href=\"#1-OS-X\" class=\"headerlink\" title=\"1. OS X\"></a>1. OS X</h2><p>本节介绍操作系统本身的一些设置。</p>\n<h3 id=\"功能键\"><a href=\"#功能键\" class=\"headerlink\" title=\"功能键\"></a>功能键</h3><p>默认情况下，F1-F12 都是特殊功能，比如调节屏幕亮度。而当你需要键入 F1-F12 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 Fn。这对于开发人员来说是非常不方便的。</p>\n<p>把 F1-F12 改成标准功能键：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Keyboard</code>标签页中选中<code>Use all F1, F2, etc. keys as standard function keys</code>。</p>\n<h3 id=\"全键盘控制\"><a href=\"#全键盘控制\" class=\"headerlink\" title=\"全键盘控制\"></a>全键盘控制</h3><p>当你在 Sublime Text 里关闭文件时，可能会遇到这样的对话框：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-without-all-controls.png\" alt=\"dialog-box-without-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-without-all-controls</div>\n            </figure>\n<p>注意这个<code>Save</code>按钮跟其他两个按钮不太一样，它的底色是蓝的。这种按钮被称为默认按钮，除了用鼠标点击触发外，还可以通过回车键触发。</p>\n<p>那么问题来了，如果你不想保存，想点击<code>Don&#39;t Save</code>，是不是只能用鼠标点击了呢？</p>\n<p>并不是这样：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Shortcuts</code>标签页中选择<code>All controls</code>；或者使用快捷键<code>⌃F7</code>。之后这个对话框会变成这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-with-all-controls.png\" alt=\"dialog-box-with-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-with-all-controls</div>\n            </figure>\n<p>这个<code>Don&#39;t Save</code>按钮有了一圈蓝边，这个意味着你可以通过空格键触发。不仅如此，你还可以用<code>Tab</code>键把蓝边转移到其他按钮，来实现全键盘控制。</p>\n<p>除了<code>All controls</code>这个方法，你还可以用<code>⌘⌫</code>来选择<code>Don&#39;t Save</code>。<code>⌘⌫</code>的作用是在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。</p>\n<p>除了上述两个办法之外，居然还有个方法！就是按<code>⌘D</code>！据说是因为按<code>⌘+按钮的大写首字母</code>可以触发该按钮。可是！我按了<code>⌘C</code>和<code>⌘S</code>想取消和保存都没用！但是<code>⌘D</code>真的有用！如果仅仅是这也就算了，可是我又手贱试了下 TextEdit，在关闭未保存的文件时弹出的对话框上有三个按钮<code>Delete</code>、<code>Cancel</code>和<code>Save</code>。然而<code>⌘D</code>和<code>⌘C</code>都没用，但是！<code>⌘S</code>可以保存！我完全不能理解！我整个人几乎都是崩溃的，只好以咆哮体写下这段文字。如果谁能解释请务必告诉我，必有重谢！</p>\n<p><code>⌘C</code>不能用应该是因为它绑定到了复制功能；而<code>⌘D</code>不能用因为它的作用是从“打开”对话框或“存储”对话框中选择“桌面”文件夹。</p>\n<p>在这个对话框上，你可以用<code>Esc</code>来执行<code>Cancel</code>操作。</p>\n<h3 id=\"Spotlight-快捷键\"><a href=\"#Spotlight-快捷键\" class=\"headerlink\" title=\"Spotlight 快捷键\"></a>Spotlight 快捷键</h3><p>中文版 OS X 的 Spotlight 的快捷键是<code>⌃Space</code>。这个快捷键有一些问题：</p>\n<ul>\n<li>JetBrains 的 IDE，比如 IntelliJ IDEA、WebStorm 等都使用<code>⌃Space</code>作为自动完成这个最常用功能的快捷键。我不建议更改 IDE 的快捷键，而建议更改 Spotlight 的快捷键。</li>\n<li>对于没有添加中文输入法的 Mac 来说，Spotlight 的快捷键是<code>⌘Space</code>。英语国家的人都是这样的。所以我建议把 Spotlight 的快捷键设置为<code>⌘Space</code>，跟他们一致。</li>\n</ul>\n<h3 id=\"输入法快捷键\"><a href=\"#输入法快捷键\" class=\"headerlink\" title=\"输入法快捷键\"></a>输入法快捷键</h3><p>一般来说切换输入法的快捷键是<code>⌘Space</code>。由于我建议把 Spotlight 的快捷键设置为<code>⌘Space</code>，所以我建议把切换输入法的快捷键设置为<code>⌥Space</code>。</p>\n<h3 id=\"其他快捷键\"><a href=\"#其他快捷键\" class=\"headerlink\" title=\"其他快捷键\"></a>其他快捷键</h3><p>让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。</p>\n<ul>\n<li><p><a href=\"https://support.apple.com/kb/HT201236\" target=\"_blank\" rel=\"external\">Mac keyboard shortcts</a></p>\n<p>苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。</p>\n</li>\n<li><p><a href=\"https://support.apple.com/kb/HT204434\" target=\"_blank\" rel=\"external\">Mac keyboard shortcuts for accessibility features</a></p>\n<p>苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。</p>\n</li>\n</ul>\n<h3 id=\"设置-Trackpad-轻点来点按\"><a href=\"#设置-Trackpad-轻点来点按\" class=\"headerlink\" title=\"设置 Trackpad 轻点来点按\"></a>设置 Trackpad 轻点来点按</h3><p>默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按：</p>\n<p>选择<code>System Preferences</code> &gt; <code>Trackpad</code>，在<code>Point &amp; Click</code>标签页中选中<code>Tap to click</code>。</p>\n<h3 id=\"语音\"><a href=\"#语音\" class=\"headerlink\" title=\"语音\"></a>语音</h3><p>OS X 自带了语音功能，可以用<code>say</code>命令让 Mac 开口说话：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">say hello</div></pre></td></tr></table></figure>\n<p>可以和<code>&amp;&amp;</code>或者<code>;</code>配合使用来提示你某任务已经完成：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</div></pre></td></tr></table></figure>\n<p>通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键<code>⌥+ESC</code>发音。仅仅需要这样设置一下：选择<code>System Preferences</code> &gt; <code>Dictation &amp; Speech</code>，在<code>Text to Speech</code>标签页中选中<code>Speak selected text when the key is pressed</code>。</p>\n<h3 id=\"词典\"><a href=\"#词典\" class=\"headerlink\" title=\"词典\"></a>词典</h3><p>OS X 自带了词典（Dictionary）。你几乎可以在任何应用中通过三指轻拍触摸板来现实对应单词的释义。</p>\n<p>也可以打开 Dictionary 应用来查找单词。</p>\n<p>可以在 Dictionary 应用中添加英汉汉英词典。</p>\n<h3 id=\"Dock-Position\"><a href=\"#Dock-Position\" class=\"headerlink\" title=\"Dock Position\"></a>Dock Position</h3><p>默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。</p>\n<h3 id=\"更改-Caps-Lock-键为-Control-键\"><a href=\"#更改-Caps-Lock-键为-Control-键\" class=\"headerlink\" title=\"更改 Caps Lock 键为 Control 键\"></a>更改 Caps Lock 键为 Control 键</h3><p>我经常用到<code>Control</code>键，但这个键在键盘的左下角，很难按到。同时我发现我很少使用<code>Caps Lock</code>键，我一般会用<code>Shift</code>键加字母来输入大写字母，或者先输入小写再（通过快捷键）转换成大写。</p>\n<p>基于以上原因，我把<code>Caps Lock</code>键的功能改成了<code>Control</code>键。很多同事也都这么做的，可能是受到 <a href=\"https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard\" target=\"_blank\" rel=\"external\">HHKB</a> 的影响。</p>\n<p>设置方法：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Keyboard</code>标签页中点击<code>Modifier Keys...</code>按钮，在弹出的窗口中，把<code>Caps Lock (⇪) Key:</code>对应的选项改成<code>⌃ Control</code>。</p>\n<h3 id=\"Remove-all-Dock-icons-OCD\"><a href=\"#Remove-all-Dock-icons-OCD\" class=\"headerlink\" title=\"Remove all Dock icons[OCD]\"></a>Remove all Dock icons[OCD]</h3><p>本条目对于强迫症适用。</p>\n<p>默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。</p>\n<p>PS：Finder 图标是删不掉的。</p>\n<p>除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock static-only -boolean <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>恢复也非常简单：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults delete com.apple.dock static-only; killall Dock</div></pre></td></tr></table></figure>\n<p>PS：使用这个方法的话，Dock 上的<code>Downloads</code>也会被隐藏掉。</p>\n<h3 id=\"重置-Launchpad-上图标位置-OCD\"><a href=\"#重置-Launchpad-上图标位置-OCD\" class=\"headerlink\" title=\"重置 Launchpad 上图标位置[OCD]\"></a>重置 Launchpad 上图标位置[OCD]</h3><p>本条目对于强迫症适用。</p>\n<p>新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。</p>\n<h3 id=\"创建大小写敏感的工作区\"><a href=\"#创建大小写敏感的工作区\" class=\"headerlink\" title=\"创建大小写敏感的工作区\"></a>创建大小写敏感的工作区</h3><p>在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hdiutil create -type SPARSE -fs <span class=\"string\">'Case-sensitive Journaled HFS+'</span> -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage</div></pre></td></tr></table></figure>\n<p>可以通过三种方式挂载镜像：</p>\n<ol>\n<li>直接双击打开 <code>~/Documents/workspace.dmg.sparseimage</code></li>\n<li><code>open ~/Documents/workspace.dmg.sparseimage</code></li>\n<li><code>hdiutil attach ~/Documents/workspace.dmg.sparseimage</code></li>\n</ol>\n<h3 id=\"Keychain-Access\"><a href=\"#Keychain-Access\" class=\"headerlink\" title=\"Keychain Access\"></a>Keychain Access</h3><p>钥匙串访问（Keychain Access）是一个 OS X 应用程序，对我来说它最大的功能就是查看已经保存的各种账号和密码，包括 Wi-Fi 密码。</p>\n<h2 id=\"2-常用工具\"><a href=\"#2-常用工具\" class=\"headerlink\" title=\"2. 常用工具\"></a>2. 常用工具</h2><p>本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。</p>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a><a href=\"http://brew.sh\" target=\"_blank\" rel=\"external\">Homebrew</a></h3><p>包管理工具，官方称之为<code>The missing package manager for OS X</code>。</p>\n<p>安装步骤见官网。</p>\n<p>有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install mysql gradle maven node</div></pre></td></tr></table></figure>\n<p>PS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。</p>\n<p>brew 的替代品有 <a href=\"https://www.macports.org/\" target=\"_blank\" rel=\"external\">MacPorts</a>，现在基本没人用它。</p>\n<h3 id=\"Homebrew-Cask\"><a href=\"#Homebrew-Cask\" class=\"headerlink\" title=\"Homebrew Cask\"></a><a href=\"https://caskroom.github.io\" target=\"_blank\" rel=\"external\">Homebrew Cask</a></h3><p>brew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：<code>brew cask install google-chrome</code>。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。</p>\n<p>brew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。</p>\n<p>安装步骤见官网。</p>\n<p>应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。</p>\n<p>几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用<code>brew cask search</code>命令搜索。</p>\n<h3 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm2</a></h3><p>iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如<code>Split Panes</code>等<a href=\"https://www.iterm2.com/features.html\" target=\"_blank\" rel=\"external\">一群实用特性</a>。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure>\n<p>感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了。</p>\n<p>在终端里，除了可以用<code>⌃E</code>等快捷键（详见<a href=\"#其他快捷键\">其他快捷键</a>）之外，还可以使用<code>⌥B</code>、<code>⌥F</code>等快捷键（具体可以参考<a href=\"http://ss64.com/bash/syntax-keyboard.html\" target=\"_blank\" rel=\"external\">这里</a>）。前提是这样设置一下：</p>\n<p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是<code>Default</code>），在<code>Keys</code>标签页中把<code>Left option (⌥) key acts as</code>和<code>Right option (⌥) key acts as</code>都设置成<code>+ESC</code>。</p>\n<p>在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：</p>\n<p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是Default），在<code>General</code>标签页中的<code>Working Directory</code>部分中选择<code>Reuse previous seesion&#39;s directory</code>。</p>\n<p>至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。</p>\n<p>在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按<code>⌘C</code>复制。</p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a><a href=\"http://ohmyz.sh\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></h3><p>默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。</p>\n<p>安装方法见官网。</p>\n<p>目前我使用的插件有：<code>git z sublime history rbenv bundler rake</code></p>\n<p>Oh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。</p>\n<p>在 Z shell 中，<code>~/.zshrc</code>是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的<code>$PATH</code>写入<code>~/.zshrc</code>中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制<code>$PATH</code>，而 Oh My Zsh 提供的默认<code>$PATH</code>值<code>$HOME/bin:/usr/local/bin:$PATH</code>是非常合适的一个值，它把<code>$HOME/bin</code>加入了<code>$PATH</code>，可以让我们把自己用的脚本放到<code>$HOME/bin</code>下。</p>\n<p>所以建议把<code>~/.zshrc</code>重置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26\" target=\"_blank\" rel=\"external\">2016年6月17号的一次提交</a>后，<code>zshrc.zsh-template</code>就不再修改<code>$PATH</code>了。请找到<code># export PATH=$HOME/bin:/usr/local/bin:$PATH</code>这一行，把前面的<code>#</code>去掉。</p>\n</blockquote>\n<p>Oh My Zsh 还有很多<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"external\">有价值的插件</a>。</p>\n<p>替代品有 <a href=\"https://github.com/oh-my-fish/oh-my-fish\" target=\"_blank\" rel=\"external\">Oh My Fish</a>。基于 <a href=\"http://fishshell.com/\" target=\"_blank\" rel=\"external\">Fishshell</a> 。</p>\n<h3 id=\"Stow\"><a href=\"#Stow\" class=\"headerlink\" title=\"Stow\"></a><a href=\"http://www.gnu.org/software/stow/\" target=\"_blank\" rel=\"external\">Stow</a></h3><p>GNU stow 是管理符号链接（symlink）的一个小公举。主要用于 symlink 你的 <a href=\"http://dotfiles.github.io/\" target=\"_blank\" rel=\"external\">dotfiles</a> 如 emacs，git，fish/zsh 的配置文件。安装只需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install stow</div></pre></td></tr></table></figure>\n<p>安装了 stow 之后，我们可以开始 symlink 一些 dotfiles 了。完整使用 stow 和 dotfiles 的流程可以参考 <a href=\"https://github.com/jcouyang/dotfiles\" target=\"_blank\" rel=\"external\">https://github.com/jcouyang/dotfiles</a></p>\n<p>当你的 dotfiles 都妥妥的 symlink 到 <code>~/dotfiles</code> 后，push 到 github 上就再也不怕换电脑了。</p>\n<h3 id=\"Git-常用别名\"><a href=\"#Git-常用别名\" class=\"headerlink\" title=\"Git 常用别名\"></a>Git 常用别名</h3><p>几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用<code>git st</code>来代替<code>git status</code>。然而这需要手动设置，每个人也都不完全一样。</p>\n<p>Oh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如<code>gst</code>作为<code>git status</code>的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名：</p>\n<table>\n<thead>\n<tr>\n<th>Alias</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gapa</td>\n<td><code>git add --patch</code></td>\n</tr>\n<tr>\n<td>gc!</td>\n<td><code>git commit -v --amend</code></td>\n</tr>\n<tr>\n<td>gcl</td>\n<td><code>git clone --recursive</code></td>\n</tr>\n<tr>\n<td>gclean</td>\n<td><code>git reset --hard &amp;&amp; git clean -dfx</code></td>\n</tr>\n<tr>\n<td>gcm</td>\n<td><code>git checkout master</code></td>\n</tr>\n<tr>\n<td>gcmsg</td>\n<td><code>git commit -m</code></td>\n</tr>\n<tr>\n<td>gco</td>\n<td><code>git checkout</code></td>\n</tr>\n<tr>\n<td>gd</td>\n<td><code>git diff</code></td>\n</tr>\n<tr>\n<td>gdca</td>\n<td><code>git diff --cached</code></td>\n</tr>\n<tr>\n<td>glola</td>\n<td><code>git log --graph --pretty = format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --all</code></td>\n</tr>\n<tr>\n<td>gp</td>\n<td><code>git push</code></td>\n</tr>\n<tr>\n<td>grbc</td>\n<td><code>git rebase --continue</code></td>\n</tr>\n<tr>\n<td>gst</td>\n<td><code>git status</code></td>\n</tr>\n<tr>\n<td>gup</td>\n<td><code>git pull --rebase</code></td>\n</tr>\n<tr>\n<td>gwip</td>\n<td><code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>完整列表请参考：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a></p>\n<h3 id=\"Scroll-Reverser\"><a href=\"#Scroll-Reverser\" class=\"headerlink\" title=\"Scroll Reverser\"></a>Scroll Reverser</h3><p>当你在浏览一个很长的网页时，你看完了当前显示的内容，想要看后续的内容，你可以在 Trackpad 上双指上滑，或者鼠标滚轮向上滚动。这是被称作“自然”的滚动方向。</p>\n<p>然而在 Windows 里鼠标滚动的行为是相反的：鼠标滚轮向下滚动才会让浏览器显示后续的内容，向上滚动会达到页面的顶部。你可以在 OS X 的系统偏好设置里修改（选择<code>System Preferences</code> &gt; <code>Trackpad</code>，在<code>Scroll &amp; Zoom</code>标签页中不选中<code>Scroll direction: natural</code>），但是这样会同时改变鼠标滚轮的方向和 Trackpad 的方向。</p>\n<p>要想只改变鼠标滚轮的方向，而保持 Trackpad 依旧是“自然”的，我们需要 Scroll Reverser：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install scroll-reverser</div></pre></td></tr></table></figure>\n<p>PS：这货会让三指点击失效</p>\n<h3 id=\"ShiftIt\"><a href=\"#ShiftIt\" class=\"headerlink\" title=\"ShiftIt\"></a>ShiftIt</h3><p>原生 OS X 下只能手动调整窗口大小，所以我们需要窗口管理工具。我用过很多窗口管理工具，可惜大部分工具都存在快捷键冲突的问题（对我来说主要是 IntelliJ IDEA）。ShiftIt 是少见的没有冲突的窗口管理工具：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install shiftit</div></pre></td></tr></table></figure>\n<p>PS：ShiftIt的旧版本需要安装 X11，最新版本已经修正了这个问题。</p>\n<p>替代者有 SizeUp，主要快捷键和 ShiftIt 相同。</p>\n<p>当然如果喜欢 hacking，<a href=\"https://github.com/jigish/slate\" target=\"_blank\" rel=\"external\">Slate</a>  是个不错的 hackable 的窗口管理工具。配置可以参照 <a href=\"http://thume.ca/howto/2012/11/19/using-slate/\" target=\"_blank\" rel=\"external\">http://thume.ca/howto/2012/11/19/using-slate/</a></p>\n<h3 id=\"Sublime-Text-2\"><a href=\"#Sublime-Text-2\" class=\"headerlink\" title=\"Sublime Text 2\"></a>Sublime Text 2</h3><p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sublime-text</div></pre></td></tr></table></figure>\n<p>在命令行中指定使用 Sublime Text 打开某文件，是一个非常常用的功能，一般我们会按照 <a href=\"https://www.sublimetext.com/docs/2/osx_command_line.html\" target=\"_blank\" rel=\"external\">OS X Command Line</a> 中所说执行 <code>ln -s &quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; ~/bin/subl</code> 来增加<code>subl</code>链接。但是如果你用 brew-cask 安装的话，恭喜你，你不需要运行这个命令，因为 brew-cask 自动帮你做了这件事情。而且你卸载 Sublime Text 的时候 brew-cask 会自动删掉这个链接。</p>\n<p>同时 Oh My Zsh 也提供了 Sublime Text 插件，叫做<code>sublime</code>。参考：<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime</a>，这个插件和通过 brew-cask 安装的 Sublime Text 完美兼容。</p>\n<p>替代品有 Atom、TextMate、Sublime Text 3 等，跟 Sublime Text 2 一样，用 brew-cask 安装的话命令行工具会被自动加入<code>$PATH</code>。</p>\n<h3 id=\"MacDown\"><a href=\"#MacDown\" class=\"headerlink\" title=\"MacDown\"></a>MacDown</h3><p>MacDown 是 Markdown 编辑器。由于 Mou 一直不支持代码高亮，我就转向了 MacDown。完美支持 <a href=\"https://help.github.com/articles/github-flavored-markdown/\" target=\"_blank\" rel=\"external\">GFM</a>。</p>\n<p>我特别喜欢 <a href=\"https://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"external\">Markdown</a>，我用 Makdown 来写文章（包括本文），写幻灯片（<a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"external\">reveal.js</a>）。Markdown 可以让我专注于内容本身，而无需花精力在排版和样式上。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install macdown</div></pre></td></tr></table></figure>\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h3><p>在打开终端后，你是怎么进入项目的工作目录？是<code>cd xxx</code>，<code>⌃R</code>还是用别名？</p>\n<p><a href=\"https://github.com/rupa/z\" target=\"_blank\" rel=\"external\">z</a> 工具可以帮你快速进入目录。比如在我的 Mac 上运行<code>z cask</code>就会进入<code>/usr/local/Library/Taps/caskroom/homebrew-cask/Casks</code>目录。</p>\n<p>这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑<code>~/.zshrc</code>文件，在<code>plugins=(git)</code>这行中加上<code>z</code>变成<code>plugins=(git z)</code>，然后运行<code>source ~/.zshrc</code>重新加载配置文件，就可以使用 z 了。</p>\n<p>替代品有 autojump。autojump 需要使用 brew 安装。</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://vimium.github.io/\" target=\"_blank\" rel=\"external\">Vimium</a></h3><p>Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。</p>\n<p>安装方法请参考官方网站。</p>\n<p>其他浏览器也有类似的工具，比如 FireFox 的 <a href=\"https://github.com/mooz/keysnail\" target=\"_blank\" rel=\"external\">KeySnail</a>。</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a><a href=\"https://lastpass.com\" target=\"_blank\" rel=\"external\">LastPass</a></h3><p>LastPass 是管理密码的工具，支持二次验证，提供所有浏览器插件以及 Mac 桌面版本。</p>\n<p>最重要的是，它提供 <strong>命令行</strong> 的版本，可以直接通过 brew 安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lastpass-cli --with-pinentry</div></pre></td></tr></table></figure>\n<p>之后，只需要登陆：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass login you@email.com</div></pre></td></tr></table></figure>\n<p>就可以拷贝密码或者集成到其他命令中了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass show --password gmail.com -c</div></pre></td></tr></table></figure>\n<h3 id=\"SourceTree\"><a href=\"#SourceTree\" class=\"headerlink\" title=\"SourceTree\"></a><a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"external\">SourceTree</a></h3><p>SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。如果你发现命令行无法满足你的要求，可以试试 SourceTree。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sourcetree</div></pre></td></tr></table></figure>\n<p>用 brew-cask 安装会自动增加命令行工具<code>stree</code>到<code>$PATH</code>里。在命令行中输入<code>stree</code>可以快速用 SourceTree 打开当前 Git 仓库。详细用法请参见<code>stree --help</code>。</p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a><a href=\"http://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">CheatSheet</a></h3><p>CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按<code>⌘</code>。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.mediaatelier.com/CheatSheet/imgs/main.png\" alt=\"CheatSheet\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheatSheet</div>\n            </figure>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cheatsheet</div></pre></td></tr></table></figure>\n<h3 id=\"Alfred\"><a href=\"#Alfred\" class=\"headerlink\" title=\"Alfred\"></a><a href=\"https://www.alfredapp.com\" target=\"_blank\" rel=\"external\">Alfred</a></h3><p>Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。</p>\n<p>上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问<a href=\"http://www.alfredworkflow.com/\" target=\"_blank\" rel=\"external\">这里</a>挑选喜欢的，并可以极其简单地根据自己的需要修改。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h2 id=\"3-开发工具\"><a href=\"#3-开发工具\" class=\"headerlink\" title=\"3. 开发工具\"></a>3. 开发工具</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>现在 OS X 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。在 brew-cask 之前，我们需要从 <a href=\"https://developer.apple.com/downloads/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/downloads/</a> 或者 Oracle 网站上下载。还有更麻烦的－－卸载 JDK 和升级 JDK。</p>\n<p>JDK 安装文件是 pkg 格式，卸载和<code>.app</code>不一样，且没有自动卸载方式。</p>\n<p>而 brew-cask 提供了自动安装和卸载功能，能够自动从官网上下载并安装 JDK 8。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install java</div></pre></td></tr></table></figure>\n<p>如果你需要安装 JDK 7 或者 JDK 6，可以使用<code>homebrew-cask-versions</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap caskroom/versions</div><div class=\"line\">brew cask install java6</div></pre></td></tr></table></figure>\n<p>在 OS X 上，你可以同时安装多个版本的 JDK。你可以通过命令<code>/usr/libexec/java_home -V</code>来查看安装了哪几个 JDK。</p>\n<p>那问题来了，当你运行<code>java</code>或者 Java 程序时使用的是哪个 JDK 呢？在 OS X 下，<code>java</code>也就是<code>/usr/bin/java</code>在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量<code>JAVA_HOME</code>来更改其指向：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -version</div><div class=\"line\">java version <span class=\"string\">\"1.8.0_60\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</div><div class=\"line\">$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version</div><div class=\"line\">java version <span class=\"string\">\"1.6.0_65\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)</div></pre></td></tr></table></figure>\n<p>其中<code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</code>可以用<code>JAVA_HOME=`/usr/libexec/java_home -v 1.6` </code>这种更加通用的方式代替。</p>\n<h3 id=\"jEnv\"><a href=\"#jEnv\" class=\"headerlink\" title=\"jEnv\"></a><a href=\"https://github.com/gcuisinier/jenv\" target=\"_blank\" rel=\"external\">jEnv</a></h3><p>也可以使用 jEnv 来管理不同版本的 JDK，这个工具跟 <a href=\"#rbenv\">rbenv</a> 类似，通过当前目录下的<code>.java-version</code>来决定使用哪个 JDK。jEnv 也可以用 brew 安装。不过要使用 jEnv 要有几个问题：</p>\n<ul>\n<li><p>需要手动把<code>eval &quot;$(jenv init -)&quot;</code>加入 profile，没有 Oh My Zsh 插件。这点是我非常反感的。</p>\n<p>可以把<code>eval &quot;$(jenv init -)&quot;</code>加入<code>~/.zlogin</code>，这样可以避免修改<code>~/.zshrc</code>。</p>\n</li>\n<li>需要手动添加 JDK，不会自动采集系统 JDK。跟 Ruby 不同，OS X 已经提供<code>/usr/libexec/java_home</code>工具来管理安装的 JDK。</li>\n<li>需要 <code>jenv rehash</code>。这个是跟 rbenv 学的。</li>\n</ul>\n<p>所以我建议不要使用 jEnv。</p>\n<h3 id=\"民间使用的-Java-版本切换方法\"><a href=\"#民间使用的-Java-版本切换方法\" class=\"headerlink\" title=\"民间使用的 Java 版本切换方法\"></a>民间使用的 Java 版本切换方法</h3><p>添加以下脚本到当前 shell 配置文件中：<code>~/.zprofile</code>或者<code>~/.bash_profile</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setjdk</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=`/usr/libexec/java_home -v <span class=\"variable\">$@</span>`</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们就可以通过输入一条命令进行版本切换了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setjdk 1.8</div></pre></td></tr></table></figure>\n<h3 id=\"Java-OCD\"><a href=\"#Java-OCD\" class=\"headerlink\" title=\"Java[OCD]\"></a>Java[OCD]</h3><p>作为一个强迫症患者，每当我看到 Java 的错误写法就想纠正过来。</p>\n<p>当指编程语言时，Java 的正确写法是首字母大写，其余小写。其他写法比如<code>JAVA</code>、<code>java</code>都是不对的。</p>\n<p>在其他一些地方会使用小写的<code>java</code>：</p>\n<ul>\n<li><code>java</code>命令</li>\n<li>原文件<code>Main.java</code></li>\n<li>包名<code>java.lang</code></li>\n</ul>\n<p>只有在全大写的标题里使用<code>JAVA</code>或者环境变量<code>JAVA_HOME</code>。</p>\n<h3 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a>IntelliJ IDEA</h3><p>Java 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intellij-idea</div></pre></td></tr></table></figure>\n<p>也可以安装开源免费的 Community Edition：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intellij-idea-ce</div></pre></td></tr></table></figure>\n<p>IntelliJ IDEA 有几套内建的快捷键方案（Keymap）。其中适用于 OS X 的有<code>Mac OS X</code>和<code>Mac OS X 10.5+</code>两种。区别是:</p>\n<ul>\n<li><code>Mac OS X</code>方案和其他平台上的快捷键类似，</li>\n<li>而<code>Mac OS X 10.5+</code>更加符合 OS X 常用的快捷键。</li>\n</ul>\n<p>一个团队使用不同的快捷键会严重影响效率。可以用<code>View | Quick Switch Scheme</code>（<code>⌃ Back Quote</code>）快速切换 Keymap。</p>\n<p>如果可以选择的话，我建议使用<code>Mac OS X</code>方案。因为我经常遇到使用 Windows 的客户，而 Windows 平台上的快捷键和<code>Mac OS X</code>方案类似。</p>\n<p>可以从 IDEA 的<code>Help &gt; Default Keymap Reference</code>打开快捷键的参考手册。不过从这里打开的是<code>Mac OS X 10.5+</code>方案的，而<code>Mac OS X</code>方案的可以从这里找到：<a href=\"http://www.basrikahveci.com/static/ij_keymap_mac.pdf\" target=\"_blank\" rel=\"external\">http://www.basrikahveci.com/static/ij_keymap_mac.pdf</a>。</p>\n<h3 id=\"rbenv\"><a href=\"#rbenv\" class=\"headerlink\" title=\"rbenv\"></a><a href=\"https://github.com/sstephenson/rbenv\" target=\"_blank\" rel=\"external\">rbenv</a></h3><p>人人都需要一个 Ruby 版本管理工具。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv ruby-build</div></pre></td></tr></table></figure>\n<p>然后在<code>~/.zshrc</code>中加上<code>rbenv</code>插件。否则你需要手动添加<code>eval &quot;$(rbenv init -)&quot;</code>到<code>~/zshrc</code>或者<code>~/.zprofile</code>文件里。</p>\n<p>有时候项目会依赖一些奇怪的版本号，比如<code>ruby-2.1.0</code>，这个时候你需要 <a href=\"https://github.com/tpope/rbenv-aliases\" target=\"_blank\" rel=\"external\">rbenv-aliases</a> 帮忙：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv-aliases</div></pre></td></tr></table></figure>\n<p>替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了。chruby 也是一个轻量级工具，而且可以完美的和 Oh My Zsh 集成在一起，我看到有些生产环境在用它。</p>\n<h3 id=\"Ruby-常用别名\"><a href=\"#Ruby-常用别名\" class=\"headerlink\" title=\"Ruby 常用别名\"></a>Ruby 常用别名</h3><p>几乎所有 Ruby 开发人员都会把<code>bi</code>作为<code>bundle install</code>的别名。Oh My Zsh 提供<code>builder</code>插件，这个插件提供了一套别名，比如<code>bi</code>、<code>be</code>。同时还能让你在运行一些常用 gem 的时候直接输入<code>rspec</code>，不需要<code>be rspec</code>这样了。具体包括哪些命令请参考<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>Z shell 对于<code>[</code>和<code>]</code>符号有特殊的处理，所以在运行<code>rake task[parameter]</code>的时候会报错，你需要改成<code>rake task\\[parameter\\]</code>或者<code>noglob rake task[parameter]</code>。然而 Oh My Zsh 已经看穿这一切，自带的 rake 插件已经解决了这个问题：<code>brake task[parameter]</code>。</p>\n<p>添加插件的时候注意把<code>rake</code>放到<code>bundler</code>后面，例如这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(git z sublime history rbenv bundler rake)</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac\" target=\"_blank\" rel=\"external\">Hacker’s Guide to Setting up Your Mac</a></li>\n<li><a href=\"https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell\" target=\"_blank\" rel=\"external\">Setting up a new (OS X) development machine</a></li>\n<li><a href=\"http://www.xialeizhou.com/?p=71\" target=\"_blank\" rel=\"external\">高效 MacBook 工作环境配置</a></li>\n<li><a href=\"http://www.zhihu.com/question/20873070\" target=\"_blank\" rel=\"external\">程序员如何优雅地使用 Mac？</a></li>\n<li><a href=\"http://sspai.com/33493\" target=\"_blank\" rel=\"external\">装点你的 Dock：外观篇</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mac生产力配置备忘\"><a href=\"#Mac生产力配置备忘\" class=\"headerlink\" title=\"Mac生产力配置备忘\"></a>Mac生产力配置备忘</h1><h2 id=\"如何配置一个高效的-Mac-工作环境\"><a href=\"#如何配置一个高效的-Mac-工作环境\" class=\"headerlink\" title=\"如何配置一个高效的 Mac 工作环境\"></a>如何配置一个高效的 Mac 工作环境</h2><p><a href=\"/2017/05/01/Productive-Configuration-For-Mac/\">English Version</a></p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><ol>\n<li><p><a href=\"#1-os-x\">OS X</a></p>\n<ul>\n<li><a href=\"#功能键\">功能键</a></li>\n<li><a href=\"#全键盘控制\">全键盘控制</a></li>\n<li><a href=\"#spotlight-快捷键\">Spotlight 快捷键</a></li>\n<li><a href=\"#输入法快捷键\">输入法快捷键</a></li>\n<li><a href=\"#其他快捷键\">其他快捷键</a></li>\n<li><a href=\"#设置-trackpad-轻点来点按\">设置 Trackpad 轻点来点按</a></li>\n<li><a href=\"#语音\">语音</a></li>\n<li><a href=\"#词典\">词典</a></li>\n<li><a href=\"#dock-position\">Dock Position</a></li>\n<li><a href=\"#更改-caps-lock-键为-control-键\">更改 Caps Lock 键为 Control 键</a></li>\n<li><a href=\"#remove-all-dock-iconsocd\">Remove all Dock icons[OCD]</a></li>\n<li><a href=\"#重置-launchpad-上图标位置ocd\">重置 Launchpad 上图标位置[OCD]</a></li>\n<li><a href=\"#创建大小写敏感的工作区\">创建大小写敏感的工作区</a></li>\n<li><a href=\"#keychain-access\">Keychain Access</a></li>\n</ul>\n</li>\n<li><p><a href=\"#2-常用工具\">常用工具</a></p>\n<ul>\n<li><a href=\"#homebrew\">Homebrew</a></li>\n<li><a href=\"#homebrew-cask\">Homebrew Cask</a></li>\n<li><a href=\"#iterm2\">iTerm2</a></li>\n<li><a href=\"#oh-my-zsh\">Oh My Zsh</a></li>\n<li><a href=\"#stow\">stow</a></li>\n<li><a href=\"#git-常用别名\">Git 常用别名</a></li>\n<li><a href=\"#scroll-reverser\">Scroll Reverser</a></li>\n<li><a href=\"#shiftit\">ShiftIt</a></li>\n<li><a href=\"#sublime-text-2\">Sublime Text 2</a></li>\n<li><a href=\"#macdown\">MacDown</a></li>\n<li><a href=\"#z\">z</a></li>\n<li><a href=\"#vimium\">Vimium</a></li>\n<li><a href=\"#lastpass\">LastPass</a></li>\n<li><a href=\"#sourcetree\">SourceTree</a></li>\n<li><a href=\"#cheatsheet\">CheatSheet</a></li>\n<li><a href=\"#alfred\">Alfred</a></li>\n</ul>\n</li>\n<li><p><a href=\"#3-开发工具\">开发工具</a></p>\n<ul>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#jenv\">jEnv</a></li>\n<li><a href=\"#民间使用的-java-版本切换方法\">民间使用的 Java 版本切换方法</a></li>\n<li><a href=\"#javaocd\">Java[OCD]</a></li>\n<li><a href=\"#intellij-idea\">IntelliJ IDEA</a></li>\n<li><a href=\"#rbenv\">rbenv</a></li>\n<li><a href=\"#ruby-常用别名\">Ruby 常用别名</a></li>\n</ul>\n</li>\n</ol>\n<p>一直想写这么一篇文章，把我从同事那里学到的经验分享出来。市面上有很多类似的文章，写得都非常好，让我受益匪浅。不过我还是有一些自己总结出来的经验想要分享。</p>\n<p>在工作中，我一般会在 1 到 10 人的团队中，经常会结对编程，即两个人共用一台 Mac 工作，因此也经常会把 Mac 外接一个大显示器、鼠标和键盘。我的常用开发平台有 Java、Ruby、Node.js、Web 等，使用 <a href=\"https://www.jetbrains.com/\">JetBrains</a> 的开发工具，比如 IntelliJ IDEA、RubyMine、WebStorm 等。</p>\n<p>我深知自己的知识有限，所以写下本文以便和大家切磋交流。同时更有效率的方法和更好的工具也在不断涌现，我也贪心的希望把更好的方法和工具都收集更到到这里，我会不断更新本文，让它尽量不过时。欢迎在评论区分享你的经验。期待你的反馈。</p>\n<p>我认为“一个高效的 Mac 工作环境”有以下几个特点：</p>\n<ul>\n<li><p>自动化</p>\n<p>举个例子。手动安装一个应用，需要1)打开浏览器，2)搜索应用的名字，3)打开应用网站，4)寻找下载链接和安装方法，5)下载并等待下载完成，6)安装下载文件，7)可能还有后续的安装步骤。而自动化安装一个应用，只需要1)打开终端工具，2)敲入安装命令，3)等待完成这几个步骤。</p>\n<p>自动化可以大大简化操作，提高效率。</p>\n</li>\n<li><p>统一</p>\n<p>我经常结对编程，偶尔会遇到快捷键不一样，命令不同等问题。我强烈建议，至少在一个团队中，大家尽量使用相同的快捷键、命令等环境。（我记得有个实践就是这个，可是我一直没找到该实践的名字和出处，求告诉）</p>\n</li>\n<li><p>够用</p>\n<p>够用就好，如果系统本身已经满足了我的需求，我不会再使用第三方工具。</p>\n</li>\n<li><p>效率</p>\n<p>效率，一切都是为了效率。</p>\n</li>\n</ul>\n<p>本文对于第三方应用如何安装和使用只有最简单的介绍，具体还请参考官方网站和相关文档。</p>\n<p>有些章节标题标注了[OCD]，意思是这些章节带有我强烈的个人色彩，如果你跟我臭味相投，欢迎借鉴，如果你并不认同，请忽略掉好了。</p>\n<h2 id=\"1-OS-X\"><a href=\"#1-OS-X\" class=\"headerlink\" title=\"1. OS X\"></a>1. OS X</h2><p>本节介绍操作系统本身的一些设置。</p>\n<h3 id=\"功能键\"><a href=\"#功能键\" class=\"headerlink\" title=\"功能键\"></a>功能键</h3><p>默认情况下，F1-F12 都是特殊功能，比如调节屏幕亮度。而当你需要键入 F1-F12 时（比如在使用 IntelliJ IDEA 的快捷键时），需要同时按住 Fn。这对于开发人员来说是非常不方便的。</p>\n<p>把 F1-F12 改成标准功能键：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Keyboard</code>标签页中选中<code>Use all F1, F2, etc. keys as standard function keys</code>。</p>\n<h3 id=\"全键盘控制\"><a href=\"#全键盘控制\" class=\"headerlink\" title=\"全键盘控制\"></a>全键盘控制</h3><p>当你在 Sublime Text 里关闭文件时，可能会遇到这样的对话框：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-without-all-controls.png\" alt=\"dialog-box-without-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-without-all-controls</div>\n            </figure>\n<p>注意这个<code>Save</code>按钮跟其他两个按钮不太一样，它的底色是蓝的。这种按钮被称为默认按钮，除了用鼠标点击触发外，还可以通过回车键触发。</p>\n<p>那么问题来了，如果你不想保存，想点击<code>Don&#39;t Save</code>，是不是只能用鼠标点击了呢？</p>\n<p>并不是这样：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Shortcuts</code>标签页中选择<code>All controls</code>；或者使用快捷键<code>⌃F7</code>。之后这个对话框会变成这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-with-all-controls.png\" alt=\"dialog-box-with-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-with-all-controls</div>\n            </figure>\n<p>这个<code>Don&#39;t Save</code>按钮有了一圈蓝边，这个意味着你可以通过空格键触发。不仅如此，你还可以用<code>Tab</code>键把蓝边转移到其他按钮，来实现全键盘控制。</p>\n<p>除了<code>All controls</code>这个方法，你还可以用<code>⌘⌫</code>来选择<code>Don&#39;t Save</code>。<code>⌘⌫</code>的作用是在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。</p>\n<p>除了上述两个办法之外，居然还有个方法！就是按<code>⌘D</code>！据说是因为按<code>⌘+按钮的大写首字母</code>可以触发该按钮。可是！我按了<code>⌘C</code>和<code>⌘S</code>想取消和保存都没用！但是<code>⌘D</code>真的有用！如果仅仅是这也就算了，可是我又手贱试了下 TextEdit，在关闭未保存的文件时弹出的对话框上有三个按钮<code>Delete</code>、<code>Cancel</code>和<code>Save</code>。然而<code>⌘D</code>和<code>⌘C</code>都没用，但是！<code>⌘S</code>可以保存！我完全不能理解！我整个人几乎都是崩溃的，只好以咆哮体写下这段文字。如果谁能解释请务必告诉我，必有重谢！</p>\n<p><code>⌘C</code>不能用应该是因为它绑定到了复制功能；而<code>⌘D</code>不能用因为它的作用是从“打开”对话框或“存储”对话框中选择“桌面”文件夹。</p>\n<p>在这个对话框上，你可以用<code>Esc</code>来执行<code>Cancel</code>操作。</p>\n<h3 id=\"Spotlight-快捷键\"><a href=\"#Spotlight-快捷键\" class=\"headerlink\" title=\"Spotlight 快捷键\"></a>Spotlight 快捷键</h3><p>中文版 OS X 的 Spotlight 的快捷键是<code>⌃Space</code>。这个快捷键有一些问题：</p>\n<ul>\n<li>JetBrains 的 IDE，比如 IntelliJ IDEA、WebStorm 等都使用<code>⌃Space</code>作为自动完成这个最常用功能的快捷键。我不建议更改 IDE 的快捷键，而建议更改 Spotlight 的快捷键。</li>\n<li>对于没有添加中文输入法的 Mac 来说，Spotlight 的快捷键是<code>⌘Space</code>。英语国家的人都是这样的。所以我建议把 Spotlight 的快捷键设置为<code>⌘Space</code>，跟他们一致。</li>\n</ul>\n<h3 id=\"输入法快捷键\"><a href=\"#输入法快捷键\" class=\"headerlink\" title=\"输入法快捷键\"></a>输入法快捷键</h3><p>一般来说切换输入法的快捷键是<code>⌘Space</code>。由于我建议把 Spotlight 的快捷键设置为<code>⌘Space</code>，所以我建议把切换输入法的快捷键设置为<code>⌥Space</code>。</p>\n<h3 id=\"其他快捷键\"><a href=\"#其他快捷键\" class=\"headerlink\" title=\"其他快捷键\"></a>其他快捷键</h3><p>让双手尽量多的键盘和快捷键，少使用鼠标和触摸板，可以大大提高效率。</p>\n<ul>\n<li><p><a href=\"https://support.apple.com/kb/HT201236\">Mac keyboard shortcts</a></p>\n<p>苹果官方文档。当你在写代码，怎么通过快捷键让光标转移到行首、行尾、向上翻页或者将光标移左移一个词？都在这篇文档里。</p>\n</li>\n<li><p><a href=\"https://support.apple.com/kb/HT204434\">Mac keyboard shortcuts for accessibility features</a></p>\n<p>苹果官方文档。回车触发蓝底按钮，空格触发蓝边按钮，都出自这里。</p>\n</li>\n</ul>\n<h3 id=\"设置-Trackpad-轻点来点按\"><a href=\"#设置-Trackpad-轻点来点按\" class=\"headerlink\" title=\"设置 Trackpad 轻点来点按\"></a>设置 Trackpad 轻点来点按</h3><p>默认情况下按下触摸板才是点按（click）。我喜欢设置成用轻点作为点按：</p>\n<p>选择<code>System Preferences</code> &gt; <code>Trackpad</code>，在<code>Point &amp; Click</code>标签页中选中<code>Tap to click</code>。</p>\n<h3 id=\"语音\"><a href=\"#语音\" class=\"headerlink\" title=\"语音\"></a>语音</h3><p>OS X 自带了语音功能，可以用<code>say</code>命令让 Mac 开口说话：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">say hello</div></pre></td></tr></table></figure>\n<p>可以和<code>&amp;&amp;</code>或者<code>;</code>配合使用来提示你某任务已经完成：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</div></pre></td></tr></table></figure>\n<p>通过命令行来听取发音还是有点麻烦。其实我们几乎可以在任何地方选中单词，然后使用快捷键<code>⌥+ESC</code>发音。仅仅需要这样设置一下：选择<code>System Preferences</code> &gt; <code>Dictation &amp; Speech</code>，在<code>Text to Speech</code>标签页中选中<code>Speak selected text when the key is pressed</code>。</p>\n<h3 id=\"词典\"><a href=\"#词典\" class=\"headerlink\" title=\"词典\"></a>词典</h3><p>OS X 自带了词典（Dictionary）。你几乎可以在任何应用中通过三指轻拍触摸板来现实对应单词的释义。</p>\n<p>也可以打开 Dictionary 应用来查找单词。</p>\n<p>可以在 Dictionary 应用中添加英汉汉英词典。</p>\n<h3 id=\"Dock-Position\"><a href=\"#Dock-Position\" class=\"headerlink\" title=\"Dock Position\"></a>Dock Position</h3><p>默认 Dock 在屏幕下方。我们的屏幕一般都是 16:10，Dock 在屏幕下方的话会占据本来就不大的垂直空间。建议把 Dock 放到左边或者右边。</p>\n<h3 id=\"更改-Caps-Lock-键为-Control-键\"><a href=\"#更改-Caps-Lock-键为-Control-键\" class=\"headerlink\" title=\"更改 Caps Lock 键为 Control 键\"></a>更改 Caps Lock 键为 Control 键</h3><p>我经常用到<code>Control</code>键，但这个键在键盘的左下角，很难按到。同时我发现我很少使用<code>Caps Lock</code>键，我一般会用<code>Shift</code>键加字母来输入大写字母，或者先输入小写再（通过快捷键）转换成大写。</p>\n<p>基于以上原因，我把<code>Caps Lock</code>键的功能改成了<code>Control</code>键。很多同事也都这么做的，可能是受到 <a href=\"https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard\">HHKB</a> 的影响。</p>\n<p>设置方法：选择<code>System Preferences</code> &gt; <code>Keyboard</code>，在<code>Keyboard</code>标签页中点击<code>Modifier Keys...</code>按钮，在弹出的窗口中，把<code>Caps Lock (⇪) Key:</code>对应的选项改成<code>⌃ Control</code>。</p>\n<h3 id=\"Remove-all-Dock-icons-OCD\"><a href=\"#Remove-all-Dock-icons-OCD\" class=\"headerlink\" title=\"Remove all Dock icons[OCD]\"></a>Remove all Dock icons[OCD]</h3><p>本条目对于强迫症适用。</p>\n<p>默认情况下 Dock 被一堆系统自带的应用占据着，而其中大部分我都很少使用，当我打开几个常用应用后，Dock 上会有很多图标，每个图标都会被挤得很小。所以我会把所有 Dock 上固定的图标都删掉，这样一来 Dock 上只有我打开的应用。</p>\n<p>PS：Finder 图标是删不掉的。</p>\n<p>除了一个一个删除图标，也可以通过这个命令来隐藏所有的固定图标：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock static-only -boolean <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>恢复也非常简单：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults delete com.apple.dock static-only; killall Dock</div></pre></td></tr></table></figure>\n<p>PS：使用这个方法的话，Dock 上的<code>Downloads</code>也会被隐藏掉。</p>\n<h3 id=\"重置-Launchpad-上图标位置-OCD\"><a href=\"#重置-Launchpad-上图标位置-OCD\" class=\"headerlink\" title=\"重置 Launchpad 上图标位置[OCD]\"></a>重置 Launchpad 上图标位置[OCD]</h3><p>本条目对于强迫症适用。</p>\n<p>新的应用被安装后，经常会跑到 Launchpad 的第一屏，所以它们的位置跟安装的顺序有关系，而我更希望它们可以按照某种更加稳定的顺序排列，比如按照系统默认的顺序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>在默认顺序中，Launchpad 第一屏只有 Apple 自家应用。</p>\n<h3 id=\"创建大小写敏感的工作区\"><a href=\"#创建大小写敏感的工作区\" class=\"headerlink\" title=\"创建大小写敏感的工作区\"></a>创建大小写敏感的工作区</h3><p>在多人合作的项目开发时，因为 Mac 文件系统默认是大小写不敏感的，所以经常会出现一些诡异的问题。创建一个大小写敏感的工作区（workspace）来解决避免这些问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hdiutil create -type SPARSE -fs <span class=\"string\">'Case-sensitive Journaled HFS+'</span> -size 100g -volname workspace ~/Documents/workspace.dmg.sparseimage</div></pre></td></tr></table></figure>\n<p>可以通过三种方式挂载镜像：</p>\n<ol>\n<li>直接双击打开 <code>~/Documents/workspace.dmg.sparseimage</code></li>\n<li><code>open ~/Documents/workspace.dmg.sparseimage</code></li>\n<li><code>hdiutil attach ~/Documents/workspace.dmg.sparseimage</code></li>\n</ol>\n<h3 id=\"Keychain-Access\"><a href=\"#Keychain-Access\" class=\"headerlink\" title=\"Keychain Access\"></a>Keychain Access</h3><p>钥匙串访问（Keychain Access）是一个 OS X 应用程序，对我来说它最大的功能就是查看已经保存的各种账号和密码，包括 Wi-Fi 密码。</p>\n<h2 id=\"2-常用工具\"><a href=\"#2-常用工具\" class=\"headerlink\" title=\"2. 常用工具\"></a>2. 常用工具</h2><p>本节介绍一些常用的，跟开发没有直接关系的第三方应用及其设置。</p>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a><a href=\"http://brew.sh\">Homebrew</a></h3><p>包管理工具，官方称之为<code>The missing package manager for OS X</code>。</p>\n<p>安装步骤见官网。</p>\n<p>有了 brew 以后，要下载工具，比如 MySQL、Gradle、Maven、Node.js 等工具，就不需要去网上下载了，只要一行命令就能搞定：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install mysql gradle maven node</div></pre></td></tr></table></figure>\n<p>PS：安装 brew 的时候会自动下载和安装 Apple 的 Command Line Tools。</p>\n<p>brew 的替代品有 <a href=\"https://www.macports.org/\">MacPorts</a>，现在基本没人用它。</p>\n<h3 id=\"Homebrew-Cask\"><a href=\"#Homebrew-Cask\" class=\"headerlink\" title=\"Homebrew Cask\"></a><a href=\"https://caskroom.github.io\">Homebrew Cask</a></h3><p>brew-cask 允许你使用命令行安装 OS X 应用。比如你可以这样安装 Chrome：<code>brew cask install google-chrome</code>。还有 Evernote、Skype、Sublime Text、VirtualBox 等都可以用 brew-cask 安装。</p>\n<p>brew-cask 是社区驱动的，如果你发现 brew-cask 上的应用不是最新版本，或者缺少你某个应用，你可以自己提交 pull request。</p>\n<p>安装步骤见官网。</p>\n<p>应用也可以通过 App Store 安装，而且有些应用只能通过 App Store 安装，比如 Xcode 等一些 Apple 的应用。App Store 没有对应的命令行工具，还需要 Apple ID。倒是更新起来很方便。</p>\n<p>几乎所有常用的应用都可以通过 brew-cask 安装，而且是从应用的官网上下载，所以你要安装新的应用时，建议用 brew-cask 安装。如果你不知道应用在 brew-cask 中的 ID，可以先用<code>brew cask search</code>命令搜索。</p>\n<h3 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a><a href=\"https://www.iterm2.com/\">iTerm2</a></h3><p>iTerm2 是最常用的终端应用，是 Terminal 应用的替代品。提供了诸如<code>Split Panes</code>等<a href=\"https://www.iterm2.com/features.html\">一群实用特性</a>。它默认的黑色背景让我毫不犹豫的抛弃了 Terminal。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure>\n<p>感谢 brew-cask，我们可以通过命令行自动安装 iTerm2 了。</p>\n<p>在终端里，除了可以用<code>⌃E</code>等快捷键（详见<a href=\"#其他快捷键\">其他快捷键</a>）之外，还可以使用<code>⌥B</code>、<code>⌥F</code>等快捷键（具体可以参考<a href=\"http://ss64.com/bash/syntax-keyboard.html\">这里</a>）。前提是这样设置一下：</p>\n<p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是<code>Default</code>），在<code>Keys</code>标签页中把<code>Left option (⌥) key acts as</code>和<code>Right option (⌥) key acts as</code>都设置成<code>+ESC</code>。</p>\n<p>在打开新的窗口/标签页的时候，默认情况下新窗口总是 HOME 目录，还需要我每次敲命令才能进入工作目录。如果想要这个新窗口在打开的时候就自动进入工作目录，需要如下设置：</p>\n<p>选择<code>Iterm</code>菜单 &gt; <code>Preferences</code> &gt; <code>Profiles</code>，选择你在使用的 Profile（默认是Default），在<code>General</code>标签页中的<code>Working Directory</code>部分中选择<code>Reuse previous seesion&#39;s directory</code>。</p>\n<p>至此，Terminal 应用已经出色的完成了其历史使命。后面命令行就交给 iTerm2 啦。</p>\n<p>在 iTerm2 中双击会自动选中对应的词，三击会选中对应的整行。选中的内容会自动进入剪贴板，不需要再按<code>⌘C</code>复制。</p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a><a href=\"http://ohmyz.sh\">Oh My Zsh</a></h3><p>默认的 Bash 是黑白的，没有色彩。而 Oh My Zsh 可以带你进入彩色时代。Oh My Zsh 同时提供一套插件和工具，可以简化命令行操作。后面我们会看到很多介绍，你会看到我爱死这家伙了。</p>\n<p>安装方法见官网。</p>\n<p>目前我使用的插件有：<code>git z sublime history rbenv bundler rake</code></p>\n<p>Oh My Zsh 使用了 Z shell（zsh），一个和 Bash 相似的 Shell，而非 Bash。</p>\n<p>在 Z shell 中，<code>~/.zshrc</code>是最重要的配置文件。Oh My Zsh 在安装的时候会把当前环境的<code>$PATH</code>写入<code>~/.zshrc</code>中。这并不是我期望的行为，因为使用了 brew，我们基本不再需要去定制<code>$PATH</code>，而 Oh My Zsh 提供的默认<code>$PATH</code>值<code>$HOME/bin:/usr/local/bin:$PATH</code>是非常合适的一个值，它把<code>$HOME/bin</code>加入了<code>$PATH</code>，可以让我们把自己用的脚本放到<code>$HOME/bin</code>下。</p>\n<p>所以建议把<code>~/.zshrc</code>重置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26\">2016年6月17号的一次提交</a>后，<code>zshrc.zsh-template</code>就不再修改<code>$PATH</code>了。请找到<code># export PATH=$HOME/bin:/usr/local/bin:$PATH</code>这一行，把前面的<code>#</code>去掉。</p>\n</blockquote>\n<p>Oh My Zsh 还有很多<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\">有价值的插件</a>。</p>\n<p>替代品有 <a href=\"https://github.com/oh-my-fish/oh-my-fish\">Oh My Fish</a>。基于 <a href=\"http://fishshell.com/\">Fishshell</a> 。</p>\n<h3 id=\"Stow\"><a href=\"#Stow\" class=\"headerlink\" title=\"Stow\"></a><a href=\"http://www.gnu.org/software/stow/\">Stow</a></h3><p>GNU stow 是管理符号链接（symlink）的一个小公举。主要用于 symlink 你的 <a href=\"http://dotfiles.github.io/\">dotfiles</a> 如 emacs，git，fish/zsh 的配置文件。安装只需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install stow</div></pre></td></tr></table></figure>\n<p>安装了 stow 之后，我们可以开始 symlink 一些 dotfiles 了。完整使用 stow 和 dotfiles 的流程可以参考 <a href=\"https://github.com/jcouyang/dotfiles\">https://github.com/jcouyang/dotfiles</a></p>\n<p>当你的 dotfiles 都妥妥的 symlink 到 <code>~/dotfiles</code> 后，push 到 github 上就再也不怕换电脑了。</p>\n<h3 id=\"Git-常用别名\"><a href=\"#Git-常用别名\" class=\"headerlink\" title=\"Git 常用别名\"></a>Git 常用别名</h3><p>几乎每个人都会使用一些方法比如 Git 别名来提高效率，几乎所有人都会把使用<code>git st</code>来代替<code>git status</code>。然而这需要手动设置，每个人也都不完全一样。</p>\n<p>Oh My Zsh 提供了一套系统别名（alias），来达到相同的功能。比如<code>gst</code>作为<code>git status</code>的别名。而且 Git 插件是 Oh My Zsh 默认启用的，相当于你使用了 Oh My Zsh，你就拥有了一套高效率的别名，而且还是全球通用的。是不是棒棒哒？下面是一些我常用的别名：</p>\n<table>\n<thead>\n<tr>\n<th>Alias</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gapa</td>\n<td><code>git add --patch</code></td>\n</tr>\n<tr>\n<td>gc!</td>\n<td><code>git commit -v --amend</code></td>\n</tr>\n<tr>\n<td>gcl</td>\n<td><code>git clone --recursive</code></td>\n</tr>\n<tr>\n<td>gclean</td>\n<td><code>git reset --hard &amp;&amp; git clean -dfx</code></td>\n</tr>\n<tr>\n<td>gcm</td>\n<td><code>git checkout master</code></td>\n</tr>\n<tr>\n<td>gcmsg</td>\n<td><code>git commit -m</code></td>\n</tr>\n<tr>\n<td>gco</td>\n<td><code>git checkout</code></td>\n</tr>\n<tr>\n<td>gd</td>\n<td><code>git diff</code></td>\n</tr>\n<tr>\n<td>gdca</td>\n<td><code>git diff --cached</code></td>\n</tr>\n<tr>\n<td>glola</td>\n<td><code>git log --graph --pretty = format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --all</code></td>\n</tr>\n<tr>\n<td>gp</td>\n<td><code>git push</code></td>\n</tr>\n<tr>\n<td>grbc</td>\n<td><code>git rebase --continue</code></td>\n</tr>\n<tr>\n<td>gst</td>\n<td><code>git status</code></td>\n</tr>\n<tr>\n<td>gup</td>\n<td><code>git pull --rebase</code></td>\n</tr>\n<tr>\n<td>gwip</td>\n<td><code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>完整列表请参考：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a></p>\n<h3 id=\"Scroll-Reverser\"><a href=\"#Scroll-Reverser\" class=\"headerlink\" title=\"Scroll Reverser\"></a>Scroll Reverser</h3><p>当你在浏览一个很长的网页时，你看完了当前显示的内容，想要看后续的内容，你可以在 Trackpad 上双指上滑，或者鼠标滚轮向上滚动。这是被称作“自然”的滚动方向。</p>\n<p>然而在 Windows 里鼠标滚动的行为是相反的：鼠标滚轮向下滚动才会让浏览器显示后续的内容，向上滚动会达到页面的顶部。你可以在 OS X 的系统偏好设置里修改（选择<code>System Preferences</code> &gt; <code>Trackpad</code>，在<code>Scroll &amp; Zoom</code>标签页中不选中<code>Scroll direction: natural</code>），但是这样会同时改变鼠标滚轮的方向和 Trackpad 的方向。</p>\n<p>要想只改变鼠标滚轮的方向，而保持 Trackpad 依旧是“自然”的，我们需要 Scroll Reverser：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install scroll-reverser</div></pre></td></tr></table></figure>\n<p>PS：这货会让三指点击失效</p>\n<h3 id=\"ShiftIt\"><a href=\"#ShiftIt\" class=\"headerlink\" title=\"ShiftIt\"></a>ShiftIt</h3><p>原生 OS X 下只能手动调整窗口大小，所以我们需要窗口管理工具。我用过很多窗口管理工具，可惜大部分工具都存在快捷键冲突的问题（对我来说主要是 IntelliJ IDEA）。ShiftIt 是少见的没有冲突的窗口管理工具：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install shiftit</div></pre></td></tr></table></figure>\n<p>PS：ShiftIt的旧版本需要安装 X11，最新版本已经修正了这个问题。</p>\n<p>替代者有 SizeUp，主要快捷键和 ShiftIt 相同。</p>\n<p>当然如果喜欢 hacking，<a href=\"https://github.com/jigish/slate\">Slate</a>  是个不错的 hackable 的窗口管理工具。配置可以参照 <a href=\"http://thume.ca/howto/2012/11/19/using-slate/\">http://thume.ca/howto/2012/11/19/using-slate/</a></p>\n<h3 id=\"Sublime-Text-2\"><a href=\"#Sublime-Text-2\" class=\"headerlink\" title=\"Sublime Text 2\"></a>Sublime Text 2</h3><p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sublime-text</div></pre></td></tr></table></figure>\n<p>在命令行中指定使用 Sublime Text 打开某文件，是一个非常常用的功能，一般我们会按照 <a href=\"https://www.sublimetext.com/docs/2/osx_command_line.html\">OS X Command Line</a> 中所说执行 <code>ln -s &quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; ~/bin/subl</code> 来增加<code>subl</code>链接。但是如果你用 brew-cask 安装的话，恭喜你，你不需要运行这个命令，因为 brew-cask 自动帮你做了这件事情。而且你卸载 Sublime Text 的时候 brew-cask 会自动删掉这个链接。</p>\n<p>同时 Oh My Zsh 也提供了 Sublime Text 插件，叫做<code>sublime</code>。参考：<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime</a>，这个插件和通过 brew-cask 安装的 Sublime Text 完美兼容。</p>\n<p>替代品有 Atom、TextMate、Sublime Text 3 等，跟 Sublime Text 2 一样，用 brew-cask 安装的话命令行工具会被自动加入<code>$PATH</code>。</p>\n<h3 id=\"MacDown\"><a href=\"#MacDown\" class=\"headerlink\" title=\"MacDown\"></a>MacDown</h3><p>MacDown 是 Markdown 编辑器。由于 Mou 一直不支持代码高亮，我就转向了 MacDown。完美支持 <a href=\"https://help.github.com/articles/github-flavored-markdown/\">GFM</a>。</p>\n<p>我特别喜欢 <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a>，我用 Makdown 来写文章（包括本文），写幻灯片（<a href=\"https://github.com/hakimel/reveal.js/\">reveal.js</a>）。Markdown 可以让我专注于内容本身，而无需花精力在排版和样式上。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install macdown</div></pre></td></tr></table></figure>\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h3><p>在打开终端后，你是怎么进入项目的工作目录？是<code>cd xxx</code>，<code>⌃R</code>还是用别名？</p>\n<p><a href=\"https://github.com/rupa/z\">z</a> 工具可以帮你快速进入目录。比如在我的 Mac 上运行<code>z cask</code>就会进入<code>/usr/local/Library/Taps/caskroom/homebrew-cask/Casks</code>目录。</p>\n<p>这货的安装非常方便，甚至都不需要下载任何东西，因为它已经整合在了 Oh My Zsh 中。编辑<code>~/.zshrc</code>文件，在<code>plugins=(git)</code>这行中加上<code>z</code>变成<code>plugins=(git z)</code>，然后运行<code>source ~/.zshrc</code>重新加载配置文件，就可以使用 z 了。</p>\n<p>替代品有 autojump。autojump 需要使用 brew 安装。</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://vimium.github.io/\">Vimium</a></h3><p>Vimium 是一个 Google Chrome 扩展，让你可以纯键盘操作 Chrome，把你的 Chrome 变成“黑客的浏览器”。</p>\n<p>安装方法请参考官方网站。</p>\n<p>其他浏览器也有类似的工具，比如 FireFox 的 <a href=\"https://github.com/mooz/keysnail\">KeySnail</a>。</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a><a href=\"https://lastpass.com\">LastPass</a></h3><p>LastPass 是管理密码的工具，支持二次验证，提供所有浏览器插件以及 Mac 桌面版本。</p>\n<p>最重要的是，它提供 <strong>命令行</strong> 的版本，可以直接通过 brew 安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lastpass-cli --with-pinentry</div></pre></td></tr></table></figure>\n<p>之后，只需要登陆：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass login you@email.com</div></pre></td></tr></table></figure>\n<p>就可以拷贝密码或者集成到其他命令中了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass show --password gmail.com -c</div></pre></td></tr></table></figure>\n<h3 id=\"SourceTree\"><a href=\"#SourceTree\" class=\"headerlink\" title=\"SourceTree\"></a><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a></h3><p>SourceTree 是 Atlassian 公司出品的一款优秀的 Git 图形化客户端。如果你发现命令行无法满足你的要求，可以试试 SourceTree。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sourcetree</div></pre></td></tr></table></figure>\n<p>用 brew-cask 安装会自动增加命令行工具<code>stree</code>到<code>$PATH</code>里。在命令行中输入<code>stree</code>可以快速用 SourceTree 打开当前 Git 仓库。详细用法请参见<code>stree --help</code>。</p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a><a href=\"http://www.mediaatelier.com/CheatSheet/\">CheatSheet</a></h3><p>CheatSheet 能够显示当前程序的快捷键列表，默认的快捷键是长按<code>⌘</code>。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.mediaatelier.com/CheatSheet/imgs/main.png\" alt=\"CheatSheet\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheatSheet</div>\n            </figure>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cheatsheet</div></pre></td></tr></table></figure>\n<h3 id=\"Alfred\"><a href=\"#Alfred\" class=\"headerlink\" title=\"Alfred\"></a><a href=\"https://www.alfredapp.com\">Alfred</a></h3><p>Mac 用户不用鼠标键盘的必备神器，配合大量 Workflows，习惯之后可以大大减少操作时间。</p>\n<p>上手简单，调教成本在后期自定义 Workflows，不过有大量雷锋使用者提供的现成扩展，访问<a href=\"http://www.alfredworkflow.com/\">这里</a>挑选喜欢的，并可以极其简单地根据自己的需要修改。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h2 id=\"3-开发工具\"><a href=\"#3-开发工具\" class=\"headerlink\" title=\"3. 开发工具\"></a>3. 开发工具</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>现在 OS X 都不会自带 JDK 了，所以进行 Java 开发的话，需要下载 JDK。在 brew-cask 之前，我们需要从 <a href=\"https://developer.apple.com/downloads/\">https://developer.apple.com/downloads/</a> 或者 Oracle 网站上下载。还有更麻烦的－－卸载 JDK 和升级 JDK。</p>\n<p>JDK 安装文件是 pkg 格式，卸载和<code>.app</code>不一样，且没有自动卸载方式。</p>\n<p>而 brew-cask 提供了自动安装和卸载功能，能够自动从官网上下载并安装 JDK 8。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install java</div></pre></td></tr></table></figure>\n<p>如果你需要安装 JDK 7 或者 JDK 6，可以使用<code>homebrew-cask-versions</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap caskroom/versions</div><div class=\"line\">brew cask install java6</div></pre></td></tr></table></figure>\n<p>在 OS X 上，你可以同时安装多个版本的 JDK。你可以通过命令<code>/usr/libexec/java_home -V</code>来查看安装了哪几个 JDK。</p>\n<p>那问题来了，当你运行<code>java</code>或者 Java 程序时使用的是哪个 JDK 呢？在 OS X 下，<code>java</code>也就是<code>/usr/bin/java</code>在默认情况下指向的是已经安装的最新版本。但是你可以设置环境变量<code>JAVA_HOME</code>来更改其指向：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -version</div><div class=\"line\">java version <span class=\"string\">\"1.8.0_60\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</div><div class=\"line\">$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version</div><div class=\"line\">java version <span class=\"string\">\"1.6.0_65\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)</div></pre></td></tr></table></figure>\n<p>其中<code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</code>可以用<code>JAVA_HOME=`/usr/libexec/java_home -v 1.6` </code>这种更加通用的方式代替。</p>\n<h3 id=\"jEnv\"><a href=\"#jEnv\" class=\"headerlink\" title=\"jEnv\"></a><a href=\"https://github.com/gcuisinier/jenv\">jEnv</a></h3><p>也可以使用 jEnv 来管理不同版本的 JDK，这个工具跟 <a href=\"#rbenv\">rbenv</a> 类似，通过当前目录下的<code>.java-version</code>来决定使用哪个 JDK。jEnv 也可以用 brew 安装。不过要使用 jEnv 要有几个问题：</p>\n<ul>\n<li><p>需要手动把<code>eval &quot;$(jenv init -)&quot;</code>加入 profile，没有 Oh My Zsh 插件。这点是我非常反感的。</p>\n<p>可以把<code>eval &quot;$(jenv init -)&quot;</code>加入<code>~/.zlogin</code>，这样可以避免修改<code>~/.zshrc</code>。</p>\n</li>\n<li>需要手动添加 JDK，不会自动采集系统 JDK。跟 Ruby 不同，OS X 已经提供<code>/usr/libexec/java_home</code>工具来管理安装的 JDK。</li>\n<li>需要 <code>jenv rehash</code>。这个是跟 rbenv 学的。</li>\n</ul>\n<p>所以我建议不要使用 jEnv。</p>\n<h3 id=\"民间使用的-Java-版本切换方法\"><a href=\"#民间使用的-Java-版本切换方法\" class=\"headerlink\" title=\"民间使用的 Java 版本切换方法\"></a>民间使用的 Java 版本切换方法</h3><p>添加以下脚本到当前 shell 配置文件中：<code>~/.zprofile</code>或者<code>~/.bash_profile</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setjdk</span></span>() &#123;</div><div class=\"line\">    <span class=\"built_in\">export</span> JAVA_HOME=`/usr/libexec/java_home -v <span class=\"variable\">$@</span>`</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样我们就可以通过输入一条命令进行版本切换了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setjdk 1.8</div></pre></td></tr></table></figure>\n<h3 id=\"Java-OCD\"><a href=\"#Java-OCD\" class=\"headerlink\" title=\"Java[OCD]\"></a>Java[OCD]</h3><p>作为一个强迫症患者，每当我看到 Java 的错误写法就想纠正过来。</p>\n<p>当指编程语言时，Java 的正确写法是首字母大写，其余小写。其他写法比如<code>JAVA</code>、<code>java</code>都是不对的。</p>\n<p>在其他一些地方会使用小写的<code>java</code>：</p>\n<ul>\n<li><code>java</code>命令</li>\n<li>原文件<code>Main.java</code></li>\n<li>包名<code>java.lang</code></li>\n</ul>\n<p>只有在全大写的标题里使用<code>JAVA</code>或者环境变量<code>JAVA_HOME</code>。</p>\n<h3 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a>IntelliJ IDEA</h3><p>Java 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intellij-idea</div></pre></td></tr></table></figure>\n<p>也可以安装开源免费的 Community Edition：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install intellij-idea-ce</div></pre></td></tr></table></figure>\n<p>IntelliJ IDEA 有几套内建的快捷键方案（Keymap）。其中适用于 OS X 的有<code>Mac OS X</code>和<code>Mac OS X 10.5+</code>两种。区别是:</p>\n<ul>\n<li><code>Mac OS X</code>方案和其他平台上的快捷键类似，</li>\n<li>而<code>Mac OS X 10.5+</code>更加符合 OS X 常用的快捷键。</li>\n</ul>\n<p>一个团队使用不同的快捷键会严重影响效率。可以用<code>View | Quick Switch Scheme</code>（<code>⌃ Back Quote</code>）快速切换 Keymap。</p>\n<p>如果可以选择的话，我建议使用<code>Mac OS X</code>方案。因为我经常遇到使用 Windows 的客户，而 Windows 平台上的快捷键和<code>Mac OS X</code>方案类似。</p>\n<p>可以从 IDEA 的<code>Help &gt; Default Keymap Reference</code>打开快捷键的参考手册。不过从这里打开的是<code>Mac OS X 10.5+</code>方案的，而<code>Mac OS X</code>方案的可以从这里找到：<a href=\"http://www.basrikahveci.com/static/ij_keymap_mac.pdf\">http://www.basrikahveci.com/static/ij_keymap_mac.pdf</a>。</p>\n<h3 id=\"rbenv\"><a href=\"#rbenv\" class=\"headerlink\" title=\"rbenv\"></a><a href=\"https://github.com/sstephenson/rbenv\">rbenv</a></h3><p>人人都需要一个 Ruby 版本管理工具。rbenv 就是这样一个轻量级工具，它可以通过 brew 安装。</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv ruby-build</div></pre></td></tr></table></figure>\n<p>然后在<code>~/.zshrc</code>中加上<code>rbenv</code>插件。否则你需要手动添加<code>eval &quot;$(rbenv init -)&quot;</code>到<code>~/zshrc</code>或者<code>~/.zprofile</code>文件里。</p>\n<p>有时候项目会依赖一些奇怪的版本号，比如<code>ruby-2.1.0</code>，这个时候你需要 <a href=\"https://github.com/tpope/rbenv-aliases\">rbenv-aliases</a> 帮忙：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv-aliases</div></pre></td></tr></table></figure>\n<p>替代品有 RVM、chruby。因为 RVM 不能通过 brew 安装，并且安装的时候会没有节操的修改一堆文件，所以被我早早的弃用了。chruby 也是一个轻量级工具，而且可以完美的和 Oh My Zsh 集成在一起，我看到有些生产环境在用它。</p>\n<h3 id=\"Ruby-常用别名\"><a href=\"#Ruby-常用别名\" class=\"headerlink\" title=\"Ruby 常用别名\"></a>Ruby 常用别名</h3><p>几乎所有 Ruby 开发人员都会把<code>bi</code>作为<code>bundle install</code>的别名。Oh My Zsh 提供<code>builder</code>插件，这个插件提供了一套别名，比如<code>bi</code>、<code>be</code>。同时还能让你在运行一些常用 gem 的时候直接输入<code>rspec</code>，不需要<code>be rspec</code>这样了。具体包括哪些命令请参考<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler\">这里</a>。</p>\n<p>Z shell 对于<code>[</code>和<code>]</code>符号有特殊的处理，所以在运行<code>rake task[parameter]</code>的时候会报错，你需要改成<code>rake task\\[parameter\\]</code>或者<code>noglob rake task[parameter]</code>。然而 Oh My Zsh 已经看穿这一切，自带的 rake 插件已经解决了这个问题：<code>brake task[parameter]</code>。</p>\n<p>添加插件的时候注意把<code>rake</code>放到<code>bundler</code>后面，例如这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(git z sublime history rbenv bundler rake)</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac\">Hacker’s Guide to Setting up Your Mac</a></li>\n<li><a href=\"https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell\">Setting up a new (OS X) development machine</a></li>\n<li><a href=\"http://www.xialeizhou.com/?p=71\">高效 MacBook 工作环境配置</a></li>\n<li><a href=\"http://www.zhihu.com/question/20873070\">程序员如何优雅地使用 Mac？</a></li>\n<li><a href=\"http://sspai.com/33493\">装点你的 Dock：外观篇</a></li>\n</ul>\n"},{"title":"Productive Configuration For Mac","author":"Messiah","comments":1,"date":"2017-05-01T03:28:00.000Z","_content":"# Productive Configuration For Mac\n\n## How to setup a efficient working environment\n\n*Translated from [Mac生产力配置备忘](/2017/04/10/Mac生产力配置备忘/), thanks to author: Messiah from Hangchou China - fff*\n\n## Table of Contents\n  * [1. OS X](#1-os-x)\n    * [Function Keys](#function-keys)\n    * [Keyboard Only Control](#keyboard-only-control)\n    * [Others](#others)\n    * [Change `click` of Trackpad to `Tap`](#change-`click`-of-trackpad-to-`tap`)\n    * [Voice](#voice)\n    * [Dock Position](#dock-position)\n    * [Change `Caps Lock` to `Control`](#change-`caps-lock`-to-`control`)\n    * [Remove all Dock icons[OCD]](#remove-all-dock-icons[ocd])\n    * [Reset the order of icons on Launchpad[OCD]](#reset-the-order-of-icons-on-launchpad[ocd])\n    * [Keychain Access](#keychain-access)\n  * [2. Daily Tools](#2-daily-tools)\n    * [Homebrew](#homebrew)\n    * [Homebrew Cask](#homebrew-cask)\n    * [iTerm2](#iterm2)\n    * [Oh My Zsh](#oh-my-zsh)\n    * [Stow](#stow)\n    * [Git Alias](#git-alias)\n    * [ShiftIt](#shiftit)\n    * [Sublime Text 2](#sublime-text-2)\n    * [MarkDown](#markdown)\n    * [z](#z)\n    * [Vimium](#vimium)\n    * [LastPass](#lastpass)\n    * [SourceTree](#sourcetree)\n    * [CheatSheet](#cheatsheet)\n    * [Alfred](#alfred)\n  * [3. Tools for developers](#3-tools-for-developers)\n    * [Java](#java)\n    * [rbenv](#rbenv)\n    * [Ruby Daily Alias](#ruby-daily-alias)\n  * [References](#references)\n\nI was always thinking about writing this article, to share all the experiences I've learnt from other colleagues. Though there are already some really good books, from which I've learnt a lot also. But I still want to share my own experiences.\n\nIn projects, I normally work with 1 to 10 people, and pairing a lot by sharing the same laptop, with external display, and extra mouse, keyboard. I'm mostly working with Java, Ruby, Node.js, Web and etc, and using lots of software from [JetBrains](https://www.jetbrains.com/), like IntelliJ IDEA, RubyMine, WebStorm, etc.\n\nI know my knowledge is so limited, so I want the opinions from you by sharing you this article. Now days, more efficient way and better tools are still keeping comming, I'll keep updating it, to collect the better ways and tools here, it's my greedy wish. Thank u for share some experience on The comments section . Looking forward to your feedback.\n\nSeveral points of efficient Mac environment in my opinion:\n\n- Automate\n\n  Take a example, there are several steps to install an application manually: \n  1. Open your browser, \n  2. Search by the application name,\n  3. Open the official site for the applicaiton,\n  4. Find the download link,\n  5. Downloading,\n  6. Install it,\n  7. Some post steps.\n  \n  But with automatic tools, you only required to do:\n  1. Open terminal,\n  2. Type in commands,\n  3. Wait to be finished.\n\n  Automate helps to reduce the steps and increase efficiency significantly.\n\n- Consistence\n\n  When I'm pairing, sometimes the shortcuts or commands are different between each other's laptop. I strongly recommend that, at least in the team, try to keep using the same shortcut and commands(I forget the practice name, there have to be one, please let me know if you get it).\n\n- Just enough\n\n  Enough is perfect. If the system itself provides the function, I won't install any other third party tools.\n\n- Efficiency\n\n  Everything is about efficiency.\n\n*For third party applications only simple steps are provided, please go to offial site for detailed installation and instruction documents.*\n\n*Some sections are marked with [OCD], that means it's my personal preference, take it or ignore it, it all depends on if you like it or not.*\n\n*[OCD(obsessive-compulsive disorder)](https://www.google.co.za/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CBsQFjAAahUKEwiDve-b7JHJAhUDxxQKHXF2DOE&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObsessive%25E2%2580%2593compulsive_disorder&usg=AFQjCNGDkJsHHtm6hy60uzEMBn2ee3rSoA&bvm=bv.107467506,d.d24), I didn't mean it, just make fun. Yes, I don't have that disease ;)*\n\n\n\n## 1. OS X\n\nThings related with OS X settings.\n\n### Function Keys\n\nBy default, F1-F12 are special function keys, like adjust screen brightness. You are required to press Fn at the same time, when you need input F1-F12(like IntelliJ IDEA shortcuts). It's not so convenient for developers.\n\nTo avoid pressing Fn: go to `System Preferences` > `Keyboard`，select `Use all F1, F2, etc. keys as standard function keys` in `Keyboard` tab。\n\n### Keyboard Only Control\n\nYou may see this dialog before, when you try to close files in Sublime Text:\n\n![dialog-box-without-all-controls](/img/dialog-box-without-all-controls.png)\n\nYou may notice that the `Save` button is quite different with the other two, it's BLUE. This kind of blue button is called `default button`, except triggering by clicking, you also can trigger it by `enter`.\n\nWhat else, how to trigger `Don't Save` without mouse clicking?\n\nGo to `System Preferences` > `Keyboard`, select `All controls` in `Shortcuts` tab or just press `⌃F7`. And the dialog will turn into:\n\n![dialog-box-with-all-controls](/img/dialog-box-with-all-controls.png)\n\nThe `Don't Save` button has borders now, so you can trigger it by `space`. And also, you can move the focus(blue borders) to other buttons by press `tab`, you can get rid of your mouse now.\n\nExcept the way above, you can also select `Don't Save` by click `⌘⌫`(command+delete). This shortcut means select any button which means 'delete' or 'do not save'.\n\nOf course, you may click `Esc` to trigger `Cancel`.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### Others\n\nReduce using of Mouse and Trackpad may increase your efficiency.\n\n- [Mac keyboard shortcts](https://support.apple.com/kb/HT201236)\n\n  Apple official documents. Like how to move cursor between lines, words and so on.\n  \n- [Mac keyboard shortcuts for accessibility features](https://support.apple.com/kb/HT204434)\n\n  Apple official documents. The selection of blue button part is from this.\n\n### Change `click` of Trackpad to `Tap`\n\nBy default Trackpad is triggered by click, but you can change it to tap.\n\nGoto `System Preferences` > `Trackpad`，check `Tap to click` in `Point & Click` tab.\n\n### Voice\n\nOS X can speak by：\n\n```sh\nsay hello\n```\n\nCombine it with other bash commands using `&&` or `;` like this:\n\n```sh\nbrew update && brew upgrade && brew cleanup ; say mission complete\n```\n\nAlso you can let it speak almost anywhere by selecting one word and press `⌥+Esc`(Alt/Option+Esc). Before that you need goto `System Preferences` > `Dictation & Speech`, check `Speak selected text when the key is pressed` in `Text to Speech` tab. \n\n*Some lines are missing here. As not helping a lot - fff*\n\n### Dock Position\n\nDock comes at the bottom of screen as default, but as the resolution is 16:10, we'd better move it to left or right of screen to gain more vertical space.\n\n### Change `Caps Lock` to `Control`\n\nI use `Control` a lot, but it's at the left buttom corner, which is quite hard to reach. And I prefer `Shift` to input capitals, or input lower case and transform them with shortcut, so I use `Caps Lock` quite few.\n\nSo, I change `Caps Lock` into `Control`. And I found that lots twers are doing the same thing, may be influenced by [HHKB](https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard).\n\nHowto: goto `System Preferences` > `Keyboard`, click `Modifier Keys...` in `Keyboard` tab, in the popup window change the option `Caps Lock (⇪) Key:` to `⌃ Control`.\n\n### Remove all Dock icons[OCD]\n\n*本条目对于强迫症适用。It's for OCD(obsessive-compulsive disorder)*\n\nThere are several icons on the Dock by default, I rarely use most of them. And after opening several daily applications, the Dock comes so noisy, and the icons turn to really small. So I remove all the static icons on the Dock, to make space for runing applications.\n\n*Finder cannot be removed.*\n\nThis command can easily hide all static Dock icons instead of removing them one by one:\n\n```sh\ndefaults write com.apple.dock static-only -boolean true; killall Dock\n```\n\nIt's easy to recovery:\n\n```sh\ndefaults delete com.apple.dock static-only; killall Dock\n```\n\n*The `Downloads`Folder on the Dock will be hidden too*\n\n\n### Reset the order of icons on Launchpad[OCD]\n\n*本条目对于强迫症适用。It's for OCD(obsessive-compulsive disorder)*\n\n```sh\ndefaults write com.apple.dock ResetLaunchPad -bool true; killall Dock\n```\n\n### Keychain Access\n\nKeychain Access is a Mac OS X application. It can be used to find saved accounts and passwords including Wi-Fi password.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n## 2. Daily Tools\n\nSome routine software, and not necessarily related to development.\n\n### [Homebrew](http://brew.sh)\n\nPackage management, official description: \"The missing package manager for OS X\".\n\nGo to official site for installation steps.\n\nAfter installation, you only need to run command below to install mysql, gradle, maven, node：\n\n```sh\nbrew install mysql gradle maven node\n```\n\nPS: install brew will download and install Apple Command Line Tools automatically.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [Homebrew Cask](https://caskroom.github.io/)\n\nbrew-cask helps you to install OS X Applications. Like to install Chrome：`brew cask install google-chrome`. Also Evernote, Skype, Sublime Text, VirtualBox, Java7 ...\n\nbrew-cask is driven by community, you may raise a pull request when you found any missing or outdated application.\n\nYou can find the installation method on offical website.\n\nYou would like to search if you not sure if some application is already in cask.\n```sh\nbrew cask search java7\n```\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [iTerm2](https://www.iterm2.com/)\n\niTerm2 is the most widely used terminal tool, considered as the replacement of Terminal. It provides [a group of practical features](https://www.iterm2.com/features.html), including `Split Panes`. Its default black background makes me throw away OS X' inbuilt Terminal application without any hesitation.\n\nInstallation:\n\n```sh\nbrew cask install iterm2\n```\n\nThanks to brew-cask ~\n\nIn iTerm2, except the commond shortcuts like `^E`(ctrl+E)(find more [here](#Others)). And after some configuration you can have more shortcuts like `⌥B`(alt+B), `⌥F`(alt+F). \nHowTo: go to `Preferences` > `Profiles` > `Keys`, change the option of `Left option (⌥) key acts as` and `Right option (⌥) key acts as` to `+ESC`.\n\nWhen you open new window/tab, by default you're at user home directory, and need input commands to go somewhere else. If you want to open new window/tab in previous directory, you can set it like this:\n`Preferences` > `Profiles`, and select your profile('Default' for most of time), go to `General` tab, check `Reuse previous seesion's directory` for `Working Directory`.\n\nIf you want to save all the current windows/tabs layout, press `⌘⇧S`(command+shift+S) to save the window arrangement. Also you can find this item in the `Window` menu on the top.(*added by fff*)\n\nTill now, Terminal should be given up, and turn to use iTerm2.\n\nAnd in iTerm2, double click will select the according word, triple click will select the current line. Also the selected content will be in your clip-board, no addition `⌘C`(command+C) is required.\n\n### [Oh My Zsh](http://ohmyz.sh)\n\nBy default Bash is only white and black, there is no more colors there. And On-My-Zsh brings the colorful world to you. Oh-My-Zsh also brings you a set of plugins and tools, which is quite handy for simplify commands input. In the below you will find that I love it to death.\n\nGo to official site for installation steps.\n\nPlugins I'm using: `git z sublime history rbenv bundler rake`\n\nOh-My-Zsh uses Z shell（zsh）, which is quite close to Bash, but it's not Bash.\n\nIn Z shell, `~/.zshrc` is the most important configure file. Oh-My-Zsh will set the current path into `~/.zshrc` as `$PATH` during installation. As I'm using brew, this is not something that I want to have. With brew, we are not encouraged to customize `$PAHT`, and by default Oh-My-Zsh already set `$PAHT` with quite good value:`$HOME/bin:/usr/local/bin:$PATH`, in which contains the `$HOME/bin`, it means we can put customized scripts in `$HOME/bin`.\n\nso I recommend you to reset the `~/.zshrc`:\n\n```sh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n> [Since a commit on Jun 17 2016](https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26), the `zshrc.zsh-template` didn't change `$PATH` any more. Find `# export PATH=$HOME/bin:/usr/local/bin:$PATH` and remove the `#` to make our life better。\n\nOh-My-Zsh gets [more valuable plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview).\n\nBesides Oh-My-Zsh, there is [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)，which based on [Fishshell](http://fishshell.com/).\n\n### [Stow](http://www.gnu.org/software/stow/)\nGNU stow is the super girl(-.-) of symlink management. Mainly it's used to symlink your [dotfiles](http://dotfiles.github.io/), like emacs，git configuration files of fish/zsh.\n\nInstallation:\n\n```\nbrew install stow\n```\n\nAfter installing, we can symlink the dotfiles. The full instructions for stow and dotfiles are here:<https://github.com/jcouyang/dotfiles>.\n\nAfter symlinking all your dotfiles to `~/dotfiles`, push it to github. There is no worries any more for setuping another new laptop.\n\n### Git Alias\n\nAlmost everyone is looking for ways to increase their efficiency, like git alias, using `git st` instead of `git status`. But it requires some manual configuration, which makes everyone's configuration differ.\n\nOh-My-Zsh provides a set of system aliases to achieve the same purpose. For example: take `gst` as the alias of `git status`. Also the git plugin of Oh-My-Zsh is enabled by default, which means if you're using Oh-My-Zsh, you are having a set of efficient aliases, which is been commonly used globally, isn't that wonderful?!\n\nSome of my frequently used aliases are:\n\nAlias | Command\n----- | -------\ngapa  | `git add --patch`\ngc!   | `git commit -v --amend`\ngcl   | `git clone --recursive`\ngclean| `git reset --hard && git clean -dfx`\ngcm   | `git checkout master`\ngcmsg | `git commit -m`\ngco   | `git checkout`\ngd    | `git diff`\ngdca  | `git diff --cached`\nglola | `git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all`\ngp    | `git push`\ngrbc  | `git rebase --continue`\ngst   | `git status`\ngup   | `git pull --rebase`\ngwip  | `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"`\n\n\nThe full list is here: <https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git>, or simply run command `alias | grep git` in Oh-My-Zsh window.\n\n\n*Some lines are missing here. As not helping a lot - fff*\n\n\n### ShiftIt\n\nIn OS X you only can adjust window size by dragging. I've tried lots of window management tools, but most of them have the conflict key mapping(mostly with IntelliJ IDEA). ShiftIt is the apparently rare one without any conflicts.\n\nInstallation:\n\n```sh\nbrew cask install shiftit\n```\n\nSizeUp is one replacer，share the same main shortcuts with ShiftIt.\n\nDivvy is another replacer, need to purchase through appstore.(*added by fff*)\n\nFor hackers: [Slate](https://github.com/jigish/slate), configuration reference: <http://thume.ca/howto/2012/11/19/using-slate/>\n\n### Sublime Text 2\n\nInstallation:\n\n```sh\nbrew cask install sublime-text\n```\n\nOpen file with Sublime Text in command line is quite handy, normally we need to link it first(following:[OS X Command Line](https://www.sublimetext.com/docs/2/osx_command_line.html)) with: `ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl`. \n\nBut if you install it with brew-cask, the problem is already sorted by brew-cask, and it will remove the link when you uninstall Sublime Text.\n\nAt the same time, Oh-My-Zsh also provides the plugin for Sublime Text: `sublime`(<https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime>), which is perfectly compliant with brew installed Sublime Text.\n\nReplacers: Atom, TextMate, Sublime Text 3 etc. For all of them, brew-cask will manage the links for you.\n\n### [MarkDown](https://daringfireball.net/projects/markdown/)\n\nMacDown is a Markdown editor. As Mou doesn't support code highlighting, I switched to MacDown, which supports [GFM](https://help.github.com/articles/github-flavored-markdown/) perfectly.\n\nI like Markdown a lot, and I write articles(include this one) with Markdown, also for slides([reveal.js](https://github.com/hakimel/reveal.js/)). Markdown makes me focus on the content itself, and won't waste me too much time on the styles and layouts.\n\nInstallation:\n\n```sh\nbrew cask install macdown\n```\n\n### [z](https://github.com/rupa/z)\n\nAfter opening new terminal, how do you get to the working directory? `cd xxx` or `^R`(ctrl+R, bash reverse search), or alias?\n\nz helps you get the target directory easily. Like running `z cask` in my terminal, it will lead me to `/usr/local/Library/Taps/caskroom/homebrew-cask/Casks`.\n\nIt's quite easy to install, nothing is required to be downloaded, as it's already in Oh-My-Zsh. Open `~/.zshrc`, find plugins configuration line like this:`plugins=(git)`, and put `z` inside the parentheses like:`plugins=(git z)`, then re-initial terminal by `source ~/.zshrc`, it's there now.\n\nAutojump is a replacer, which requires to be installed by brew.\n\n### [Vimium](https://vimium.github.io/)\n\nVimium is a Google Chrome extension, which turns your chrome into a \"hackers's browser\", you can operate your Chrome via keyboard.\n\nFor installation please go to Chrome Extension Market.\n\nFor firefox there is a similar solution: [KeySnail](https://github.com/mooz/keysnail).\n\n### [LastPass](https://lastpass.com)\n\nLastPass is a password management tool, support a second login step, provides plugins for every browser and also OS X desktop version.\n\nThe most important thing, it provides **command line** version, install it by:\n\n```sh\nbrew install lastpass-cli --with-pinentry\n```\n\nthen, login into your account:\n\n```sh\nlpass login you@email.com\n```\n\nSo you can copy password or integrate into other commands:\n\n```sh\nlpass show --password gmail.com -c\n```\n\n### [SourceTree](https://www.sourcetreeapp.com/)\n\nSourceTree is an outstanding git GUI client by Atlassian. You may try if you want more than command line.\n\nInstallation:\n\n```sh\nbrew cask install sourcetree\n```\n\nBrew-cast will add `stree` to `$PATH` when installing it. Run `stree` from terminal will invoke SourceTree open the Git repository under current path. for more: `stree --help`.\n\n### [CheatSheet](http://www.mediaatelier.com/CheatSheet/)\n\nCheatSheet will show a list of all active short cuts of the current application. Just hold the `⌘` for a bit longer.\n\n![CheatSheet](http://www.mediaatelier.com/CheatSheet/imgs/main.png)\n\nInstallation:\n\n```sh\nbrew cask install cheatsheet\n```\n\n### [Alfred](https://www.alfredapp.com)\n\nThe must have tool for Mac user, comes together with a bunch of workflows, which will extremely save your operating time.\n\nEasy to start, but takes more time to setup your self-defined workflows, but anyway there are already lots of workflows shared by nice people, visit [here](http://www.alfredworkflow.com/), choose what you like, and modify it in your way.\n\nInstallation:\n\n```sh\nbrew cask install alfred\n```\n\n## 3. Tools for developers\n\n### Java\n\nThere is no default JDK any more for new version of OS X, so you need to download and install it before you want to do some Java projects.\n\nBefore brew-cask, we are used to download from: <https://developer.apple.com/downloads/>. But the drawback is that uninstall or upgrades take significant time.\nFor JDK package, which is pkg format, there is no automatic way to uninstall it.\n\nBut good news is brew-cask can do it for you:\n\n```sh\nbrew cask install java\n```\n\nIf you need Java-7 or Java-6, you can get from `homebrew-cask-versions`：\n\n```sh\nbrew tap caskroom/versions\nbrew cask install java6\n```\n\nYou can install several versions of JDK in Mac OS X, `/usr/libexec/java_home -V` will list all of them.\n\nSo here is the problem, Which one is the one used by running `java` or any Java application? normally, OS X invokes the newest version of all those installed JDK versions. But you can change it by set `JAVA_HOME`:\n\n```sh\n$ java -version\njava version \"1.8.0_60\"\nJava(TM) SE Runtime Environment (build 1.8.0_60-b27)\nJava HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version\njava version \"1.6.0_65\"\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)\n```\n\nYou may change `JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home` into `` JAVA_HOME=`/usr/libexec/java_home -v 1.6` ``, which is more widely used.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [rbenv](https://github.com/sstephenson/rbenv)\n\nEveryone needs a Ruby version management tool. That's rbenv, which is quite light and can be installed by brew.\n\nInstallation:\n\n```sh\nbrew install rbenv ruby-build\n```\n\nThen you need to enable `rbenv` plugin of Oh-My-Zsh, or you need to add `eval \"$(rbenv init -)\"` to `~/.zshrc` or `~/.zprofile`\n\nSometimes projects will depend on unique Ruby versions, like: `ruby-2.1.0`, you should go checkout [rbenv-aliases](https://github.com/tpope/rbenv-aliases).\n\n```sh\nbrew install rbenv-aliases\n```\n\nAlternatives: RVM, chruby. But as RVM is unable to be installed by brew, and it also changes a bunch of files without any respect, that's why I already gave RVM up. chruby is another light weight tool, and works perfactly with Oh-My-Zsh, it seems someone is using it in production enviroment.\n\n### Ruby Daily Alias\n\nAlmost every Rubyist takes `bi` as alias of `bundle install`. Oh-My-Zsh provides `builder` plugin to setup a set of alias, like `bi`, `be`. Also allow you to run `rspec` directly, without any leading `be` or `bundle exec`. \n\nFor a detailed list please go to <https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler>.\n\nZsh shell has special usage for `[` and `]`, so `rake task[parameter]` will fail, you need to run it like this: `rake task\\[parameter\\]` or `noglob rake task[parameter]`. However Oh-My-Zsh already solves it, using the buildin rake plugin: `brake task[parameter]`.\n\nBe aware of that, put `rake` after `bundler` when modifying the plugin settings in `~/.zshrc`, for example:\n```\nplugins=(git z sublime history rbenv bundler rake)\n```\n\n## References\n\n- [Hacker's Guide to Setting up Your Mac](http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac)\n- [Setting up a new (OS X) development machine](https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell)\n- [高效 MacBook 工作环境配置](http://www.xialeizhou.com/?p=71) **\"Efficient MacBook working configurration\", you need google translate*\n- [程序员如何优雅地使用 Mac？](http://www.zhihu.com/question/20873070) **\"How to use Mac elegantly for programmer\", you need google translate also*\n- [装点你的 Dock：外观篇](http://sspai.com/33493)","source":"_posts/Productive-Configuration-For-Mac.md","raw":"title: Productive Configuration For Mac\nauthor: Messiah\ncomments: true\ntags:\n  - mac\n  - homebrew\n  - IDE\n  - zsh\n  - git\n  - sublime\ncategories:\n  - 备忘录\ndate: 2017-05-01 11:28:00\n---\n# Productive Configuration For Mac\n\n## How to setup a efficient working environment\n\n*Translated from [Mac生产力配置备忘](/2017/04/10/Mac生产力配置备忘/), thanks to author: Messiah from Hangchou China - fff*\n\n## Table of Contents\n  * [1. OS X](#1-os-x)\n    * [Function Keys](#function-keys)\n    * [Keyboard Only Control](#keyboard-only-control)\n    * [Others](#others)\n    * [Change `click` of Trackpad to `Tap`](#change-`click`-of-trackpad-to-`tap`)\n    * [Voice](#voice)\n    * [Dock Position](#dock-position)\n    * [Change `Caps Lock` to `Control`](#change-`caps-lock`-to-`control`)\n    * [Remove all Dock icons[OCD]](#remove-all-dock-icons[ocd])\n    * [Reset the order of icons on Launchpad[OCD]](#reset-the-order-of-icons-on-launchpad[ocd])\n    * [Keychain Access](#keychain-access)\n  * [2. Daily Tools](#2-daily-tools)\n    * [Homebrew](#homebrew)\n    * [Homebrew Cask](#homebrew-cask)\n    * [iTerm2](#iterm2)\n    * [Oh My Zsh](#oh-my-zsh)\n    * [Stow](#stow)\n    * [Git Alias](#git-alias)\n    * [ShiftIt](#shiftit)\n    * [Sublime Text 2](#sublime-text-2)\n    * [MarkDown](#markdown)\n    * [z](#z)\n    * [Vimium](#vimium)\n    * [LastPass](#lastpass)\n    * [SourceTree](#sourcetree)\n    * [CheatSheet](#cheatsheet)\n    * [Alfred](#alfred)\n  * [3. Tools for developers](#3-tools-for-developers)\n    * [Java](#java)\n    * [rbenv](#rbenv)\n    * [Ruby Daily Alias](#ruby-daily-alias)\n  * [References](#references)\n\nI was always thinking about writing this article, to share all the experiences I've learnt from other colleagues. Though there are already some really good books, from which I've learnt a lot also. But I still want to share my own experiences.\n\nIn projects, I normally work with 1 to 10 people, and pairing a lot by sharing the same laptop, with external display, and extra mouse, keyboard. I'm mostly working with Java, Ruby, Node.js, Web and etc, and using lots of software from [JetBrains](https://www.jetbrains.com/), like IntelliJ IDEA, RubyMine, WebStorm, etc.\n\nI know my knowledge is so limited, so I want the opinions from you by sharing you this article. Now days, more efficient way and better tools are still keeping comming, I'll keep updating it, to collect the better ways and tools here, it's my greedy wish. Thank u for share some experience on The comments section . Looking forward to your feedback.\n\nSeveral points of efficient Mac environment in my opinion:\n\n- Automate\n\n  Take a example, there are several steps to install an application manually: \n  1. Open your browser, \n  2. Search by the application name,\n  3. Open the official site for the applicaiton,\n  4. Find the download link,\n  5. Downloading,\n  6. Install it,\n  7. Some post steps.\n  \n  But with automatic tools, you only required to do:\n  1. Open terminal,\n  2. Type in commands,\n  3. Wait to be finished.\n\n  Automate helps to reduce the steps and increase efficiency significantly.\n\n- Consistence\n\n  When I'm pairing, sometimes the shortcuts or commands are different between each other's laptop. I strongly recommend that, at least in the team, try to keep using the same shortcut and commands(I forget the practice name, there have to be one, please let me know if you get it).\n\n- Just enough\n\n  Enough is perfect. If the system itself provides the function, I won't install any other third party tools.\n\n- Efficiency\n\n  Everything is about efficiency.\n\n*For third party applications only simple steps are provided, please go to offial site for detailed installation and instruction documents.*\n\n*Some sections are marked with [OCD], that means it's my personal preference, take it or ignore it, it all depends on if you like it or not.*\n\n*[OCD(obsessive-compulsive disorder)](https://www.google.co.za/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CBsQFjAAahUKEwiDve-b7JHJAhUDxxQKHXF2DOE&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObsessive%25E2%2580%2593compulsive_disorder&usg=AFQjCNGDkJsHHtm6hy60uzEMBn2ee3rSoA&bvm=bv.107467506,d.d24), I didn't mean it, just make fun. Yes, I don't have that disease ;)*\n\n\n\n## 1. OS X\n\nThings related with OS X settings.\n\n### Function Keys\n\nBy default, F1-F12 are special function keys, like adjust screen brightness. You are required to press Fn at the same time, when you need input F1-F12(like IntelliJ IDEA shortcuts). It's not so convenient for developers.\n\nTo avoid pressing Fn: go to `System Preferences` > `Keyboard`，select `Use all F1, F2, etc. keys as standard function keys` in `Keyboard` tab。\n\n### Keyboard Only Control\n\nYou may see this dialog before, when you try to close files in Sublime Text:\n\n![dialog-box-without-all-controls](/img/dialog-box-without-all-controls.png)\n\nYou may notice that the `Save` button is quite different with the other two, it's BLUE. This kind of blue button is called `default button`, except triggering by clicking, you also can trigger it by `enter`.\n\nWhat else, how to trigger `Don't Save` without mouse clicking?\n\nGo to `System Preferences` > `Keyboard`, select `All controls` in `Shortcuts` tab or just press `⌃F7`. And the dialog will turn into:\n\n![dialog-box-with-all-controls](/img/dialog-box-with-all-controls.png)\n\nThe `Don't Save` button has borders now, so you can trigger it by `space`. And also, you can move the focus(blue borders) to other buttons by press `tab`, you can get rid of your mouse now.\n\nExcept the way above, you can also select `Don't Save` by click `⌘⌫`(command+delete). This shortcut means select any button which means 'delete' or 'do not save'.\n\nOf course, you may click `Esc` to trigger `Cancel`.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### Others\n\nReduce using of Mouse and Trackpad may increase your efficiency.\n\n- [Mac keyboard shortcts](https://support.apple.com/kb/HT201236)\n\n  Apple official documents. Like how to move cursor between lines, words and so on.\n  \n- [Mac keyboard shortcuts for accessibility features](https://support.apple.com/kb/HT204434)\n\n  Apple official documents. The selection of blue button part is from this.\n\n### Change `click` of Trackpad to `Tap`\n\nBy default Trackpad is triggered by click, but you can change it to tap.\n\nGoto `System Preferences` > `Trackpad`，check `Tap to click` in `Point & Click` tab.\n\n### Voice\n\nOS X can speak by：\n\n```sh\nsay hello\n```\n\nCombine it with other bash commands using `&&` or `;` like this:\n\n```sh\nbrew update && brew upgrade && brew cleanup ; say mission complete\n```\n\nAlso you can let it speak almost anywhere by selecting one word and press `⌥+Esc`(Alt/Option+Esc). Before that you need goto `System Preferences` > `Dictation & Speech`, check `Speak selected text when the key is pressed` in `Text to Speech` tab. \n\n*Some lines are missing here. As not helping a lot - fff*\n\n### Dock Position\n\nDock comes at the bottom of screen as default, but as the resolution is 16:10, we'd better move it to left or right of screen to gain more vertical space.\n\n### Change `Caps Lock` to `Control`\n\nI use `Control` a lot, but it's at the left buttom corner, which is quite hard to reach. And I prefer `Shift` to input capitals, or input lower case and transform them with shortcut, so I use `Caps Lock` quite few.\n\nSo, I change `Caps Lock` into `Control`. And I found that lots twers are doing the same thing, may be influenced by [HHKB](https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard).\n\nHowto: goto `System Preferences` > `Keyboard`, click `Modifier Keys...` in `Keyboard` tab, in the popup window change the option `Caps Lock (⇪) Key:` to `⌃ Control`.\n\n### Remove all Dock icons[OCD]\n\n*本条目对于强迫症适用。It's for OCD(obsessive-compulsive disorder)*\n\nThere are several icons on the Dock by default, I rarely use most of them. And after opening several daily applications, the Dock comes so noisy, and the icons turn to really small. So I remove all the static icons on the Dock, to make space for runing applications.\n\n*Finder cannot be removed.*\n\nThis command can easily hide all static Dock icons instead of removing them one by one:\n\n```sh\ndefaults write com.apple.dock static-only -boolean true; killall Dock\n```\n\nIt's easy to recovery:\n\n```sh\ndefaults delete com.apple.dock static-only; killall Dock\n```\n\n*The `Downloads`Folder on the Dock will be hidden too*\n\n\n### Reset the order of icons on Launchpad[OCD]\n\n*本条目对于强迫症适用。It's for OCD(obsessive-compulsive disorder)*\n\n```sh\ndefaults write com.apple.dock ResetLaunchPad -bool true; killall Dock\n```\n\n### Keychain Access\n\nKeychain Access is a Mac OS X application. It can be used to find saved accounts and passwords including Wi-Fi password.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n## 2. Daily Tools\n\nSome routine software, and not necessarily related to development.\n\n### [Homebrew](http://brew.sh)\n\nPackage management, official description: \"The missing package manager for OS X\".\n\nGo to official site for installation steps.\n\nAfter installation, you only need to run command below to install mysql, gradle, maven, node：\n\n```sh\nbrew install mysql gradle maven node\n```\n\nPS: install brew will download and install Apple Command Line Tools automatically.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [Homebrew Cask](https://caskroom.github.io/)\n\nbrew-cask helps you to install OS X Applications. Like to install Chrome：`brew cask install google-chrome`. Also Evernote, Skype, Sublime Text, VirtualBox, Java7 ...\n\nbrew-cask is driven by community, you may raise a pull request when you found any missing or outdated application.\n\nYou can find the installation method on offical website.\n\nYou would like to search if you not sure if some application is already in cask.\n```sh\nbrew cask search java7\n```\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [iTerm2](https://www.iterm2.com/)\n\niTerm2 is the most widely used terminal tool, considered as the replacement of Terminal. It provides [a group of practical features](https://www.iterm2.com/features.html), including `Split Panes`. Its default black background makes me throw away OS X' inbuilt Terminal application without any hesitation.\n\nInstallation:\n\n```sh\nbrew cask install iterm2\n```\n\nThanks to brew-cask ~\n\nIn iTerm2, except the commond shortcuts like `^E`(ctrl+E)(find more [here](#Others)). And after some configuration you can have more shortcuts like `⌥B`(alt+B), `⌥F`(alt+F). \nHowTo: go to `Preferences` > `Profiles` > `Keys`, change the option of `Left option (⌥) key acts as` and `Right option (⌥) key acts as` to `+ESC`.\n\nWhen you open new window/tab, by default you're at user home directory, and need input commands to go somewhere else. If you want to open new window/tab in previous directory, you can set it like this:\n`Preferences` > `Profiles`, and select your profile('Default' for most of time), go to `General` tab, check `Reuse previous seesion's directory` for `Working Directory`.\n\nIf you want to save all the current windows/tabs layout, press `⌘⇧S`(command+shift+S) to save the window arrangement. Also you can find this item in the `Window` menu on the top.(*added by fff*)\n\nTill now, Terminal should be given up, and turn to use iTerm2.\n\nAnd in iTerm2, double click will select the according word, triple click will select the current line. Also the selected content will be in your clip-board, no addition `⌘C`(command+C) is required.\n\n### [Oh My Zsh](http://ohmyz.sh)\n\nBy default Bash is only white and black, there is no more colors there. And On-My-Zsh brings the colorful world to you. Oh-My-Zsh also brings you a set of plugins and tools, which is quite handy for simplify commands input. In the below you will find that I love it to death.\n\nGo to official site for installation steps.\n\nPlugins I'm using: `git z sublime history rbenv bundler rake`\n\nOh-My-Zsh uses Z shell（zsh）, which is quite close to Bash, but it's not Bash.\n\nIn Z shell, `~/.zshrc` is the most important configure file. Oh-My-Zsh will set the current path into `~/.zshrc` as `$PATH` during installation. As I'm using brew, this is not something that I want to have. With brew, we are not encouraged to customize `$PAHT`, and by default Oh-My-Zsh already set `$PAHT` with quite good value:`$HOME/bin:/usr/local/bin:$PATH`, in which contains the `$HOME/bin`, it means we can put customized scripts in `$HOME/bin`.\n\nso I recommend you to reset the `~/.zshrc`:\n\n```sh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n> [Since a commit on Jun 17 2016](https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26), the `zshrc.zsh-template` didn't change `$PATH` any more. Find `# export PATH=$HOME/bin:/usr/local/bin:$PATH` and remove the `#` to make our life better。\n\nOh-My-Zsh gets [more valuable plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview).\n\nBesides Oh-My-Zsh, there is [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish)，which based on [Fishshell](http://fishshell.com/).\n\n### [Stow](http://www.gnu.org/software/stow/)\nGNU stow is the super girl(-.-) of symlink management. Mainly it's used to symlink your [dotfiles](http://dotfiles.github.io/), like emacs，git configuration files of fish/zsh.\n\nInstallation:\n\n```\nbrew install stow\n```\n\nAfter installing, we can symlink the dotfiles. The full instructions for stow and dotfiles are here:<https://github.com/jcouyang/dotfiles>.\n\nAfter symlinking all your dotfiles to `~/dotfiles`, push it to github. There is no worries any more for setuping another new laptop.\n\n### Git Alias\n\nAlmost everyone is looking for ways to increase their efficiency, like git alias, using `git st` instead of `git status`. But it requires some manual configuration, which makes everyone's configuration differ.\n\nOh-My-Zsh provides a set of system aliases to achieve the same purpose. For example: take `gst` as the alias of `git status`. Also the git plugin of Oh-My-Zsh is enabled by default, which means if you're using Oh-My-Zsh, you are having a set of efficient aliases, which is been commonly used globally, isn't that wonderful?!\n\nSome of my frequently used aliases are:\n\nAlias | Command\n----- | -------\ngapa  | `git add --patch`\ngc!   | `git commit -v --amend`\ngcl   | `git clone --recursive`\ngclean| `git reset --hard && git clean -dfx`\ngcm   | `git checkout master`\ngcmsg | `git commit -m`\ngco   | `git checkout`\ngd    | `git diff`\ngdca  | `git diff --cached`\nglola | `git log --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all`\ngp    | `git push`\ngrbc  | `git rebase --continue`\ngst   | `git status`\ngup   | `git pull --rebase`\ngwip  | `git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit -m \"--wip--\"`\n\n\nThe full list is here: <https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git>, or simply run command `alias | grep git` in Oh-My-Zsh window.\n\n\n*Some lines are missing here. As not helping a lot - fff*\n\n\n### ShiftIt\n\nIn OS X you only can adjust window size by dragging. I've tried lots of window management tools, but most of them have the conflict key mapping(mostly with IntelliJ IDEA). ShiftIt is the apparently rare one without any conflicts.\n\nInstallation:\n\n```sh\nbrew cask install shiftit\n```\n\nSizeUp is one replacer，share the same main shortcuts with ShiftIt.\n\nDivvy is another replacer, need to purchase through appstore.(*added by fff*)\n\nFor hackers: [Slate](https://github.com/jigish/slate), configuration reference: <http://thume.ca/howto/2012/11/19/using-slate/>\n\n### Sublime Text 2\n\nInstallation:\n\n```sh\nbrew cask install sublime-text\n```\n\nOpen file with Sublime Text in command line is quite handy, normally we need to link it first(following:[OS X Command Line](https://www.sublimetext.com/docs/2/osx_command_line.html)) with: `ln -s \"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\" ~/bin/subl`. \n\nBut if you install it with brew-cask, the problem is already sorted by brew-cask, and it will remove the link when you uninstall Sublime Text.\n\nAt the same time, Oh-My-Zsh also provides the plugin for Sublime Text: `sublime`(<https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime>), which is perfectly compliant with brew installed Sublime Text.\n\nReplacers: Atom, TextMate, Sublime Text 3 etc. For all of them, brew-cask will manage the links for you.\n\n### [MarkDown](https://daringfireball.net/projects/markdown/)\n\nMacDown is a Markdown editor. As Mou doesn't support code highlighting, I switched to MacDown, which supports [GFM](https://help.github.com/articles/github-flavored-markdown/) perfectly.\n\nI like Markdown a lot, and I write articles(include this one) with Markdown, also for slides([reveal.js](https://github.com/hakimel/reveal.js/)). Markdown makes me focus on the content itself, and won't waste me too much time on the styles and layouts.\n\nInstallation:\n\n```sh\nbrew cask install macdown\n```\n\n### [z](https://github.com/rupa/z)\n\nAfter opening new terminal, how do you get to the working directory? `cd xxx` or `^R`(ctrl+R, bash reverse search), or alias?\n\nz helps you get the target directory easily. Like running `z cask` in my terminal, it will lead me to `/usr/local/Library/Taps/caskroom/homebrew-cask/Casks`.\n\nIt's quite easy to install, nothing is required to be downloaded, as it's already in Oh-My-Zsh. Open `~/.zshrc`, find plugins configuration line like this:`plugins=(git)`, and put `z` inside the parentheses like:`plugins=(git z)`, then re-initial terminal by `source ~/.zshrc`, it's there now.\n\nAutojump is a replacer, which requires to be installed by brew.\n\n### [Vimium](https://vimium.github.io/)\n\nVimium is a Google Chrome extension, which turns your chrome into a \"hackers's browser\", you can operate your Chrome via keyboard.\n\nFor installation please go to Chrome Extension Market.\n\nFor firefox there is a similar solution: [KeySnail](https://github.com/mooz/keysnail).\n\n### [LastPass](https://lastpass.com)\n\nLastPass is a password management tool, support a second login step, provides plugins for every browser and also OS X desktop version.\n\nThe most important thing, it provides **command line** version, install it by:\n\n```sh\nbrew install lastpass-cli --with-pinentry\n```\n\nthen, login into your account:\n\n```sh\nlpass login you@email.com\n```\n\nSo you can copy password or integrate into other commands:\n\n```sh\nlpass show --password gmail.com -c\n```\n\n### [SourceTree](https://www.sourcetreeapp.com/)\n\nSourceTree is an outstanding git GUI client by Atlassian. You may try if you want more than command line.\n\nInstallation:\n\n```sh\nbrew cask install sourcetree\n```\n\nBrew-cast will add `stree` to `$PATH` when installing it. Run `stree` from terminal will invoke SourceTree open the Git repository under current path. for more: `stree --help`.\n\n### [CheatSheet](http://www.mediaatelier.com/CheatSheet/)\n\nCheatSheet will show a list of all active short cuts of the current application. Just hold the `⌘` for a bit longer.\n\n![CheatSheet](http://www.mediaatelier.com/CheatSheet/imgs/main.png)\n\nInstallation:\n\n```sh\nbrew cask install cheatsheet\n```\n\n### [Alfred](https://www.alfredapp.com)\n\nThe must have tool for Mac user, comes together with a bunch of workflows, which will extremely save your operating time.\n\nEasy to start, but takes more time to setup your self-defined workflows, but anyway there are already lots of workflows shared by nice people, visit [here](http://www.alfredworkflow.com/), choose what you like, and modify it in your way.\n\nInstallation:\n\n```sh\nbrew cask install alfred\n```\n\n## 3. Tools for developers\n\n### Java\n\nThere is no default JDK any more for new version of OS X, so you need to download and install it before you want to do some Java projects.\n\nBefore brew-cask, we are used to download from: <https://developer.apple.com/downloads/>. But the drawback is that uninstall or upgrades take significant time.\nFor JDK package, which is pkg format, there is no automatic way to uninstall it.\n\nBut good news is brew-cask can do it for you:\n\n```sh\nbrew cask install java\n```\n\nIf you need Java-7 or Java-6, you can get from `homebrew-cask-versions`：\n\n```sh\nbrew tap caskroom/versions\nbrew cask install java6\n```\n\nYou can install several versions of JDK in Mac OS X, `/usr/libexec/java_home -V` will list all of them.\n\nSo here is the problem, Which one is the one used by running `java` or any Java application? normally, OS X invokes the newest version of all those installed JDK versions. But you can change it by set `JAVA_HOME`:\n\n```sh\n$ java -version\njava version \"1.8.0_60\"\nJava(TM) SE Runtime Environment (build 1.8.0_60-b27)\nJava HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version\njava version \"1.6.0_65\"\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)\n```\n\nYou may change `JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home` into `` JAVA_HOME=`/usr/libexec/java_home -v 1.6` ``, which is more widely used.\n\n*Some lines are missing here. As not helping a lot - fff*\n\n### [rbenv](https://github.com/sstephenson/rbenv)\n\nEveryone needs a Ruby version management tool. That's rbenv, which is quite light and can be installed by brew.\n\nInstallation:\n\n```sh\nbrew install rbenv ruby-build\n```\n\nThen you need to enable `rbenv` plugin of Oh-My-Zsh, or you need to add `eval \"$(rbenv init -)\"` to `~/.zshrc` or `~/.zprofile`\n\nSometimes projects will depend on unique Ruby versions, like: `ruby-2.1.0`, you should go checkout [rbenv-aliases](https://github.com/tpope/rbenv-aliases).\n\n```sh\nbrew install rbenv-aliases\n```\n\nAlternatives: RVM, chruby. But as RVM is unable to be installed by brew, and it also changes a bunch of files without any respect, that's why I already gave RVM up. chruby is another light weight tool, and works perfactly with Oh-My-Zsh, it seems someone is using it in production enviroment.\n\n### Ruby Daily Alias\n\nAlmost every Rubyist takes `bi` as alias of `bundle install`. Oh-My-Zsh provides `builder` plugin to setup a set of alias, like `bi`, `be`. Also allow you to run `rspec` directly, without any leading `be` or `bundle exec`. \n\nFor a detailed list please go to <https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler>.\n\nZsh shell has special usage for `[` and `]`, so `rake task[parameter]` will fail, you need to run it like this: `rake task\\[parameter\\]` or `noglob rake task[parameter]`. However Oh-My-Zsh already solves it, using the buildin rake plugin: `brake task[parameter]`.\n\nBe aware of that, put `rake` after `bundler` when modifying the plugin settings in `~/.zshrc`, for example:\n```\nplugins=(git z sublime history rbenv bundler rake)\n```\n\n## References\n\n- [Hacker's Guide to Setting up Your Mac](http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac)\n- [Setting up a new (OS X) development machine](https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell)\n- [高效 MacBook 工作环境配置](http://www.xialeizhou.com/?p=71) **\"Efficient MacBook working configurration\", you need google translate*\n- [程序员如何优雅地使用 Mac？](http://www.zhihu.com/question/20873070) **\"How to use Mac elegantly for programmer\", you need google translate also*\n- [装点你的 Dock：外观篇](http://sspai.com/33493)","slug":"Productive-Configuration-For-Mac","published":1,"updated":"2017-06-09T01:53:12.000Z","layout":"post","photos":[],"link":"","_id":"cj3plemxs000f761w3hceqccr","content":"<h1 id=\"Productive-Configuration-For-Mac\"><a href=\"#Productive-Configuration-For-Mac\" class=\"headerlink\" title=\"Productive Configuration For Mac\"></a>Productive Configuration For Mac</h1><h2 id=\"How-to-setup-a-efficient-working-environment\"><a href=\"#How-to-setup-a-efficient-working-environment\" class=\"headerlink\" title=\"How to setup a efficient working environment\"></a>How to setup a efficient working environment</h2><p><em>Translated from <a href=\"/2017/04/10/Mac生产力配置备忘/\">Mac生产力配置备忘</a>, thanks to author: Messiah from Hangchou China - fff</em></p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><ul>\n<li><a href=\"#1-os-x\">1. OS X</a><ul>\n<li><a href=\"#function-keys\">Function Keys</a></li>\n<li><a href=\"#keyboard-only-control\">Keyboard Only Control</a></li>\n<li><a href=\"#others\">Others</a></li>\n<li><a href=\"#change-`click`-of-trackpad-to-`tap`\">Change <code>click</code> of Trackpad to <code>Tap</code></a></li>\n<li><a href=\"#voice\">Voice</a></li>\n<li><a href=\"#dock-position\">Dock Position</a></li>\n<li><a href=\"#change-`caps-lock`-to-`control`\">Change <code>Caps Lock</code> to <code>Control</code></a></li>\n<li><a href=\"#remove-all-dock-icons[ocd]\">Remove all Dock icons[OCD]</a></li>\n<li><a href=\"#reset-the-order-of-icons-on-launchpad[ocd]\">Reset the order of icons on Launchpad[OCD]</a></li>\n<li><a href=\"#keychain-access\">Keychain Access</a></li>\n</ul>\n</li>\n<li><a href=\"#2-daily-tools\">2. Daily Tools</a><ul>\n<li><a href=\"#homebrew\">Homebrew</a></li>\n<li><a href=\"#homebrew-cask\">Homebrew Cask</a></li>\n<li><a href=\"#iterm2\">iTerm2</a></li>\n<li><a href=\"#oh-my-zsh\">Oh My Zsh</a></li>\n<li><a href=\"#stow\">Stow</a></li>\n<li><a href=\"#git-alias\">Git Alias</a></li>\n<li><a href=\"#shiftit\">ShiftIt</a></li>\n<li><a href=\"#sublime-text-2\">Sublime Text 2</a></li>\n<li><a href=\"#markdown\">MarkDown</a></li>\n<li><a href=\"#z\">z</a></li>\n<li><a href=\"#vimium\">Vimium</a></li>\n<li><a href=\"#lastpass\">LastPass</a></li>\n<li><a href=\"#sourcetree\">SourceTree</a></li>\n<li><a href=\"#cheatsheet\">CheatSheet</a></li>\n<li><a href=\"#alfred\">Alfred</a></li>\n</ul>\n</li>\n<li><a href=\"#3-tools-for-developers\">3. Tools for developers</a><ul>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#rbenv\">rbenv</a></li>\n<li><a href=\"#ruby-daily-alias\">Ruby Daily Alias</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<p>I was always thinking about writing this article, to share all the experiences I’ve learnt from other colleagues. Though there are already some really good books, from which I’ve learnt a lot also. But I still want to share my own experiences.</p>\n<p>In projects, I normally work with 1 to 10 people, and pairing a lot by sharing the same laptop, with external display, and extra mouse, keyboard. I’m mostly working with Java, Ruby, Node.js, Web and etc, and using lots of software from <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"external\">JetBrains</a>, like IntelliJ IDEA, RubyMine, WebStorm, etc.</p>\n<p>I know my knowledge is so limited, so I want the opinions from you by sharing you this article. Now days, more efficient way and better tools are still keeping comming, I’ll keep updating it, to collect the better ways and tools here, it’s my greedy wish. Thank u for share some experience on The comments section . Looking forward to your feedback.</p>\n<p>Several points of efficient Mac environment in my opinion:</p>\n<ul>\n<li><p>Automate</p>\n<p>Take a example, there are several steps to install an application manually: </p>\n<ol>\n<li>Open your browser, </li>\n<li>Search by the application name,</li>\n<li>Open the official site for the applicaiton,</li>\n<li>Find the download link,</li>\n<li>Downloading,</li>\n<li>Install it,</li>\n<li>Some post steps.</li>\n</ol>\n<p>But with automatic tools, you only required to do:</p>\n<ol>\n<li>Open terminal,</li>\n<li>Type in commands,</li>\n<li>Wait to be finished.</li>\n</ol>\n<p>Automate helps to reduce the steps and increase efficiency significantly.</p>\n</li>\n<li><p>Consistence</p>\n<p>When I’m pairing, sometimes the shortcuts or commands are different between each other’s laptop. I strongly recommend that, at least in the team, try to keep using the same shortcut and commands(I forget the practice name, there have to be one, please let me know if you get it).</p>\n</li>\n<li><p>Just enough</p>\n<p>Enough is perfect. If the system itself provides the function, I won’t install any other third party tools.</p>\n</li>\n<li><p>Efficiency</p>\n<p>Everything is about efficiency.</p>\n</li>\n</ul>\n<p><em>For third party applications only simple steps are provided, please go to offial site for detailed installation and instruction documents.</em></p>\n<p><em>Some sections are marked with [OCD], that means it’s my personal preference, take it or ignore it, it all depends on if you like it or not.</em></p>\n<p><em><a href=\"https://www.google.co.za/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwiDve-b7JHJAhUDxxQKHXF2DOE&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObsessive%25E2%2580%2593compulsive_disorder&amp;usg=AFQjCNGDkJsHHtm6hy60uzEMBn2ee3rSoA&amp;bvm=bv.107467506,d.d24\" target=\"_blank\" rel=\"external\">OCD(obsessive-compulsive disorder)</a>, I didn’t mean it, just make fun. Yes, I don’t have that disease ;)</em></p>\n<h2 id=\"1-OS-X\"><a href=\"#1-OS-X\" class=\"headerlink\" title=\"1. OS X\"></a>1. OS X</h2><p>Things related with OS X settings.</p>\n<h3 id=\"Function-Keys\"><a href=\"#Function-Keys\" class=\"headerlink\" title=\"Function Keys\"></a>Function Keys</h3><p>By default, F1-F12 are special function keys, like adjust screen brightness. You are required to press Fn at the same time, when you need input F1-F12(like IntelliJ IDEA shortcuts). It’s not so convenient for developers.</p>\n<p>To avoid pressing Fn: go to <code>System Preferences</code> &gt; <code>Keyboard</code>，select <code>Use all F1, F2, etc. keys as standard function keys</code> in <code>Keyboard</code> tab。</p>\n<h3 id=\"Keyboard-Only-Control\"><a href=\"#Keyboard-Only-Control\" class=\"headerlink\" title=\"Keyboard Only Control\"></a>Keyboard Only Control</h3><p>You may see this dialog before, when you try to close files in Sublime Text:</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-without-all-controls.png\" alt=\"dialog-box-without-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-without-all-controls</div>\n            </figure>\n<p>You may notice that the <code>Save</code> button is quite different with the other two, it’s BLUE. This kind of blue button is called <code>default button</code>, except triggering by clicking, you also can trigger it by <code>enter</code>.</p>\n<p>What else, how to trigger <code>Don&#39;t Save</code> without mouse clicking?</p>\n<p>Go to <code>System Preferences</code> &gt; <code>Keyboard</code>, select <code>All controls</code> in <code>Shortcuts</code> tab or just press <code>⌃F7</code>. And the dialog will turn into:</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-with-all-controls.png\" alt=\"dialog-box-with-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-with-all-controls</div>\n            </figure>\n<p>The <code>Don&#39;t Save</code> button has borders now, so you can trigger it by <code>space</code>. And also, you can move the focus(blue borders) to other buttons by press <code>tab</code>, you can get rid of your mouse now.</p>\n<p>Except the way above, you can also select <code>Don&#39;t Save</code> by click <code>⌘⌫</code>(command+delete). This shortcut means select any button which means ‘delete’ or ‘do not save’.</p>\n<p>Of course, you may click <code>Esc</code> to trigger <code>Cancel</code>.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h3><p>Reduce using of Mouse and Trackpad may increase your efficiency.</p>\n<ul>\n<li><p><a href=\"https://support.apple.com/kb/HT201236\" target=\"_blank\" rel=\"external\">Mac keyboard shortcts</a></p>\n<p>Apple official documents. Like how to move cursor between lines, words and so on.</p>\n</li>\n<li><p><a href=\"https://support.apple.com/kb/HT204434\" target=\"_blank\" rel=\"external\">Mac keyboard shortcuts for accessibility features</a></p>\n<p>Apple official documents. The selection of blue button part is from this.</p>\n</li>\n</ul>\n<h3 id=\"Change-click-of-Trackpad-to-Tap\"><a href=\"#Change-click-of-Trackpad-to-Tap\" class=\"headerlink\" title=\"Change click of Trackpad to Tap\"></a>Change <code>click</code> of Trackpad to <code>Tap</code></h3><p>By default Trackpad is triggered by click, but you can change it to tap.</p>\n<p>Goto <code>System Preferences</code> &gt; <code>Trackpad</code>，check <code>Tap to click</code> in <code>Point &amp; Click</code> tab.</p>\n<h3 id=\"Voice\"><a href=\"#Voice\" class=\"headerlink\" title=\"Voice\"></a>Voice</h3><p>OS X can speak by：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">say hello</div></pre></td></tr></table></figure>\n<p>Combine it with other bash commands using <code>&amp;&amp;</code> or <code>;</code> like this:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</div></pre></td></tr></table></figure>\n<p>Also you can let it speak almost anywhere by selecting one word and press <code>⌥+Esc</code>(Alt/Option+Esc). Before that you need goto <code>System Preferences</code> &gt; <code>Dictation &amp; Speech</code>, check <code>Speak selected text when the key is pressed</code> in <code>Text to Speech</code> tab. </p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Dock-Position\"><a href=\"#Dock-Position\" class=\"headerlink\" title=\"Dock Position\"></a>Dock Position</h3><p>Dock comes at the bottom of screen as default, but as the resolution is 16:10, we’d better move it to left or right of screen to gain more vertical space.</p>\n<h3 id=\"Change-Caps-Lock-to-Control\"><a href=\"#Change-Caps-Lock-to-Control\" class=\"headerlink\" title=\"Change Caps Lock to Control\"></a>Change <code>Caps Lock</code> to <code>Control</code></h3><p>I use <code>Control</code> a lot, but it’s at the left buttom corner, which is quite hard to reach. And I prefer <code>Shift</code> to input capitals, or input lower case and transform them with shortcut, so I use <code>Caps Lock</code> quite few.</p>\n<p>So, I change <code>Caps Lock</code> into <code>Control</code>. And I found that lots twers are doing the same thing, may be influenced by <a href=\"https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard\" target=\"_blank\" rel=\"external\">HHKB</a>.</p>\n<p>Howto: goto <code>System Preferences</code> &gt; <code>Keyboard</code>, click <code>Modifier Keys...</code> in <code>Keyboard</code> tab, in the popup window change the option <code>Caps Lock (⇪) Key:</code> to <code>⌃ Control</code>.</p>\n<h3 id=\"Remove-all-Dock-icons-OCD\"><a href=\"#Remove-all-Dock-icons-OCD\" class=\"headerlink\" title=\"Remove all Dock icons[OCD]\"></a>Remove all Dock icons[OCD]</h3><p><em>本条目对于强迫症适用。It’s for OCD(obsessive-compulsive disorder)</em></p>\n<p>There are several icons on the Dock by default, I rarely use most of them. And after opening several daily applications, the Dock comes so noisy, and the icons turn to really small. So I remove all the static icons on the Dock, to make space for runing applications.</p>\n<p><em>Finder cannot be removed.</em></p>\n<p>This command can easily hide all static Dock icons instead of removing them one by one:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock static-only -boolean <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>It’s easy to recovery:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults delete com.apple.dock static-only; killall Dock</div></pre></td></tr></table></figure>\n<p><em>The <code>Downloads</code>Folder on the Dock will be hidden too</em></p>\n<h3 id=\"Reset-the-order-of-icons-on-Launchpad-OCD\"><a href=\"#Reset-the-order-of-icons-on-Launchpad-OCD\" class=\"headerlink\" title=\"Reset the order of icons on Launchpad[OCD]\"></a>Reset the order of icons on Launchpad[OCD]</h3><p><em>本条目对于强迫症适用。It’s for OCD(obsessive-compulsive disorder)</em></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<h3 id=\"Keychain-Access\"><a href=\"#Keychain-Access\" class=\"headerlink\" title=\"Keychain Access\"></a>Keychain Access</h3><p>Keychain Access is a Mac OS X application. It can be used to find saved accounts and passwords including Wi-Fi password.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h2 id=\"2-Daily-Tools\"><a href=\"#2-Daily-Tools\" class=\"headerlink\" title=\"2. Daily Tools\"></a>2. Daily Tools</h2><p>Some routine software, and not necessarily related to development.</p>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a><a href=\"http://brew.sh\" target=\"_blank\" rel=\"external\">Homebrew</a></h3><p>Package management, official description: “The missing package manager for OS X”.</p>\n<p>Go to official site for installation steps.</p>\n<p>After installation, you only need to run command below to install mysql, gradle, maven, node：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install mysql gradle maven node</div></pre></td></tr></table></figure>\n<p>PS: install brew will download and install Apple Command Line Tools automatically.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Homebrew-Cask\"><a href=\"#Homebrew-Cask\" class=\"headerlink\" title=\"Homebrew Cask\"></a><a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"external\">Homebrew Cask</a></h3><p>brew-cask helps you to install OS X Applications. Like to install Chrome：<code>brew cask install google-chrome</code>. Also Evernote, Skype, Sublime Text, VirtualBox, Java7 …</p>\n<p>brew-cask is driven by community, you may raise a pull request when you found any missing or outdated application.</p>\n<p>You can find the installation method on offical website.</p>\n<p>You would like to search if you not sure if some application is already in cask.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask search java7</div></pre></td></tr></table></figure></p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">iTerm2</a></h3><p>iTerm2 is the most widely used terminal tool, considered as the replacement of Terminal. It provides <a href=\"https://www.iterm2.com/features.html\" target=\"_blank\" rel=\"external\">a group of practical features</a>, including <code>Split Panes</code>. Its default black background makes me throw away OS X’ inbuilt Terminal application without any hesitation.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure>\n<p>Thanks to brew-cask ~</p>\n<p>In iTerm2, except the commond shortcuts like <code>^E</code>(ctrl+E)(find more <a href=\"#Others\">here</a>). And after some configuration you can have more shortcuts like <code>⌥B</code>(alt+B), <code>⌥F</code>(alt+F).<br>HowTo: go to <code>Preferences</code> &gt; <code>Profiles</code> &gt; <code>Keys</code>, change the option of <code>Left option (⌥) key acts as</code> and <code>Right option (⌥) key acts as</code> to <code>+ESC</code>.</p>\n<p>When you open new window/tab, by default you’re at user home directory, and need input commands to go somewhere else. If you want to open new window/tab in previous directory, you can set it like this:<br><code>Preferences</code> &gt; <code>Profiles</code>, and select your profile(‘Default’ for most of time), go to <code>General</code> tab, check <code>Reuse previous seesion&#39;s directory</code> for <code>Working Directory</code>.</p>\n<p>If you want to save all the current windows/tabs layout, press <code>⌘⇧S</code>(command+shift+S) to save the window arrangement. Also you can find this item in the <code>Window</code> menu on the top.(<em>added by fff</em>)</p>\n<p>Till now, Terminal should be given up, and turn to use iTerm2.</p>\n<p>And in iTerm2, double click will select the according word, triple click will select the current line. Also the selected content will be in your clip-board, no addition <code>⌘C</code>(command+C) is required.</p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a><a href=\"http://ohmyz.sh\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></h3><p>By default Bash is only white and black, there is no more colors there. And On-My-Zsh brings the colorful world to you. Oh-My-Zsh also brings you a set of plugins and tools, which is quite handy for simplify commands input. In the below you will find that I love it to death.</p>\n<p>Go to official site for installation steps.</p>\n<p>Plugins I’m using: <code>git z sublime history rbenv bundler rake</code></p>\n<p>Oh-My-Zsh uses Z shell（zsh）, which is quite close to Bash, but it’s not Bash.</p>\n<p>In Z shell, <code>~/.zshrc</code> is the most important configure file. Oh-My-Zsh will set the current path into <code>~/.zshrc</code> as <code>$PATH</code> during installation. As I’m using brew, this is not something that I want to have. With brew, we are not encouraged to customize <code>$PAHT</code>, and by default Oh-My-Zsh already set <code>$PAHT</code> with quite good value:<code>$HOME/bin:/usr/local/bin:$PATH</code>, in which contains the <code>$HOME/bin</code>, it means we can put customized scripts in <code>$HOME/bin</code>.</p>\n<p>so I recommend you to reset the <code>~/.zshrc</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26\" target=\"_blank\" rel=\"external\">Since a commit on Jun 17 2016</a>, the <code>zshrc.zsh-template</code> didn’t change <code>$PATH</code> any more. Find <code># export PATH=$HOME/bin:/usr/local/bin:$PATH</code> and remove the <code>#</code> to make our life better。</p>\n</blockquote>\n<p>Oh-My-Zsh gets <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\" target=\"_blank\" rel=\"external\">more valuable plugins</a>.</p>\n<p>Besides Oh-My-Zsh, there is <a href=\"https://github.com/oh-my-fish/oh-my-fish\" target=\"_blank\" rel=\"external\">Oh My Fish</a>，which based on <a href=\"http://fishshell.com/\" target=\"_blank\" rel=\"external\">Fishshell</a>.</p>\n<h3 id=\"Stow\"><a href=\"#Stow\" class=\"headerlink\" title=\"Stow\"></a><a href=\"http://www.gnu.org/software/stow/\" target=\"_blank\" rel=\"external\">Stow</a></h3><p>GNU stow is the super girl(-.-) of symlink management. Mainly it’s used to symlink your <a href=\"http://dotfiles.github.io/\" target=\"_blank\" rel=\"external\">dotfiles</a>, like emacs，git configuration files of fish/zsh.</p>\n<p>Installation:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install stow</div></pre></td></tr></table></figure>\n<p>After installing, we can symlink the dotfiles. The full instructions for stow and dotfiles are here:<a href=\"https://github.com/jcouyang/dotfiles\" target=\"_blank\" rel=\"external\">https://github.com/jcouyang/dotfiles</a>.</p>\n<p>After symlinking all your dotfiles to <code>~/dotfiles</code>, push it to github. There is no worries any more for setuping another new laptop.</p>\n<h3 id=\"Git-Alias\"><a href=\"#Git-Alias\" class=\"headerlink\" title=\"Git Alias\"></a>Git Alias</h3><p>Almost everyone is looking for ways to increase their efficiency, like git alias, using <code>git st</code> instead of <code>git status</code>. But it requires some manual configuration, which makes everyone’s configuration differ.</p>\n<p>Oh-My-Zsh provides a set of system aliases to achieve the same purpose. For example: take <code>gst</code> as the alias of <code>git status</code>. Also the git plugin of Oh-My-Zsh is enabled by default, which means if you’re using Oh-My-Zsh, you are having a set of efficient aliases, which is been commonly used globally, isn’t that wonderful?!</p>\n<p>Some of my frequently used aliases are:</p>\n<table>\n<thead>\n<tr>\n<th>Alias</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gapa</td>\n<td><code>git add --patch</code></td>\n</tr>\n<tr>\n<td>gc!</td>\n<td><code>git commit -v --amend</code></td>\n</tr>\n<tr>\n<td>gcl</td>\n<td><code>git clone --recursive</code></td>\n</tr>\n<tr>\n<td>gclean</td>\n<td><code>git reset --hard &amp;&amp; git clean -dfx</code></td>\n</tr>\n<tr>\n<td>gcm</td>\n<td><code>git checkout master</code></td>\n</tr>\n<tr>\n<td>gcmsg</td>\n<td><code>git commit -m</code></td>\n</tr>\n<tr>\n<td>gco</td>\n<td><code>git checkout</code></td>\n</tr>\n<tr>\n<td>gd</td>\n<td><code>git diff</code></td>\n</tr>\n<tr>\n<td>gdca</td>\n<td><code>git diff --cached</code></td>\n</tr>\n<tr>\n<td>glola</td>\n<td><code>git log --graph --pretty = format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --all</code></td>\n</tr>\n<tr>\n<td>gp</td>\n<td><code>git push</code></td>\n</tr>\n<tr>\n<td>grbc</td>\n<td><code>git rebase --continue</code></td>\n</tr>\n<tr>\n<td>gst</td>\n<td><code>git status</code></td>\n</tr>\n<tr>\n<td>gup</td>\n<td><code>git pull --rebase</code></td>\n</tr>\n<tr>\n<td>gwip</td>\n<td><code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>The full list is here: <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a>, or simply run command <code>alias | grep git</code> in Oh-My-Zsh window.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"ShiftIt\"><a href=\"#ShiftIt\" class=\"headerlink\" title=\"ShiftIt\"></a>ShiftIt</h3><p>In OS X you only can adjust window size by dragging. I’ve tried lots of window management tools, but most of them have the conflict key mapping(mostly with IntelliJ IDEA). ShiftIt is the apparently rare one without any conflicts.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install shiftit</div></pre></td></tr></table></figure>\n<p>SizeUp is one replacer，share the same main shortcuts with ShiftIt.</p>\n<p>Divvy is another replacer, need to purchase through appstore.(<em>added by fff</em>)</p>\n<p>For hackers: <a href=\"https://github.com/jigish/slate\" target=\"_blank\" rel=\"external\">Slate</a>, configuration reference: <a href=\"http://thume.ca/howto/2012/11/19/using-slate/\" target=\"_blank\" rel=\"external\">http://thume.ca/howto/2012/11/19/using-slate/</a></p>\n<h3 id=\"Sublime-Text-2\"><a href=\"#Sublime-Text-2\" class=\"headerlink\" title=\"Sublime Text 2\"></a>Sublime Text 2</h3><p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sublime-text</div></pre></td></tr></table></figure>\n<p>Open file with Sublime Text in command line is quite handy, normally we need to link it first(following:<a href=\"https://www.sublimetext.com/docs/2/osx_command_line.html\" target=\"_blank\" rel=\"external\">OS X Command Line</a>) with: <code>ln -s &quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; ~/bin/subl</code>. </p>\n<p>But if you install it with brew-cask, the problem is already sorted by brew-cask, and it will remove the link when you uninstall Sublime Text.</p>\n<p>At the same time, Oh-My-Zsh also provides the plugin for Sublime Text: <code>sublime</code>(<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime</a>), which is perfectly compliant with brew installed Sublime Text.</p>\n<p>Replacers: Atom, TextMate, Sublime Text 3 etc. For all of them, brew-cask will manage the links for you.</p>\n<h3 id=\"MarkDown\"><a href=\"#MarkDown\" class=\"headerlink\" title=\"MarkDown\"></a><a href=\"https://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"external\">MarkDown</a></h3><p>MacDown is a Markdown editor. As Mou doesn’t support code highlighting, I switched to MacDown, which supports <a href=\"https://help.github.com/articles/github-flavored-markdown/\" target=\"_blank\" rel=\"external\">GFM</a> perfectly.</p>\n<p>I like Markdown a lot, and I write articles(include this one) with Markdown, also for slides(<a href=\"https://github.com/hakimel/reveal.js/\" target=\"_blank\" rel=\"external\">reveal.js</a>). Markdown makes me focus on the content itself, and won’t waste me too much time on the styles and layouts.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install macdown</div></pre></td></tr></table></figure>\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a><a href=\"https://github.com/rupa/z\" target=\"_blank\" rel=\"external\">z</a></h3><p>After opening new terminal, how do you get to the working directory? <code>cd xxx</code> or <code>^R</code>(ctrl+R, bash reverse search), or alias?</p>\n<p>z helps you get the target directory easily. Like running <code>z cask</code> in my terminal, it will lead me to <code>/usr/local/Library/Taps/caskroom/homebrew-cask/Casks</code>.</p>\n<p>It’s quite easy to install, nothing is required to be downloaded, as it’s already in Oh-My-Zsh. Open <code>~/.zshrc</code>, find plugins configuration line like this:<code>plugins=(git)</code>, and put <code>z</code> inside the parentheses like:<code>plugins=(git z)</code>, then re-initial terminal by <code>source ~/.zshrc</code>, it’s there now.</p>\n<p>Autojump is a replacer, which requires to be installed by brew.</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://vimium.github.io/\" target=\"_blank\" rel=\"external\">Vimium</a></h3><p>Vimium is a Google Chrome extension, which turns your chrome into a “hackers’s browser”, you can operate your Chrome via keyboard.</p>\n<p>For installation please go to Chrome Extension Market.</p>\n<p>For firefox there is a similar solution: <a href=\"https://github.com/mooz/keysnail\" target=\"_blank\" rel=\"external\">KeySnail</a>.</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a><a href=\"https://lastpass.com\" target=\"_blank\" rel=\"external\">LastPass</a></h3><p>LastPass is a password management tool, support a second login step, provides plugins for every browser and also OS X desktop version.</p>\n<p>The most important thing, it provides <strong>command line</strong> version, install it by:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lastpass-cli --with-pinentry</div></pre></td></tr></table></figure>\n<p>then, login into your account:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass login you@email.com</div></pre></td></tr></table></figure>\n<p>So you can copy password or integrate into other commands:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass show --password gmail.com -c</div></pre></td></tr></table></figure>\n<h3 id=\"SourceTree\"><a href=\"#SourceTree\" class=\"headerlink\" title=\"SourceTree\"></a><a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"external\">SourceTree</a></h3><p>SourceTree is an outstanding git GUI client by Atlassian. You may try if you want more than command line.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sourcetree</div></pre></td></tr></table></figure>\n<p>Brew-cast will add <code>stree</code> to <code>$PATH</code> when installing it. Run <code>stree</code> from terminal will invoke SourceTree open the Git repository under current path. for more: <code>stree --help</code>.</p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a><a href=\"http://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">CheatSheet</a></h3><p>CheatSheet will show a list of all active short cuts of the current application. Just hold the <code>⌘</code> for a bit longer.</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.mediaatelier.com/CheatSheet/imgs/main.png\" alt=\"CheatSheet\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheatSheet</div>\n            </figure>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cheatsheet</div></pre></td></tr></table></figure>\n<h3 id=\"Alfred\"><a href=\"#Alfred\" class=\"headerlink\" title=\"Alfred\"></a><a href=\"https://www.alfredapp.com\" target=\"_blank\" rel=\"external\">Alfred</a></h3><p>The must have tool for Mac user, comes together with a bunch of workflows, which will extremely save your operating time.</p>\n<p>Easy to start, but takes more time to setup your self-defined workflows, but anyway there are already lots of workflows shared by nice people, visit <a href=\"http://www.alfredworkflow.com/\" target=\"_blank\" rel=\"external\">here</a>, choose what you like, and modify it in your way.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h2 id=\"3-Tools-for-developers\"><a href=\"#3-Tools-for-developers\" class=\"headerlink\" title=\"3. Tools for developers\"></a>3. Tools for developers</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>There is no default JDK any more for new version of OS X, so you need to download and install it before you want to do some Java projects.</p>\n<p>Before brew-cask, we are used to download from: <a href=\"https://developer.apple.com/downloads/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/downloads/</a>. But the drawback is that uninstall or upgrades take significant time.<br>For JDK package, which is pkg format, there is no automatic way to uninstall it.</p>\n<p>But good news is brew-cask can do it for you:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install java</div></pre></td></tr></table></figure>\n<p>If you need Java-7 or Java-6, you can get from <code>homebrew-cask-versions</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap caskroom/versions</div><div class=\"line\">brew cask install java6</div></pre></td></tr></table></figure>\n<p>You can install several versions of JDK in Mac OS X, <code>/usr/libexec/java_home -V</code> will list all of them.</p>\n<p>So here is the problem, Which one is the one used by running <code>java</code> or any Java application? normally, OS X invokes the newest version of all those installed JDK versions. But you can change it by set <code>JAVA_HOME</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -version</div><div class=\"line\">java version <span class=\"string\">\"1.8.0_60\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</div><div class=\"line\">$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version</div><div class=\"line\">java version <span class=\"string\">\"1.6.0_65\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)</div></pre></td></tr></table></figure>\n<p>You may change <code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</code> into <code>JAVA_HOME=`/usr/libexec/java_home -v 1.6` </code>, which is more widely used.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"rbenv\"><a href=\"#rbenv\" class=\"headerlink\" title=\"rbenv\"></a><a href=\"https://github.com/sstephenson/rbenv\" target=\"_blank\" rel=\"external\">rbenv</a></h3><p>Everyone needs a Ruby version management tool. That’s rbenv, which is quite light and can be installed by brew.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv ruby-build</div></pre></td></tr></table></figure>\n<p>Then you need to enable <code>rbenv</code> plugin of Oh-My-Zsh, or you need to add <code>eval &quot;$(rbenv init -)&quot;</code> to <code>~/.zshrc</code> or <code>~/.zprofile</code></p>\n<p>Sometimes projects will depend on unique Ruby versions, like: <code>ruby-2.1.0</code>, you should go checkout <a href=\"https://github.com/tpope/rbenv-aliases\" target=\"_blank\" rel=\"external\">rbenv-aliases</a>.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv-aliases</div></pre></td></tr></table></figure>\n<p>Alternatives: RVM, chruby. But as RVM is unable to be installed by brew, and it also changes a bunch of files without any respect, that’s why I already gave RVM up. chruby is another light weight tool, and works perfactly with Oh-My-Zsh, it seems someone is using it in production enviroment.</p>\n<h3 id=\"Ruby-Daily-Alias\"><a href=\"#Ruby-Daily-Alias\" class=\"headerlink\" title=\"Ruby Daily Alias\"></a>Ruby Daily Alias</h3><p>Almost every Rubyist takes <code>bi</code> as alias of <code>bundle install</code>. Oh-My-Zsh provides <code>builder</code> plugin to setup a set of alias, like <code>bi</code>, <code>be</code>. Also allow you to run <code>rspec</code> directly, without any leading <code>be</code> or <code>bundle exec</code>. </p>\n<p>For a detailed list please go to <a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler\" target=\"_blank\" rel=\"external\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler</a>.</p>\n<p>Zsh shell has special usage for <code>[</code> and <code>]</code>, so <code>rake task[parameter]</code> will fail, you need to run it like this: <code>rake task\\[parameter\\]</code> or <code>noglob rake task[parameter]</code>. However Oh-My-Zsh already solves it, using the buildin rake plugin: <code>brake task[parameter]</code>.</p>\n<p>Be aware of that, put <code>rake</code> after <code>bundler</code> when modifying the plugin settings in <code>~/.zshrc</code>, for example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(git z sublime history rbenv bundler rake)</div></pre></td></tr></table></figure></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac\" target=\"_blank\" rel=\"external\">Hacker’s Guide to Setting up Your Mac</a></li>\n<li><a href=\"https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell\" target=\"_blank\" rel=\"external\">Setting up a new (OS X) development machine</a></li>\n<li><a href=\"http://www.xialeizhou.com/?p=71\" target=\"_blank\" rel=\"external\">高效 MacBook 工作环境配置</a> <em>*”Efficient MacBook working configurration”, you need google translate</em></li>\n<li><a href=\"http://www.zhihu.com/question/20873070\" target=\"_blank\" rel=\"external\">程序员如何优雅地使用 Mac？</a> <em>*”How to use Mac elegantly for programmer”, you need google translate also</em></li>\n<li><a href=\"http://sspai.com/33493\" target=\"_blank\" rel=\"external\">装点你的 Dock：外观篇</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Productive-Configuration-For-Mac\"><a href=\"#Productive-Configuration-For-Mac\" class=\"headerlink\" title=\"Productive Configuration For Mac\"></a>Productive Configuration For Mac</h1><h2 id=\"How-to-setup-a-efficient-working-environment\"><a href=\"#How-to-setup-a-efficient-working-environment\" class=\"headerlink\" title=\"How to setup a efficient working environment\"></a>How to setup a efficient working environment</h2><p><em>Translated from <a href=\"/2017/04/10/Mac生产力配置备忘/\">Mac生产力配置备忘</a>, thanks to author: Messiah from Hangchou China - fff</em></p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><ul>\n<li><a href=\"#1-os-x\">1. OS X</a><ul>\n<li><a href=\"#function-keys\">Function Keys</a></li>\n<li><a href=\"#keyboard-only-control\">Keyboard Only Control</a></li>\n<li><a href=\"#others\">Others</a></li>\n<li><a href=\"#change-`click`-of-trackpad-to-`tap`\">Change <code>click</code> of Trackpad to <code>Tap</code></a></li>\n<li><a href=\"#voice\">Voice</a></li>\n<li><a href=\"#dock-position\">Dock Position</a></li>\n<li><a href=\"#change-`caps-lock`-to-`control`\">Change <code>Caps Lock</code> to <code>Control</code></a></li>\n<li><a href=\"#remove-all-dock-icons[ocd]\">Remove all Dock icons[OCD]</a></li>\n<li><a href=\"#reset-the-order-of-icons-on-launchpad[ocd]\">Reset the order of icons on Launchpad[OCD]</a></li>\n<li><a href=\"#keychain-access\">Keychain Access</a></li>\n</ul>\n</li>\n<li><a href=\"#2-daily-tools\">2. Daily Tools</a><ul>\n<li><a href=\"#homebrew\">Homebrew</a></li>\n<li><a href=\"#homebrew-cask\">Homebrew Cask</a></li>\n<li><a href=\"#iterm2\">iTerm2</a></li>\n<li><a href=\"#oh-my-zsh\">Oh My Zsh</a></li>\n<li><a href=\"#stow\">Stow</a></li>\n<li><a href=\"#git-alias\">Git Alias</a></li>\n<li><a href=\"#shiftit\">ShiftIt</a></li>\n<li><a href=\"#sublime-text-2\">Sublime Text 2</a></li>\n<li><a href=\"#markdown\">MarkDown</a></li>\n<li><a href=\"#z\">z</a></li>\n<li><a href=\"#vimium\">Vimium</a></li>\n<li><a href=\"#lastpass\">LastPass</a></li>\n<li><a href=\"#sourcetree\">SourceTree</a></li>\n<li><a href=\"#cheatsheet\">CheatSheet</a></li>\n<li><a href=\"#alfred\">Alfred</a></li>\n</ul>\n</li>\n<li><a href=\"#3-tools-for-developers\">3. Tools for developers</a><ul>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#rbenv\">rbenv</a></li>\n<li><a href=\"#ruby-daily-alias\">Ruby Daily Alias</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<p>I was always thinking about writing this article, to share all the experiences I’ve learnt from other colleagues. Though there are already some really good books, from which I’ve learnt a lot also. But I still want to share my own experiences.</p>\n<p>In projects, I normally work with 1 to 10 people, and pairing a lot by sharing the same laptop, with external display, and extra mouse, keyboard. I’m mostly working with Java, Ruby, Node.js, Web and etc, and using lots of software from <a href=\"https://www.jetbrains.com/\">JetBrains</a>, like IntelliJ IDEA, RubyMine, WebStorm, etc.</p>\n<p>I know my knowledge is so limited, so I want the opinions from you by sharing you this article. Now days, more efficient way and better tools are still keeping comming, I’ll keep updating it, to collect the better ways and tools here, it’s my greedy wish. Thank u for share some experience on The comments section . Looking forward to your feedback.</p>\n<p>Several points of efficient Mac environment in my opinion:</p>\n<ul>\n<li><p>Automate</p>\n<p>Take a example, there are several steps to install an application manually: </p>\n<ol>\n<li>Open your browser, </li>\n<li>Search by the application name,</li>\n<li>Open the official site for the applicaiton,</li>\n<li>Find the download link,</li>\n<li>Downloading,</li>\n<li>Install it,</li>\n<li>Some post steps.</li>\n</ol>\n<p>But with automatic tools, you only required to do:</p>\n<ol>\n<li>Open terminal,</li>\n<li>Type in commands,</li>\n<li>Wait to be finished.</li>\n</ol>\n<p>Automate helps to reduce the steps and increase efficiency significantly.</p>\n</li>\n<li><p>Consistence</p>\n<p>When I’m pairing, sometimes the shortcuts or commands are different between each other’s laptop. I strongly recommend that, at least in the team, try to keep using the same shortcut and commands(I forget the practice name, there have to be one, please let me know if you get it).</p>\n</li>\n<li><p>Just enough</p>\n<p>Enough is perfect. If the system itself provides the function, I won’t install any other third party tools.</p>\n</li>\n<li><p>Efficiency</p>\n<p>Everything is about efficiency.</p>\n</li>\n</ul>\n<p><em>For third party applications only simple steps are provided, please go to offial site for detailed installation and instruction documents.</em></p>\n<p><em>Some sections are marked with [OCD], that means it’s my personal preference, take it or ignore it, it all depends on if you like it or not.</em></p>\n<p><em><a href=\"https://www.google.co.za/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwiDve-b7JHJAhUDxxQKHXF2DOE&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FObsessive%25E2%2580%2593compulsive_disorder&amp;usg=AFQjCNGDkJsHHtm6hy60uzEMBn2ee3rSoA&amp;bvm=bv.107467506,d.d24\">OCD(obsessive-compulsive disorder)</a>, I didn’t mean it, just make fun. Yes, I don’t have that disease ;)</em></p>\n<h2 id=\"1-OS-X\"><a href=\"#1-OS-X\" class=\"headerlink\" title=\"1. OS X\"></a>1. OS X</h2><p>Things related with OS X settings.</p>\n<h3 id=\"Function-Keys\"><a href=\"#Function-Keys\" class=\"headerlink\" title=\"Function Keys\"></a>Function Keys</h3><p>By default, F1-F12 are special function keys, like adjust screen brightness. You are required to press Fn at the same time, when you need input F1-F12(like IntelliJ IDEA shortcuts). It’s not so convenient for developers.</p>\n<p>To avoid pressing Fn: go to <code>System Preferences</code> &gt; <code>Keyboard</code>，select <code>Use all F1, F2, etc. keys as standard function keys</code> in <code>Keyboard</code> tab。</p>\n<h3 id=\"Keyboard-Only-Control\"><a href=\"#Keyboard-Only-Control\" class=\"headerlink\" title=\"Keyboard Only Control\"></a>Keyboard Only Control</h3><p>You may see this dialog before, when you try to close files in Sublime Text:</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-without-all-controls.png\" alt=\"dialog-box-without-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-without-all-controls</div>\n            </figure>\n<p>You may notice that the <code>Save</code> button is quite different with the other two, it’s BLUE. This kind of blue button is called <code>default button</code>, except triggering by clicking, you also can trigger it by <code>enter</code>.</p>\n<p>What else, how to trigger <code>Don&#39;t Save</code> without mouse clicking?</p>\n<p>Go to <code>System Preferences</code> &gt; <code>Keyboard</code>, select <code>All controls</code> in <code>Shortcuts</code> tab or just press <code>⌃F7</code>. And the dialog will turn into:</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/dialog-box-with-all-controls.png\" alt=\"dialog-box-with-all-controls\" title=\"\">\n                </div>\n                <div class=\"image-caption\">dialog-box-with-all-controls</div>\n            </figure>\n<p>The <code>Don&#39;t Save</code> button has borders now, so you can trigger it by <code>space</code>. And also, you can move the focus(blue borders) to other buttons by press <code>tab</code>, you can get rid of your mouse now.</p>\n<p>Except the way above, you can also select <code>Don&#39;t Save</code> by click <code>⌘⌫</code>(command+delete). This shortcut means select any button which means ‘delete’ or ‘do not save’.</p>\n<p>Of course, you may click <code>Esc</code> to trigger <code>Cancel</code>.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h3><p>Reduce using of Mouse and Trackpad may increase your efficiency.</p>\n<ul>\n<li><p><a href=\"https://support.apple.com/kb/HT201236\">Mac keyboard shortcts</a></p>\n<p>Apple official documents. Like how to move cursor between lines, words and so on.</p>\n</li>\n<li><p><a href=\"https://support.apple.com/kb/HT204434\">Mac keyboard shortcuts for accessibility features</a></p>\n<p>Apple official documents. The selection of blue button part is from this.</p>\n</li>\n</ul>\n<h3 id=\"Change-click-of-Trackpad-to-Tap\"><a href=\"#Change-click-of-Trackpad-to-Tap\" class=\"headerlink\" title=\"Change click of Trackpad to Tap\"></a>Change <code>click</code> of Trackpad to <code>Tap</code></h3><p>By default Trackpad is triggered by click, but you can change it to tap.</p>\n<p>Goto <code>System Preferences</code> &gt; <code>Trackpad</code>，check <code>Tap to click</code> in <code>Point &amp; Click</code> tab.</p>\n<h3 id=\"Voice\"><a href=\"#Voice\" class=\"headerlink\" title=\"Voice\"></a>Voice</h3><p>OS X can speak by：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">say hello</div></pre></td></tr></table></figure>\n<p>Combine it with other bash commands using <code>&amp;&amp;</code> or <code>;</code> like this:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say mission complete</div></pre></td></tr></table></figure>\n<p>Also you can let it speak almost anywhere by selecting one word and press <code>⌥+Esc</code>(Alt/Option+Esc). Before that you need goto <code>System Preferences</code> &gt; <code>Dictation &amp; Speech</code>, check <code>Speak selected text when the key is pressed</code> in <code>Text to Speech</code> tab. </p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Dock-Position\"><a href=\"#Dock-Position\" class=\"headerlink\" title=\"Dock Position\"></a>Dock Position</h3><p>Dock comes at the bottom of screen as default, but as the resolution is 16:10, we’d better move it to left or right of screen to gain more vertical space.</p>\n<h3 id=\"Change-Caps-Lock-to-Control\"><a href=\"#Change-Caps-Lock-to-Control\" class=\"headerlink\" title=\"Change Caps Lock to Control\"></a>Change <code>Caps Lock</code> to <code>Control</code></h3><p>I use <code>Control</code> a lot, but it’s at the left buttom corner, which is quite hard to reach. And I prefer <code>Shift</code> to input capitals, or input lower case and transform them with shortcut, so I use <code>Caps Lock</code> quite few.</p>\n<p>So, I change <code>Caps Lock</code> into <code>Control</code>. And I found that lots twers are doing the same thing, may be influenced by <a href=\"https://en.wikipedia.org/wiki/Happy_Hacking_Keyboard\">HHKB</a>.</p>\n<p>Howto: goto <code>System Preferences</code> &gt; <code>Keyboard</code>, click <code>Modifier Keys...</code> in <code>Keyboard</code> tab, in the popup window change the option <code>Caps Lock (⇪) Key:</code> to <code>⌃ Control</code>.</p>\n<h3 id=\"Remove-all-Dock-icons-OCD\"><a href=\"#Remove-all-Dock-icons-OCD\" class=\"headerlink\" title=\"Remove all Dock icons[OCD]\"></a>Remove all Dock icons[OCD]</h3><p><em>本条目对于强迫症适用。It’s for OCD(obsessive-compulsive disorder)</em></p>\n<p>There are several icons on the Dock by default, I rarely use most of them. And after opening several daily applications, the Dock comes so noisy, and the icons turn to really small. So I remove all the static icons on the Dock, to make space for runing applications.</p>\n<p><em>Finder cannot be removed.</em></p>\n<p>This command can easily hide all static Dock icons instead of removing them one by one:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock static-only -boolean <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<p>It’s easy to recovery:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults delete com.apple.dock static-only; killall Dock</div></pre></td></tr></table></figure>\n<p><em>The <code>Downloads</code>Folder on the Dock will be hidden too</em></p>\n<h3 id=\"Reset-the-order-of-icons-on-Launchpad-OCD\"><a href=\"#Reset-the-order-of-icons-on-Launchpad-OCD\" class=\"headerlink\" title=\"Reset the order of icons on Launchpad[OCD]\"></a>Reset the order of icons on Launchpad[OCD]</h3><p><em>本条目对于强迫症适用。It’s for OCD(obsessive-compulsive disorder)</em></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaults write com.apple.dock ResetLaunchPad -bool <span class=\"literal\">true</span>; killall Dock</div></pre></td></tr></table></figure>\n<h3 id=\"Keychain-Access\"><a href=\"#Keychain-Access\" class=\"headerlink\" title=\"Keychain Access\"></a>Keychain Access</h3><p>Keychain Access is a Mac OS X application. It can be used to find saved accounts and passwords including Wi-Fi password.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h2 id=\"2-Daily-Tools\"><a href=\"#2-Daily-Tools\" class=\"headerlink\" title=\"2. Daily Tools\"></a>2. Daily Tools</h2><p>Some routine software, and not necessarily related to development.</p>\n<h3 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a><a href=\"http://brew.sh\">Homebrew</a></h3><p>Package management, official description: “The missing package manager for OS X”.</p>\n<p>Go to official site for installation steps.</p>\n<p>After installation, you only need to run command below to install mysql, gradle, maven, node：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install mysql gradle maven node</div></pre></td></tr></table></figure>\n<p>PS: install brew will download and install Apple Command Line Tools automatically.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"Homebrew-Cask\"><a href=\"#Homebrew-Cask\" class=\"headerlink\" title=\"Homebrew Cask\"></a><a href=\"https://caskroom.github.io/\">Homebrew Cask</a></h3><p>brew-cask helps you to install OS X Applications. Like to install Chrome：<code>brew cask install google-chrome</code>. Also Evernote, Skype, Sublime Text, VirtualBox, Java7 …</p>\n<p>brew-cask is driven by community, you may raise a pull request when you found any missing or outdated application.</p>\n<p>You can find the installation method on offical website.</p>\n<p>You would like to search if you not sure if some application is already in cask.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask search java7</div></pre></td></tr></table></figure></p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a><a href=\"https://www.iterm2.com/\">iTerm2</a></h3><p>iTerm2 is the most widely used terminal tool, considered as the replacement of Terminal. It provides <a href=\"https://www.iterm2.com/features.html\">a group of practical features</a>, including <code>Split Panes</code>. Its default black background makes me throw away OS X’ inbuilt Terminal application without any hesitation.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install iterm2</div></pre></td></tr></table></figure>\n<p>Thanks to brew-cask ~</p>\n<p>In iTerm2, except the commond shortcuts like <code>^E</code>(ctrl+E)(find more <a href=\"#Others\">here</a>). And after some configuration you can have more shortcuts like <code>⌥B</code>(alt+B), <code>⌥F</code>(alt+F).<br>HowTo: go to <code>Preferences</code> &gt; <code>Profiles</code> &gt; <code>Keys</code>, change the option of <code>Left option (⌥) key acts as</code> and <code>Right option (⌥) key acts as</code> to <code>+ESC</code>.</p>\n<p>When you open new window/tab, by default you’re at user home directory, and need input commands to go somewhere else. If you want to open new window/tab in previous directory, you can set it like this:<br><code>Preferences</code> &gt; <code>Profiles</code>, and select your profile(‘Default’ for most of time), go to <code>General</code> tab, check <code>Reuse previous seesion&#39;s directory</code> for <code>Working Directory</code>.</p>\n<p>If you want to save all the current windows/tabs layout, press <code>⌘⇧S</code>(command+shift+S) to save the window arrangement. Also you can find this item in the <code>Window</code> menu on the top.(<em>added by fff</em>)</p>\n<p>Till now, Terminal should be given up, and turn to use iTerm2.</p>\n<p>And in iTerm2, double click will select the according word, triple click will select the current line. Also the selected content will be in your clip-board, no addition <code>⌘C</code>(command+C) is required.</p>\n<h3 id=\"Oh-My-Zsh\"><a href=\"#Oh-My-Zsh\" class=\"headerlink\" title=\"Oh My Zsh\"></a><a href=\"http://ohmyz.sh\">Oh My Zsh</a></h3><p>By default Bash is only white and black, there is no more colors there. And On-My-Zsh brings the colorful world to you. Oh-My-Zsh also brings you a set of plugins and tools, which is quite handy for simplify commands input. In the below you will find that I love it to death.</p>\n<p>Go to official site for installation steps.</p>\n<p>Plugins I’m using: <code>git z sublime history rbenv bundler rake</code></p>\n<p>Oh-My-Zsh uses Z shell（zsh）, which is quite close to Bash, but it’s not Bash.</p>\n<p>In Z shell, <code>~/.zshrc</code> is the most important configure file. Oh-My-Zsh will set the current path into <code>~/.zshrc</code> as <code>$PATH</code> during installation. As I’m using brew, this is not something that I want to have. With brew, we are not encouraged to customize <code>$PAHT</code>, and by default Oh-My-Zsh already set <code>$PAHT</code> with quite good value:<code>$HOME/bin:/usr/local/bin:$PATH</code>, in which contains the <code>$HOME/bin</code>, it means we can put customized scripts in <code>$HOME/bin</code>.</p>\n<p>so I recommend you to reset the <code>~/.zshrc</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/commit/551abfcbb48a0c001eadef80abc3276af4e9ad26\">Since a commit on Jun 17 2016</a>, the <code>zshrc.zsh-template</code> didn’t change <code>$PATH</code> any more. Find <code># export PATH=$HOME/bin:/usr/local/bin:$PATH</code> and remove the <code>#</code> to make our life better。</p>\n</blockquote>\n<p>Oh-My-Zsh gets <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview\">more valuable plugins</a>.</p>\n<p>Besides Oh-My-Zsh, there is <a href=\"https://github.com/oh-my-fish/oh-my-fish\">Oh My Fish</a>，which based on <a href=\"http://fishshell.com/\">Fishshell</a>.</p>\n<h3 id=\"Stow\"><a href=\"#Stow\" class=\"headerlink\" title=\"Stow\"></a><a href=\"http://www.gnu.org/software/stow/\">Stow</a></h3><p>GNU stow is the super girl(-.-) of symlink management. Mainly it’s used to symlink your <a href=\"http://dotfiles.github.io/\">dotfiles</a>, like emacs，git configuration files of fish/zsh.</p>\n<p>Installation:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install stow</div></pre></td></tr></table></figure>\n<p>After installing, we can symlink the dotfiles. The full instructions for stow and dotfiles are here:<a href=\"https://github.com/jcouyang/dotfiles\">https://github.com/jcouyang/dotfiles</a>.</p>\n<p>After symlinking all your dotfiles to <code>~/dotfiles</code>, push it to github. There is no worries any more for setuping another new laptop.</p>\n<h3 id=\"Git-Alias\"><a href=\"#Git-Alias\" class=\"headerlink\" title=\"Git Alias\"></a>Git Alias</h3><p>Almost everyone is looking for ways to increase their efficiency, like git alias, using <code>git st</code> instead of <code>git status</code>. But it requires some manual configuration, which makes everyone’s configuration differ.</p>\n<p>Oh-My-Zsh provides a set of system aliases to achieve the same purpose. For example: take <code>gst</code> as the alias of <code>git status</code>. Also the git plugin of Oh-My-Zsh is enabled by default, which means if you’re using Oh-My-Zsh, you are having a set of efficient aliases, which is been commonly used globally, isn’t that wonderful?!</p>\n<p>Some of my frequently used aliases are:</p>\n<table>\n<thead>\n<tr>\n<th>Alias</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gapa</td>\n<td><code>git add --patch</code></td>\n</tr>\n<tr>\n<td>gc!</td>\n<td><code>git commit -v --amend</code></td>\n</tr>\n<tr>\n<td>gcl</td>\n<td><code>git clone --recursive</code></td>\n</tr>\n<tr>\n<td>gclean</td>\n<td><code>git reset --hard &amp;&amp; git clean -dfx</code></td>\n</tr>\n<tr>\n<td>gcm</td>\n<td><code>git checkout master</code></td>\n</tr>\n<tr>\n<td>gcmsg</td>\n<td><code>git commit -m</code></td>\n</tr>\n<tr>\n<td>gco</td>\n<td><code>git checkout</code></td>\n</tr>\n<tr>\n<td>gd</td>\n<td><code>git diff</code></td>\n</tr>\n<tr>\n<td>gdca</td>\n<td><code>git diff --cached</code></td>\n</tr>\n<tr>\n<td>glola</td>\n<td><code>git log --graph --pretty = format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --all</code></td>\n</tr>\n<tr>\n<td>gp</td>\n<td><code>git push</code></td>\n</tr>\n<tr>\n<td>grbc</td>\n<td><code>git rebase --continue</code></td>\n</tr>\n<tr>\n<td>gst</td>\n<td><code>git status</code></td>\n</tr>\n<tr>\n<td>gup</td>\n<td><code>git pull --rebase</code></td>\n</tr>\n<tr>\n<td>gwip</td>\n<td><code>git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit -m &quot;--wip--&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>The full list is here: <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a>, or simply run command <code>alias | grep git</code> in Oh-My-Zsh window.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"ShiftIt\"><a href=\"#ShiftIt\" class=\"headerlink\" title=\"ShiftIt\"></a>ShiftIt</h3><p>In OS X you only can adjust window size by dragging. I’ve tried lots of window management tools, but most of them have the conflict key mapping(mostly with IntelliJ IDEA). ShiftIt is the apparently rare one without any conflicts.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install shiftit</div></pre></td></tr></table></figure>\n<p>SizeUp is one replacer，share the same main shortcuts with ShiftIt.</p>\n<p>Divvy is another replacer, need to purchase through appstore.(<em>added by fff</em>)</p>\n<p>For hackers: <a href=\"https://github.com/jigish/slate\">Slate</a>, configuration reference: <a href=\"http://thume.ca/howto/2012/11/19/using-slate/\">http://thume.ca/howto/2012/11/19/using-slate/</a></p>\n<h3 id=\"Sublime-Text-2\"><a href=\"#Sublime-Text-2\" class=\"headerlink\" title=\"Sublime Text 2\"></a>Sublime Text 2</h3><p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sublime-text</div></pre></td></tr></table></figure>\n<p>Open file with Sublime Text in command line is quite handy, normally we need to link it first(following:<a href=\"https://www.sublimetext.com/docs/2/osx_command_line.html\">OS X Command Line</a>) with: <code>ln -s &quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; ~/bin/subl</code>. </p>\n<p>But if you install it with brew-cask, the problem is already sorted by brew-cask, and it will remove the link when you uninstall Sublime Text.</p>\n<p>At the same time, Oh-My-Zsh also provides the plugin for Sublime Text: <code>sublime</code>(<a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/sublime</a>), which is perfectly compliant with brew installed Sublime Text.</p>\n<p>Replacers: Atom, TextMate, Sublime Text 3 etc. For all of them, brew-cask will manage the links for you.</p>\n<h3 id=\"MarkDown\"><a href=\"#MarkDown\" class=\"headerlink\" title=\"MarkDown\"></a><a href=\"https://daringfireball.net/projects/markdown/\">MarkDown</a></h3><p>MacDown is a Markdown editor. As Mou doesn’t support code highlighting, I switched to MacDown, which supports <a href=\"https://help.github.com/articles/github-flavored-markdown/\">GFM</a> perfectly.</p>\n<p>I like Markdown a lot, and I write articles(include this one) with Markdown, also for slides(<a href=\"https://github.com/hakimel/reveal.js/\">reveal.js</a>). Markdown makes me focus on the content itself, and won’t waste me too much time on the styles and layouts.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install macdown</div></pre></td></tr></table></figure>\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a><a href=\"https://github.com/rupa/z\">z</a></h3><p>After opening new terminal, how do you get to the working directory? <code>cd xxx</code> or <code>^R</code>(ctrl+R, bash reverse search), or alias?</p>\n<p>z helps you get the target directory easily. Like running <code>z cask</code> in my terminal, it will lead me to <code>/usr/local/Library/Taps/caskroom/homebrew-cask/Casks</code>.</p>\n<p>It’s quite easy to install, nothing is required to be downloaded, as it’s already in Oh-My-Zsh. Open <code>~/.zshrc</code>, find plugins configuration line like this:<code>plugins=(git)</code>, and put <code>z</code> inside the parentheses like:<code>plugins=(git z)</code>, then re-initial terminal by <code>source ~/.zshrc</code>, it’s there now.</p>\n<p>Autojump is a replacer, which requires to be installed by brew.</p>\n<h3 id=\"Vimium\"><a href=\"#Vimium\" class=\"headerlink\" title=\"Vimium\"></a><a href=\"https://vimium.github.io/\">Vimium</a></h3><p>Vimium is a Google Chrome extension, which turns your chrome into a “hackers’s browser”, you can operate your Chrome via keyboard.</p>\n<p>For installation please go to Chrome Extension Market.</p>\n<p>For firefox there is a similar solution: <a href=\"https://github.com/mooz/keysnail\">KeySnail</a>.</p>\n<h3 id=\"LastPass\"><a href=\"#LastPass\" class=\"headerlink\" title=\"LastPass\"></a><a href=\"https://lastpass.com\">LastPass</a></h3><p>LastPass is a password management tool, support a second login step, provides plugins for every browser and also OS X desktop version.</p>\n<p>The most important thing, it provides <strong>command line</strong> version, install it by:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lastpass-cli --with-pinentry</div></pre></td></tr></table></figure>\n<p>then, login into your account:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass login you@email.com</div></pre></td></tr></table></figure>\n<p>So you can copy password or integrate into other commands:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lpass show --password gmail.com -c</div></pre></td></tr></table></figure>\n<h3 id=\"SourceTree\"><a href=\"#SourceTree\" class=\"headerlink\" title=\"SourceTree\"></a><a href=\"https://www.sourcetreeapp.com/\">SourceTree</a></h3><p>SourceTree is an outstanding git GUI client by Atlassian. You may try if you want more than command line.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install sourcetree</div></pre></td></tr></table></figure>\n<p>Brew-cast will add <code>stree</code> to <code>$PATH</code> when installing it. Run <code>stree</code> from terminal will invoke SourceTree open the Git repository under current path. for more: <code>stree --help</code>.</p>\n<h3 id=\"CheatSheet\"><a href=\"#CheatSheet\" class=\"headerlink\" title=\"CheatSheet\"></a><a href=\"http://www.mediaatelier.com/CheatSheet/\">CheatSheet</a></h3><p>CheatSheet will show a list of all active short cuts of the current application. Just hold the <code>⌘</code> for a bit longer.</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://www.mediaatelier.com/CheatSheet/imgs/main.png\" alt=\"CheatSheet\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CheatSheet</div>\n            </figure>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install cheatsheet</div></pre></td></tr></table></figure>\n<h3 id=\"Alfred\"><a href=\"#Alfred\" class=\"headerlink\" title=\"Alfred\"></a><a href=\"https://www.alfredapp.com\">Alfred</a></h3><p>The must have tool for Mac user, comes together with a bunch of workflows, which will extremely save your operating time.</p>\n<p>Easy to start, but takes more time to setup your self-defined workflows, but anyway there are already lots of workflows shared by nice people, visit <a href=\"http://www.alfredworkflow.com/\">here</a>, choose what you like, and modify it in your way.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install alfred</div></pre></td></tr></table></figure>\n<h2 id=\"3-Tools-for-developers\"><a href=\"#3-Tools-for-developers\" class=\"headerlink\" title=\"3. Tools for developers\"></a>3. Tools for developers</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>There is no default JDK any more for new version of OS X, so you need to download and install it before you want to do some Java projects.</p>\n<p>Before brew-cask, we are used to download from: <a href=\"https://developer.apple.com/downloads/\">https://developer.apple.com/downloads/</a>. But the drawback is that uninstall or upgrades take significant time.<br>For JDK package, which is pkg format, there is no automatic way to uninstall it.</p>\n<p>But good news is brew-cask can do it for you:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew cask install java</div></pre></td></tr></table></figure>\n<p>If you need Java-7 or Java-6, you can get from <code>homebrew-cask-versions</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew tap caskroom/versions</div><div class=\"line\">brew cask install java6</div></pre></td></tr></table></figure>\n<p>You can install several versions of JDK in Mac OS X, <code>/usr/libexec/java_home -V</code> will list all of them.</p>\n<p>So here is the problem, Which one is the one used by running <code>java</code> or any Java application? normally, OS X invokes the newest version of all those installed JDK versions. But you can change it by set <code>JAVA_HOME</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ java -version</div><div class=\"line\">java version <span class=\"string\">\"1.8.0_60\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</div><div class=\"line\">$ JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home java -version</div><div class=\"line\">java version <span class=\"string\">\"1.6.0_65\"</span></div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-466.1-11M4716)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-466.1, mixed mode)</div></pre></td></tr></table></figure>\n<p>You may change <code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</code> into <code>JAVA_HOME=`/usr/libexec/java_home -v 1.6` </code>, which is more widely used.</p>\n<p><em>Some lines are missing here. As not helping a lot - fff</em></p>\n<h3 id=\"rbenv\"><a href=\"#rbenv\" class=\"headerlink\" title=\"rbenv\"></a><a href=\"https://github.com/sstephenson/rbenv\">rbenv</a></h3><p>Everyone needs a Ruby version management tool. That’s rbenv, which is quite light and can be installed by brew.</p>\n<p>Installation:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv ruby-build</div></pre></td></tr></table></figure>\n<p>Then you need to enable <code>rbenv</code> plugin of Oh-My-Zsh, or you need to add <code>eval &quot;$(rbenv init -)&quot;</code> to <code>~/.zshrc</code> or <code>~/.zprofile</code></p>\n<p>Sometimes projects will depend on unique Ruby versions, like: <code>ruby-2.1.0</code>, you should go checkout <a href=\"https://github.com/tpope/rbenv-aliases\">rbenv-aliases</a>.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install rbenv-aliases</div></pre></td></tr></table></figure>\n<p>Alternatives: RVM, chruby. But as RVM is unable to be installed by brew, and it also changes a bunch of files without any respect, that’s why I already gave RVM up. chruby is another light weight tool, and works perfactly with Oh-My-Zsh, it seems someone is using it in production enviroment.</p>\n<h3 id=\"Ruby-Daily-Alias\"><a href=\"#Ruby-Daily-Alias\" class=\"headerlink\" title=\"Ruby Daily Alias\"></a>Ruby Daily Alias</h3><p>Almost every Rubyist takes <code>bi</code> as alias of <code>bundle install</code>. Oh-My-Zsh provides <code>builder</code> plugin to setup a set of alias, like <code>bi</code>, <code>be</code>. Also allow you to run <code>rspec</code> directly, without any leading <code>be</code> or <code>bundle exec</code>. </p>\n<p>For a detailed list please go to <a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler\">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/bundler</a>.</p>\n<p>Zsh shell has special usage for <code>[</code> and <code>]</code>, so <code>rake task[parameter]</code> will fail, you need to run it like this: <code>rake task\\[parameter\\]</code> or <code>noglob rake task[parameter]</code>. However Oh-My-Zsh already solves it, using the buildin rake plugin: <code>brake task[parameter]</code>.</p>\n<p>Be aware of that, put <code>rake</code> after <code>bundler</code> when modifying the plugin settings in <code>~/.zshrc</code>, for example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins=(git z sublime history rbenv bundler rake)</div></pre></td></tr></table></figure></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"http://lapwinglabs.com/blog/hacker-guide-to-setting-up-your-mac\">Hacker’s Guide to Setting up Your Mac</a></li>\n<li><a href=\"https://mattstauffer.co/blog/setting-up-a-new-os-x-development-machine-part-1-core-files-and-custom-shell\">Setting up a new (OS X) development machine</a></li>\n<li><a href=\"http://www.xialeizhou.com/?p=71\">高效 MacBook 工作环境配置</a> <em>*”Efficient MacBook working configurration”, you need google translate</em></li>\n<li><a href=\"http://www.zhihu.com/question/20873070\">程序员如何优雅地使用 Mac？</a> <em>*”How to use Mac elegantly for programmer”, you need google translate also</em></li>\n<li><a href=\"http://sspai.com/33493\">装点你的 Dock：外观篇</a></li>\n</ul>\n"},{"title":"Hello Hexo","comments":1,"date":"2017-03-31T16:00:00.000Z","_content":"想建一个自己的博客很久了，然而事务杂忙（其实只是在看火影和王座）。拖到现在才来完成今年的小目标。搭建的过程中在网上看了很多很多博客，在这里就不一一列举了。然后自己汇总了一下，就贴在这里，以替换例行的Hello World。\n## 安装Hexo与配置\n### 前期准备工作\n安装``node.js``的环境，包括``nvm``的安装、``node.js``具体版本的安装（其实我是一枚前端渣^_^哈哈哈）\nPS:Mac下通过``homebrew``（可以参看我的[``homebrew``安装教程](#)）神器安装``nvm``，再``nvm install node.js``的某版本即可\n```  bash\n$ alias nvminit_sq='. \"$(brew --prefix nvm)/nvm.sh\"'\n```\n### 安装hexo\n``` bash\n$ npm install -g hexo-cli\n```\n### 初始化hexo文件夹\n先``cd``到为``hexo``准备的文件夹，然后执行：\n```  bash\n$ hexo init\n```\n\n## github准备与操作\n在github上创建名为yourname.github.io的repository，这里yourname一定要换成你自己的github的username\n\n### 配置hexo\n修改``hexo``目录下的``_config.yml``文件的末尾：\n```\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n同理，yourname换成你的github的username\n### 安装git部署工具\n在hexo的目录下执行命令：\n``` bash\n$ npm install hexo-deployer-git --save\n```\n## 写作与发布\n```\n$ hexo new \"My New Post\"\n```\n更多信息: [写作](https://hexo.io/zh-cn/docs/writing.html)\n### 运行服务\n```\n$ hexo server\n```\n更多信息: [服务](https://hexo.io/zh-cn/docs/server.html)\n### 生成静态文件\n```\n$ hexo generate\n```\n更多信息:  [生成](https://hexo.io/zh-cn/docs/generating.html)\n### 部署远程服务器\n``` bash\n$ hexo deploy\n```\n更多信息:  [部署](https://hexo.io/zh-cn/docs/deployment.html)\n至此博客搭建完成，浏览器输入yourname.github.io即可看到个人博客的内容\n## 总结\n去年离开[59store](www.59store.com)的时候我就定下了几个今年必须拿下的几个小目标，终于可以划掉一个啦啦啦^_^！\n参考了很多资料，原来打算用我弱鸡的全栈经验（一个数据后台的开发经验）来部个lamp，后来服务器都准备好了（花了我很多大洋），想多参考别人的bolg再下手干，发现很多技术博客都有自豪的采用WordPress，power by Typecho,hexo强力驱动...云云，Google了下发现了许多托管GitHub的静态博客框架（还有不要买服务器的惊艳到了@……@），比较流行的有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等等。最终选定了Hexo来搭建自己的博客，主要原因是Hexo的教程多吧^-^\n","source":"_posts/hello-Hexo.md","raw":"---\ntitle: Hello Hexo\ncomments: true\ndate: 2017-04-01\n---\n想建一个自己的博客很久了，然而事务杂忙（其实只是在看火影和王座）。拖到现在才来完成今年的小目标。搭建的过程中在网上看了很多很多博客，在这里就不一一列举了。然后自己汇总了一下，就贴在这里，以替换例行的Hello World。\n## 安装Hexo与配置\n### 前期准备工作\n安装``node.js``的环境，包括``nvm``的安装、``node.js``具体版本的安装（其实我是一枚前端渣^_^哈哈哈）\nPS:Mac下通过``homebrew``（可以参看我的[``homebrew``安装教程](#)）神器安装``nvm``，再``nvm install node.js``的某版本即可\n```  bash\n$ alias nvminit_sq='. \"$(brew --prefix nvm)/nvm.sh\"'\n```\n### 安装hexo\n``` bash\n$ npm install -g hexo-cli\n```\n### 初始化hexo文件夹\n先``cd``到为``hexo``准备的文件夹，然后执行：\n```  bash\n$ hexo init\n```\n\n## github准备与操作\n在github上创建名为yourname.github.io的repository，这里yourname一定要换成你自己的github的username\n\n### 配置hexo\n修改``hexo``目录下的``_config.yml``文件的末尾：\n```\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n同理，yourname换成你的github的username\n### 安装git部署工具\n在hexo的目录下执行命令：\n``` bash\n$ npm install hexo-deployer-git --save\n```\n## 写作与发布\n```\n$ hexo new \"My New Post\"\n```\n更多信息: [写作](https://hexo.io/zh-cn/docs/writing.html)\n### 运行服务\n```\n$ hexo server\n```\n更多信息: [服务](https://hexo.io/zh-cn/docs/server.html)\n### 生成静态文件\n```\n$ hexo generate\n```\n更多信息:  [生成](https://hexo.io/zh-cn/docs/generating.html)\n### 部署远程服务器\n``` bash\n$ hexo deploy\n```\n更多信息:  [部署](https://hexo.io/zh-cn/docs/deployment.html)\n至此博客搭建完成，浏览器输入yourname.github.io即可看到个人博客的内容\n## 总结\n去年离开[59store](www.59store.com)的时候我就定下了几个今年必须拿下的几个小目标，终于可以划掉一个啦啦啦^_^！\n参考了很多资料，原来打算用我弱鸡的全栈经验（一个数据后台的开发经验）来部个lamp，后来服务器都准备好了（花了我很多大洋），想多参考别人的bolg再下手干，发现很多技术博客都有自豪的采用WordPress，power by Typecho,hexo强力驱动...云云，Google了下发现了许多托管GitHub的静态博客框架（还有不要买服务器的惊艳到了@……@），比较流行的有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等等。最终选定了Hexo来搭建自己的博客，主要原因是Hexo的教程多吧^-^\n","slug":"hello-Hexo","published":1,"updated":"2017-06-09T01:53:12.000Z","layout":"post","photos":[],"link":"","_id":"cj3plemxu000h761wdkowz94s","content":"<p>想建一个自己的博客很久了，然而事务杂忙（其实只是在看火影和王座）。拖到现在才来完成今年的小目标。搭建的过程中在网上看了很多很多博客，在这里就不一一列举了。然后自己汇总了一下，就贴在这里，以替换例行的Hello World。</p>\n<h2 id=\"安装Hexo与配置\"><a href=\"#安装Hexo与配置\" class=\"headerlink\" title=\"安装Hexo与配置\"></a>安装Hexo与配置</h2><h3 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h3><p>安装<code>node.js</code>的环境，包括<code>nvm</code>的安装、<code>node.js</code>具体版本的安装（其实我是一枚前端渣^_^哈哈哈）<br>PS:Mac下通过<code>homebrew</code>（可以参看我的<a href=\"#\"><code>homebrew</code>安装教程</a>）神器安装<code>nvm</code>，再<code>nvm install node.js</code>的某版本即可<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">alias</span> nvminit_sq=<span class=\"string\">'. \"$(brew --prefix nvm)/nvm.sh\"'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"初始化hexo文件夹\"><a href=\"#初始化hexo文件夹\" class=\"headerlink\" title=\"初始化hexo文件夹\"></a>初始化hexo文件夹</h3><p>先<code>cd</code>到为<code>hexo</code>准备的文件夹，然后执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<h2 id=\"github准备与操作\"><a href=\"#github准备与操作\" class=\"headerlink\" title=\"github准备与操作\"></a>github准备与操作</h2><p>在github上创建名为yourname.github.io的repository，这里yourname一定要换成你自己的github的username</p>\n<h3 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h3><p>修改<code>hexo</code>目录下的<code>_config.yml</code>文件的末尾：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>同理，yourname换成你的github的username</p>\n<h3 id=\"安装git部署工具\"><a href=\"#安装git部署工具\" class=\"headerlink\" title=\"安装git部署工具\"></a>安装git部署工具</h3><p>在hexo的目录下执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h2 id=\"写作与发布\"><a href=\"#写作与发布\" class=\"headerlink\" title=\"写作与发布\"></a>写作与发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>\n<p>更多信息: <a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"external\">写作</a></p>\n<h3 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>更多信息: <a href=\"https://hexo.io/zh-cn/docs/server.html\" target=\"_blank\" rel=\"external\">服务</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>更多信息:  <a href=\"https://hexo.io/zh-cn/docs/generating.html\" target=\"_blank\" rel=\"external\">生成</a></p>\n<h3 id=\"部署远程服务器\"><a href=\"#部署远程服务器\" class=\"headerlink\" title=\"部署远程服务器\"></a>部署远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>更多信息:  <a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">部署</a><br>至此博客搭建完成，浏览器输入yourname.github.io即可看到个人博客的内容</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>去年离开<a href=\"www.59store.com\">59store</a>的时候我就定下了几个今年必须拿下的几个小目标，终于可以划掉一个啦啦啦^_^！<br>参考了很多资料，原来打算用我弱鸡的全栈经验（一个数据后台的开发经验）来部个lamp，后来服务器都准备好了（花了我很多大洋），想多参考别人的bolg再下手干，发现很多技术博客都有自豪的采用WordPress，power by Typecho,hexo强力驱动…云云，Google了下发现了许多托管GitHub的静态博客框架（还有不要买服务器的惊艳到了@……@），比较流行的有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等等。最终选定了Hexo来搭建自己的博客，主要原因是Hexo的教程多吧^-^</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想建一个自己的博客很久了，然而事务杂忙（其实只是在看火影和王座）。拖到现在才来完成今年的小目标。搭建的过程中在网上看了很多很多博客，在这里就不一一列举了。然后自己汇总了一下，就贴在这里，以替换例行的Hello World。</p>\n<h2 id=\"安装Hexo与配置\"><a href=\"#安装Hexo与配置\" class=\"headerlink\" title=\"安装Hexo与配置\"></a>安装Hexo与配置</h2><h3 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h3><p>安装<code>node.js</code>的环境，包括<code>nvm</code>的安装、<code>node.js</code>具体版本的安装（其实我是一枚前端渣^_^哈哈哈）<br>PS:Mac下通过<code>homebrew</code>（可以参看我的<a href=\"#\"><code>homebrew</code>安装教程</a>）神器安装<code>nvm</code>，再<code>nvm install node.js</code>的某版本即可<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">alias</span> nvminit_sq=<span class=\"string\">'. \"$(brew --prefix nvm)/nvm.sh\"'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"初始化hexo文件夹\"><a href=\"#初始化hexo文件夹\" class=\"headerlink\" title=\"初始化hexo文件夹\"></a>初始化hexo文件夹</h3><p>先<code>cd</code>到为<code>hexo</code>准备的文件夹，然后执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<h2 id=\"github准备与操作\"><a href=\"#github准备与操作\" class=\"headerlink\" title=\"github准备与操作\"></a>github准备与操作</h2><p>在github上创建名为yourname.github.io的repository，这里yourname一定要换成你自己的github的username</p>\n<h3 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h3><p>修改<code>hexo</code>目录下的<code>_config.yml</code>文件的末尾：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>同理，yourname换成你的github的username</p>\n<h3 id=\"安装git部署工具\"><a href=\"#安装git部署工具\" class=\"headerlink\" title=\"安装git部署工具\"></a>安装git部署工具</h3><p>在hexo的目录下执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<h2 id=\"写作与发布\"><a href=\"#写作与发布\" class=\"headerlink\" title=\"写作与发布\"></a>写作与发布</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>\n<p>更多信息: <a href=\"https://hexo.io/zh-cn/docs/writing.html\">写作</a></p>\n<h3 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>更多信息: <a href=\"https://hexo.io/zh-cn/docs/server.html\">服务</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>更多信息:  <a href=\"https://hexo.io/zh-cn/docs/generating.html\">生成</a></p>\n<h3 id=\"部署远程服务器\"><a href=\"#部署远程服务器\" class=\"headerlink\" title=\"部署远程服务器\"></a>部署远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>更多信息:  <a href=\"https://hexo.io/zh-cn/docs/deployment.html\">部署</a><br>至此博客搭建完成，浏览器输入yourname.github.io即可看到个人博客的内容</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>去年离开<a href=\"www.59store.com\">59store</a>的时候我就定下了几个今年必须拿下的几个小目标，终于可以划掉一个啦啦啦^_^！<br>参考了很多资料，原来打算用我弱鸡的全栈经验（一个数据后台的开发经验）来部个lamp，后来服务器都准备好了（花了我很多大洋），想多参考别人的bolg再下手干，发现很多技术博客都有自豪的采用WordPress，power by Typecho,hexo强力驱动…云云，Google了下发现了许多托管GitHub的静态博客框架（还有不要买服务器的惊艳到了@……@），比较流行的有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等等。最终选定了Hexo来搭建自己的博客，主要原因是Hexo的教程多吧^-^</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3plemwq0001761ws35ypedy","category_id":"cj3plemx60005761wtd5lzyu9","_id":"cj3plemxt000g761w03octd8d"},{"post_id":"cj3plemxg0009761w2datknxp","category_id":"cj3plemxr000e761wy3tnf1m4","_id":"cj3plemxz000n761wjbq2s7rk"},{"post_id":"cj3plemxo000b761wglthhfk5","category_id":"cj3plemxx000j761wy458rz22","_id":"cj3plemy1000q761w3p5dz1r1"},{"post_id":"cj3plemxs000f761w3hceqccr","category_id":"cj3plemxx000j761wy458rz22","_id":"cj3plemy1000r761wywp3ee3r"}],"PostTag":[{"post_id":"cj3plemwq0001761ws35ypedy","tag_id":"cj3plemx80006761wx93b2lvs","_id":"cj3plemxx000k761waf1b2eqy"},{"post_id":"cj3plemwq0001761ws35ypedy","tag_id":"cj3plemxq000c761w6a293mvt","_id":"cj3plemxy000l761wwvd13s5c"},{"post_id":"cj3plemxg0009761w2datknxp","tag_id":"cj3plemxw000i761wnvnfj4s8","_id":"cj3plemy2000t761whrzsxywm"},{"post_id":"cj3plemxg0009761w2datknxp","tag_id":"cj3plemxy000m761wb8qcmraz","_id":"cj3plemy2000u761wvd0737fj"},{"post_id":"cj3plemxg0009761w2datknxp","tag_id":"cj3plemy0000p761wxvy4jncr","_id":"cj3plemy4000w761w0nm7iw9p"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy1000s761wpfgntmve","_id":"cj3plemyd0012761wf8y6wf3o"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy3000v761wv070i46s","_id":"cj3plemyd0013761womy3lceo"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy7000x761wqpaw9413","_id":"cj3plemye0015761waopg4phy"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy8000y761wtj5h1hat","_id":"cj3plemyf0016761w0kb3999a"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy8000z761wvtwwctih","_id":"cj3plemyh0018761wxn0fmuge"},{"post_id":"cj3plemxo000b761wglthhfk5","tag_id":"cj3plemy90010761w7y0piz6d","_id":"cj3plemyh0019761wqlmco3z3"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy1000s761wpfgntmve","_id":"cj3plemyo001d761wjeuifoww"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy3000v761wv070i46s","_id":"cj3plemyp001e761w5ojqnsnk"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy7000x761wqpaw9413","_id":"cj3plemyp001f761w21l7lga9"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy8000y761wtj5h1hat","_id":"cj3plemyp001g761w101pys2f"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy8000z761wvtwwctih","_id":"cj3plemyp001h761wtaqnu6sz"},{"post_id":"cj3plemxs000f761w3hceqccr","tag_id":"cj3plemy90010761w7y0piz6d","_id":"cj3plemyr001i761w2ljghlwk"}],"Tag":[{"name":"Apache","_id":"cj3plemx80006761wx93b2lvs"},{"name":"服务器","_id":"cj3plemxq000c761w6a293mvt"},{"name":"CentOS","_id":"cj3plemxw000i761wnvnfj4s8"},{"name":"Perl","_id":"cj3plemxy000m761wb8qcmraz"},{"name":"Python","_id":"cj3plemy0000p761wxvy4jncr"},{"name":"mac","_id":"cj3plemy1000s761wpfgntmve"},{"name":"homebrew","_id":"cj3plemy3000v761wv070i46s"},{"name":"IDE","_id":"cj3plemy7000x761wqpaw9413"},{"name":"zsh","_id":"cj3plemy8000y761wtj5h1hat"},{"name":"git","_id":"cj3plemy8000z761wvtwwctih"},{"name":"sublime","_id":"cj3plemy90010761w7y0piz6d"}]}}